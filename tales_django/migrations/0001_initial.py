# Generated by Django 5.1.4 on 2025-01-01 20:09

import core.helpers.dates
import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('address', models.TextField(blank=True, default='')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Membership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('membership_type', models.TextField(choices=[('ACADEMIC', 'Academic'), ('NORMAL', 'Normal'), ('HONORARY', 'Honorary')], default='NORMAL')),
                ('started', models.IntegerField(default=core.helpers.dates.this_year)),
                ('until', models.IntegerField(default=core.helpers.dates.this_year)),
                ('mailing_list', models.BooleanField(default=False)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Track',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField(help_text='Required. 150 characters or fewer. Track title', max_length=150, verbose_name='track title')),
                ('description', models.TextField(blank=True, max_length=512, verbose_name='Description')),
                ('youtube_url', models.URLField(blank=True, max_length=150, verbose_name='YouTube video link url')),
                ('tags_list', models.TextField(blank=True, max_length=150)),
                ('audio_file', models.FileField(upload_to='tracks/%Y-%m-%d')),
                ('preview_picture', models.ImageField(blank=True, null=True, upload_to='tracks/%Y-%m-%d')),
                ('audio_duration', models.BigIntegerField(help_text='Duration (seconds)', null=True)),
                ('audio_size', models.BigIntegerField(help_text='File size (bytes)', null=True)),
                ('track_status', models.TextField(choices=[('PUBLISHED', 'Published'), ('HIDDEN', 'Hidden')], default='PUBLISHED')),
                ('created_at', models.DateField(default=datetime.date.today)),
                ('updated_at', models.DateField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='creator', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='updater', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
