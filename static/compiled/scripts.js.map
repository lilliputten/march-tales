{"version":3,"file":"scripts.js","mappings":"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","sources":["webpack://march-tales/./src/assets/CommonNotify/CommonNotifySingleton.ts","webpack://march-tales/./src/assets/track-blocks/tracksPlayer.ts","webpack://march-tales/./src/assets/helpers/CommonHelpers.js"],"sourcesContent":["import * as CommonHelpers from '../helpers/CommonHelpers';\n\n/** Toast types */\ntype TMode = 'info' | 'error' | 'warn' | 'success';\n\n/** Icon shapes (move to constants?) */\nconst icons: Record<TMode, string> = {\n  success: 'bi-check',\n  error: 'bi-exclamation-triangle-fill',\n  warn: 'bi-bell-fill',\n  info: 'bi-info-lg',\n};\n\nconst iconClassNamePrefix = 'bi';\n\ninterface TNotifyData {\n  node: HTMLDivElement;\n  handler?: TSetTimeout;\n}\n\n// Define module...\nclass CommonNotify {\n  notifyRoot: HTMLDivElement = undefined;\n\n  timeoutDelay = 3000;\n\n  inited = false;\n\n  // Methods...\n\n  removeNotify(notifyData: TNotifyData) {\n    const { node, handler } = notifyData;\n    // Play animation...\n    node.classList.remove('active');\n    if (handler) {\n      clearTimeout(handler);\n      notifyData.handler = undefined;\n    }\n    setTimeout(() => {\n      // ...And remove node (TODO: Check if node still exists in dom tree)...\n      try {\n        this.notifyRoot.removeChild(node);\n      } catch (\n        _e // eslint-disable-line @typescript-eslint/no-unused-vars\n      ) {\n        // NOOP\n      }\n    }, 250); // Value of `var(--common-animation-time)`\n  }\n\n  /** showNotify\n   * @param {'info' | 'error' | 'warn' | 'success'} mode - Message type ('info' is default)\n   * @param {string|Error} text - Message content\n   */\n  showNotify(mode: TMode, text: string | Error) {\n    this.ensureInit();\n    if (!text) {\n      // If only one parameters passed assume it as message with default type\n      text = mode;\n      mode = 'info';\n    }\n    let content: string;\n    if (text instanceof Error) {\n      // Convert error object to the plain text...\n      content = CommonHelpers.getErrorText(text);\n    } else {\n      content = String(text);\n    }\n    // Create node...\n    const node = document.createElement('div');\n    node.classList.add('notify');\n    node.classList.add('notify-' + mode);\n    // Add icon...\n    const nodeIcon = document.createElement('span');\n    nodeIcon.classList.add('icon');\n    nodeIcon.classList.add(iconClassNamePrefix);\n    nodeIcon.classList.add(icons[mode]);\n    node.appendChild(nodeIcon);\n    // Add text...\n    const nodeText = document.createElement('div');\n    nodeText.classList.add('text');\n    nodeText.innerHTML = content;\n    node.appendChild(nodeText);\n    this.notifyRoot.appendChild(node);\n    // Play appearing animation...\n    window.requestAnimationFrame(() => {\n      setTimeout(() => {\n        node.classList.add('active');\n      }, 10);\n    });\n    // Remove node after delay...\n    /** @type {TNotifyData} */\n    const notifyData: TNotifyData = { node, handler: undefined };\n    const removeNotifyHandler = this.removeNotify.bind(this, notifyData);\n    notifyData.handler = setTimeout(removeNotifyHandler, this.timeoutDelay);\n    // Stop & restore timer on mouse in and out events...\n    node.addEventListener('mouseenter', () => {\n      // Clear timer...\n      clearTimeout(notifyData.handler);\n    });\n    node.addEventListener('mouseleave', () => {\n      // Resume timer...\n      notifyData.handler = setTimeout(removeNotifyHandler, this.timeoutDelay);\n    });\n    // Click handler...\n    node.addEventListener('click', removeNotifyHandler);\n  }\n\n  // Some shorthands...\n\n  /** @param {string|Error} text - Message content */\n  showInfo(text: string | Error) {\n    this.showNotify('info', text);\n  }\n\n  /** @param {string|Error} text - Message content */\n  showSuccess(text: string | Error) {\n    this.showNotify('success', text);\n  }\n\n  /** @param {string|Error} text - Message content */\n  showWarn(text: string | Error) {\n    this.showNotify('warn', text);\n  }\n\n  /** @param {string|Error} text - Message content */\n  showError(text: string | Error) {\n    this.showNotify('error', text);\n  }\n\n  // Demo...\n\n  showDemo() {\n    // DEBUG: Show sample notifiers...\n    this.showInfo('Info');\n    this.showSuccess('Success');\n    this.showWarn('Warn');\n    this.showError('Error');\n  }\n\n  // Initialization...\n\n  /** Ensure the modal has initiazlized */\n  ensureInit() {\n    this.init();\n  }\n\n  createDomNode() {\n    // TODO: To use bootstrap toasts?\n    const rootNode = document.body;\n    const notifyRoot = document.createElement('div');\n    notifyRoot.classList.add('notify-root');\n    notifyRoot.setAttribute('id', 'notify-root');\n    rootNode.appendChild(notifyRoot);\n    this.notifyRoot = notifyRoot;\n  }\n\n  /** Initialize nodule. */\n  init() {\n    if (!this.inited) {\n      this.createDomNode();\n      this.inited = true;\n    }\n  }\n}\n\n// Create and export singletone\nexport const commonNotify = new CommonNotify();\n\n// commonNotify.init();\n","import { formatDuration } from '../helpers/CommonHelpers';\nimport { commonNotify } from '../CommonNotify/CommonNotifySingleton';\n\nconst sharedPlayerContainer = document.body;\n\nlet sharedPlayerNode: HTMLElement | undefined = undefined;\nlet currentTrackPlayer: HTMLElement | undefined = undefined;\n\ninterface TSharedPlayerOptions {\n  type?: string;\n  src?: string;\n}\n\n// Values for dataset ststuses\nconst TRUE = 'true';\n// const FALSE = ''; // NOTE: Using `delete` operator\n\nfunction ensureSharedPlayer(/* opts: TSharedPlayerOptions = {} */) {\n  if (!sharedPlayerNode) {\n    sharedPlayerNode = document.createElement('div');\n    sharedPlayerNode.classList.add('shared-player');\n    const audio = document.createElement('audio');\n    audio.addEventListener('loadeddata', sharedPlayerLoaded);\n    sharedPlayerNode.appendChild(audio);\n    sharedPlayerContainer.appendChild(sharedPlayerNode);\n  }\n  return sharedPlayerNode;\n}\n\nfunction ensureSharedPlayerAudio() {\n  const sharedPlayer = ensureSharedPlayer();\n  const audio = sharedPlayer.getElementsByTagName('audio')[0];\n  if (!audio) {\n    throw new Error('No audio node found');\n  }\n  return audio;\n}\n\nfunction createSharedPlayerSource(opts: TSharedPlayerOptions = {}) {\n  // const sharedPlayer = ensureSharedPlayer();\n  const audio = ensureSharedPlayerAudio();\n  const prevSources = Array.from(audio.getElementsByTagName('source'));\n  for (const node of prevSources) {\n    node.remove();\n  }\n  audio.setAttribute('preload', 'auto');\n  const source = document.createElement('source');\n  source.setAttribute('type', opts.type || 'audio/mpeg');\n  if (opts.src) {\n    source.setAttribute('src', opts.src);\n  }\n  // @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/loadeddata_event\n  audio.addEventListener('loadeddata', sharedPlayerLoaded);\n  audio.addEventListener('playing', sharedPlayerPlay);\n  audio.addEventListener('timeupdate', sharedPlayerTimeUpdate);\n  audio.addEventListener('ended', sharedPlayerEnded);\n  source.addEventListener('error', sharedPlayerError);\n  audio.appendChild(source);\n  return source;\n}\n\nfunction sharedPlayerEnded(_ev: Event) {\n  const audio = ensureSharedPlayerAudio();\n  /* console.log('[sharedPlayerEnded]', {\n   *   ev,\n   * });\n   */\n  // Rewind for the next play\n  audio.currentTime = 0;\n  // Update status\n  const dataset = currentTrackPlayer?.dataset;\n  if (dataset) {\n    delete dataset.status;\n  }\n}\n\nfunction sharedPlayerTimeUpdate(ev: Event) {\n  const timeNode = currentTrackPlayer?.querySelector('.time');\n  const audio = ev.currentTarget as HTMLAudioElement;\n  const { currentTime } = audio;\n  if (timeNode) {\n    const secs = Math.floor(currentTime * 1000);\n    const durationFormatted = formatDuration(secs);\n    timeNode.innerHTML = durationFormatted;\n  }\n  /* console.log('[sharedPlayerTimeUpdate]', {\n   *   timeNode,\n   *   currentTime,\n   *   ev,\n   * });\n   */\n  const dataset = currentTrackPlayer?.dataset;\n  if (dataset) {\n    // dataset.status = 'playing';\n  }\n}\n\nfunction sharedPlayerPlay(_ev: Event) {\n  /* console.log('[sharedPlayerPlay]', {\n   *   ev,\n   * });\n   */\n  const dataset = currentTrackPlayer?.dataset;\n  if (dataset) {\n    dataset.status = 'playing';\n  }\n}\n\nfunction sharedPlayerLoaded(_ev: Event) {\n  const audio = ensureSharedPlayerAudio();\n  /* console.log('[sharedPlayerLoaded]', {\n   *   ev,\n   * });\n   */\n  const dataset = currentTrackPlayer?.dataset;\n  if (dataset) {\n    dataset.loaded = TRUE;\n    delete dataset.error;\n  }\n  audio.play();\n}\n\nfunction sharedPlayerError(ev: Event) {\n  const srcElement = ev.currentTarget as HTMLSourceElement;\n  const { src, type } = srcElement;\n  const errMsg = 'Error loading audio file ' + src;\n  const error = new Error(errMsg);\n  // eslint-disable-next-line no-console\n  console.error('[sharedPlayerError]', errMsg, {\n    error,\n    currentTrackPlayer,\n    src,\n    type,\n    ev,\n  });\n  debugger; // eslint-disable-line no-debugger\n  // TODO: Show toast\n  commonNotify.showError(errMsg);\n  const dataset = currentTrackPlayer?.dataset;\n  if (dataset) {\n    dataset.error = errMsg;\n    delete dataset.loaded;\n    delete dataset.status;\n  }\n}\n\nfunction isAudioPlaying(audio: HTMLAudioElement) {\n  return !!audio && audio.currentTime > 0 && !audio.paused && !audio.ended && audio.readyState > 2;\n}\n\nfunction stopPreviousPlayer() {\n  if (sharedPlayerNode) {\n    const audio = sharedPlayerNode.getElementsByTagName('audio')[0];\n    if (audio && isAudioPlaying(audio)) {\n      audio.pause();\n      audio.currentTime = 0;\n    }\n  }\n  if (currentTrackPlayer) {\n    const { dataset } = currentTrackPlayer;\n    delete dataset.status;\n    delete dataset.loaded;\n    delete dataset.error;\n  }\n}\n\nfunction trackPlayHandler(ev: MouseEvent) {\n  const controlNode = ev.currentTarget as HTMLElement;\n  const trackControlsNode = controlNode.closest('.track-controls') as HTMLElement;\n  const trackPlayer = controlNode.closest('.track-player') as HTMLElement;\n  if (currentTrackPlayer && currentTrackPlayer !== trackPlayer) {\n    stopPreviousPlayer();\n  }\n  const { dataset } = trackPlayer;\n  const isPlaying = dataset.status === 'playing';\n  const isWaiting = dataset.status === 'waiting';\n  const isLoaded = !!dataset.loaded;\n  const readyToPlay = !isWaiting && !isPlaying;\n  const audio = ensureSharedPlayerAudio();\n  /* console.log('[tracksPlayer:trackPlayHandler]', {\n   *   // isError,\n   *   isPlaying,\n   *   isWaiting,\n   *   isLoaded,\n   *   // isPaused,\n   *   readyToPlay,\n   *   controlNode,\n   *   trackControlsNode,\n   *   trackPlayer,\n   * });\n   */\n  if (isPlaying) {\n    // Pause if playing...\n    audio.pause();\n    dataset.status = 'paused';\n  } else if (readyToPlay) {\n    // Play if hasn't played now...\n    currentTrackPlayer = trackPlayer;\n    if (!isLoaded) {\n      dataset.status = 'waiting';\n      delete dataset.loaded;\n      delete dataset.error;\n      const { trackMediaUrl } = dataset;\n      const source = createSharedPlayerSource({ src: trackMediaUrl });\n      if (!source) {\n        throw new Error('No audio source node found');\n      }\n      audio.load();\n    } else {\n      dataset.status = 'playing';\n      audio.play();\n    }\n  }\n}\n\nfunction initTrackPlayerNode(playerNode: HTMLElement) {\n  const { dataset } = playerNode;\n  const {\n    inited,\n    // trackId, // \"1\"\n    trackMediaUrl, // \"/media/samples/gr-400x225.jpg\"\n  } = dataset;\n  if (inited || !trackMediaUrl) {\n    return;\n  }\n  const playControl = playerNode.querySelector('.track-controls .track-control-play');\n  playControl.addEventListener('click', trackPlayHandler);\n  dataset.inited = TRUE;\n}\n\nexport function initTracksPlayerWrapper(domNode: HTMLElement = document.body) {\n  const players = domNode.querySelectorAll('.track-player[data-track-media-url]');\n  players.forEach(initTrackPlayerNode);\n}\n","// @ts-check\n\nexport function NOOP() {}\n\n/** Compare two arrays with scalar (number, string, boolean) values\n * @param {(number | string | boolean)[]} a1\n * @param {(number | string | boolean)[]} a2\n * @return {boolean}\n */\nexport function compareArrays(a1, a2) {\n  if (!a1 || !a1) {\n    return a1 === a2;\n  }\n  if (a1.length !== a2.length) {\n    return false;\n  }\n  // Compare all the items...\n  for (let i = 0; i < a1.length; i++) {\n    if (a1[i] !== a2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/** getErrorText - Return plain text for error.\n * @param {string|Error|string[]|Error[]} error - Error or errors list.\n * @return {string}\n */\nexport function getErrorText(error) {\n  if (!error) {\n    return;\n  }\n  if (Array.isArray(error)) {\n    return error.map(this.getErrorText.bind(this)).join('\\n');\n  }\n  if (error instanceof Error) {\n    error = error.message;\n  } else if (typeof error !== 'string') {\n    // TODO?\n    error = String(error);\n  }\n  return error;\n}\n\n/** quoteHtmlAttr -- quote all invalid characters for html\n * @param {string} str\n * @param {boolean} [preserveCR]\n */\nexport function quoteHtmlAttr(str, preserveCR) {\n  const crValue = preserveCR ? '&#13;' : '\\n';\n  return (\n    String(str) // Forces the conversion to string\n      .replace(/&/g, '&amp;') // This MUST be the 1st replacement\n      .replace(/'/g, '&apos;') // The 4 other predefined entities, required\n      .replace(/\"/g, '&quot;')\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;')\n      // You may add other replacements here for HTML only (but it's not\n      // necessary). Or for XML, only if the named entities are defined in its\n      // DTD.\n      .replace(/\\r\\n/g, crValue) // Must be before the next replacement\n      .replace(/[\\r\\n]/g, crValue)\n  );\n}\n\n/** htmlToElement -- Create dom node instance from html string\n * @param {string} html - Html representing a single element\n * @return {HTMLElement}\n */\nexport function htmlToElement(html) {\n  const template = document.createElement('template');\n  if (Array.isArray(html)) {\n    html = html.join('');\n  }\n  html = html.trim(); // Never return a text node of whitespace as the result\n  template.innerHTML = html;\n  const content = template.content;\n  return /** @type HTMLElement */ (content.firstChild);\n}\n\n/** htmlToElements -- Convert text html representation to HTMLCollection object\n * @param {string|string[]} html\n * @return {HTMLCollection}\n */\nexport function htmlToElements(html) {\n  const template = document.createElement('template');\n  if (Array.isArray(html)) {\n    html = html.join('');\n  }\n  html = html.trim(); // Never return a text node of whitespace as the result\n  template.innerHTML = html;\n  const content = template.content;\n  return content.children;\n}\n\n/** updateNodeContent -- Replace all inner dom node content.\n * @param {Element} node\n * @param {THtmlContent} content\n */\nexport function updateNodeContent(node, content) {\n  if (!node) {\n    throw new Error('Undefined node to update content');\n  }\n  if (typeof content === 'string') {\n    // Replace with string content...\n    node.innerHTML = content;\n  } else if (Array.isArray(content)) {\n    // Replace multiple elements...\n    node.replaceChildren.apply(node, content);\n  } else {\n    // Replace single element...\n    node.replaceChildren(content);\n  }\n}\n\n/** decodeQuery\n * @param {string | string[]} qs\n * @param {string} [sep]\n * @param {string} [eq]\n * @param {any} [options]\n * @returns {{}}\n */\nexport function decodeQuery(qs, sep, eq, options) {\n  sep = sep || '&';\n  eq = eq || '=';\n  /** @type {Record<string, unknown> | unknown[]} */\n  const obj = {};\n  if (typeof qs !== 'string' || qs.length === 0) {\n    return obj;\n  }\n  const regexp = /\\+/g;\n  qs = qs.split(sep);\n  let maxKeys = 1000;\n  if (options && typeof options.maxKeys === 'number') {\n    maxKeys = options.maxKeys;\n  }\n  let len = qs.length;\n  // maxKeys <= 0 means that we should not limit keys count\n  if (maxKeys > 0 && len > maxKeys) {\n    len = maxKeys;\n  }\n  for (let i = 0; i < len; ++i) {\n    const x = qs[i].replace(regexp, '%20'),\n      idx = x.indexOf(eq);\n    let kstr, vstr;\n    if (idx >= 0) {\n      kstr = x.substring(0, idx);\n      vstr = x.substring(idx + 1);\n    } else {\n      kstr = x;\n      vstr = '';\n    }\n    const k = decodeURIComponent(kstr);\n    const v = decodeURIComponent(vstr);\n    const it = obj[k];\n    if (!Object.prototype.hasOwnProperty.call(obj, k)) {\n      obj[k] = v;\n    } else if (Array.isArray(it)) {\n      it.push(v);\n    } else {\n      obj[k] = [it, v];\n    }\n  }\n  return obj;\n}\n\n/** parseQuery -- Parse url query string (in form `?xx=yy&...` or `xx=yy&...`)\n * @param {string} search  - Query string\n * @return {Record<string, string>} query - Query object\n */\nexport function parseQuery(search) {\n  if (!search) {\n    return {};\n  }\n  if (search.indexOf('?') === 0) {\n    search = search.substring(1);\n  }\n  return decodeQuery(search);\n}\n\n/** makeQuery\n * @param {Record<string, string | number | boolean> | {}} params\n * @param {{ addQuestionSymbol?: boolean; useEmptyStrings?: boolean; useUndefinedValues?: boolean }} opts\n * @returns {string}\n */\nexport function makeQuery(params, opts = {}) {\n  let url = Object.entries(params)\n    .map(([id, val]) => {\n      const valStr = String(val);\n      if (val == undefined && !opts.useUndefinedValues) {\n        return undefined;\n      }\n      if (valStr === '' && !opts.useEmptyStrings) {\n        return undefined;\n      }\n      return encodeURI(id) + '=' + encodeURI(String(val == undefined ? '' : val));\n    })\n    .filter(Boolean)\n    .join('&');\n  if (opts.addQuestionSymbol && url) {\n    url = '?' + url;\n  }\n  return url;\n}\n\n/** Dynamically load external script\n * @param {string} url\n * @return {Promise<Event>}\n */\nexport function addScript(url) {\n  return new Promise((resolve, reject) => {\n    // document.write('<script src=\"' + url + '\"></script>');\n    const script = document.createElement('script');\n    script.setAttribute('src', url);\n    script.addEventListener('load', resolve);\n    script.addEventListener('error', (event) => {\n      const {\n        target,\n        // srcElement,\n      } = event;\n      // @ts-ignore\n      const { href, baseURI } = target;\n      const error = new Error(`Cannot load script resurce by url '${url}'`);\n      // eslint-disable-next-line no-console\n      console.error('[CommonHelpers:addScript]', {\n        error,\n        url,\n        href,\n        baseURI,\n        target,\n        event,\n      });\n      // eslint-disable-next-line no-debugger\n      debugger;\n      reject(error);\n    });\n    document.head.appendChild(script);\n  });\n}\n\n/** Dynamically load external css\n * @param {string} url\n * @return {Promise<unknown>}\n */\nexport function addCssStyle(url) {\n  return new Promise((resolve, reject) => {\n    // Try to find exists node...\n    const testNode = document.head.querySelector(\n      'link[href=\"' + url + '\"], link[data-url=\"' + url + '\"]',\n    );\n    if (testNode) {\n      // Style already found!\n      return resolve({ type: 'already-loaded', target: testNode });\n    }\n    // reject(new Error('test')); // DEBUG: Test errors catching\n    const node = document.createElement('link');\n    node.setAttribute('href', url);\n    node.setAttribute('type', 'text/css');\n    node.setAttribute('rel', 'stylesheet');\n    node.setAttribute('data-url', url);\n    node.addEventListener('load', resolve);\n    node.addEventListener('error', (event) => {\n      const {\n        target,\n        // srcElement,\n      } = event;\n      // @ts-ignore\n      const { href, baseURI } = target;\n      const error = new Error(`Cannot load css resurce by url '${url}'`);\n      // eslint-disable-next-line no-console\n      console.error('[CommonHelpers:addCssStyle]', {\n        error,\n        url,\n        href,\n        baseURI,\n        target,\n        event,\n      });\n      // eslint-disable-next-line no-debugger\n      debugger;\n      reject(error);\n    });\n    document.head.appendChild(node);\n  });\n}\n\n/**\n * @param {HTMLSelectElement} node\n * @param {(string|number)[]} values\n */\nexport function setMultipleSelectValues(node, values) {\n  const strValues = values.map(String);\n  const options = Array.from(node.options);\n  options.forEach((item) => {\n    const { value, selected } = item;\n    const isSelected = strValues.includes(value);\n    if (isSelected !== selected) {\n      item.selected = isSelected;\n    }\n  });\n}\n\n/** processMultipleRequestErrors\n * @param {Response[]} resList\n * @return {Error[]}\n */\nexport function processMultipleRequestErrors(resList) {\n  return /** @type {Error[]} */ (\n    resList\n      .map((res) => {\n        if (!res.ok) {\n          return new Error(`Can't load url '${res.url}': ${res.statusText}, ${res.status}`);\n        }\n      })\n      .filter(Boolean)\n  );\n}\n\n/**\n * @param {number} n\n * @param {TNormalizedFloatStrOptions} [opts={}]\n * @returns {string}\n */\nexport function normalizedFloatStr(n, opts = {}) {\n  const {\n    // prettier-ignore\n    fixedPoint = 2,\n    stripFixedZeros = true,\n  } = opts;\n  let str = n.toFixed(fixedPoint);\n  if (stripFixedZeros) {\n    str = str.replace(/\\.*0+$/, '');\n  }\n  return str;\n}\n/**\n * @param {number} size\n * @param {TGetApproxSizeOptions} [opts={}]\n * @returns {[number | string, string]}\n */\nexport function getApproxSize(size, opts = {}) {\n  const { normalize } = opts;\n  const levels = [\n    'B', // Bytes\n    'K', // Kilobytes\n    'M', // Megabytes\n    'G', // Gigabites\n  ];\n  const lastLevel = levels.length - 1;\n  const range = 1024;\n  let level = 0;\n  while (level < lastLevel) {\n    if (size < range) {\n      break;\n    }\n    size /= range;\n    level++;\n  }\n  const currLevelStr = levels[level];\n  /** Result: final number or normalized representation (depends on option's `normalize`)\n   * @type {number | string}\n   */\n  let result = size;\n  if (normalize) {\n    const normalizeOpts = typeof normalize === 'object' ? normalize : undefined;\n    result = normalizedFloatStr(size, normalizeOpts);\n  }\n  return [result, currLevelStr];\n}\n\n/** @param {number} time - Time duration, ms\n * @return {string}\n */\nexport function formatDuration(time) {\n  const sec = time / 1000;\n  const min = sec / 60;\n  const hrs = min / 60;\n  const days = hrs / 24;\n  const srcItems = [\n    // prettier-ignore\n    days,\n    hrs % 24,\n    min % 60,\n    sec % 60,\n  ];\n  const items = srcItems.map(Math.floor).map((val, idx) => {\n    // Not mins and secs and empty...\n    if (idx < 2 && !val) {\n      return undefined;\n    }\n    // Hours, mins, secs...\n    if (idx >= 1) {\n      return String(val).padStart(2, '0');\n    }\n    // Days...\n    if (!idx) {\n      return String(val) + 'd';\n    }\n  });\n  /* console.log('[CommonHelpers:formatDuration]', {\n   *   sec,\n   *   min,\n   *   hrs,\n   *   days,\n   *   items,\n   *   srcItems,\n   *   time,\n   * });\n   */\n  const daysStr = items.shift();\n  return [\n    // prettier-ignore\n    daysStr,\n    items.filter(Boolean).join(':'),\n  ]\n    .filter(Boolean)\n    .join(' ');\n}\n\n/** @param {string} str */\nexport function getAsyncHash(str) {\n  const encoder = new TextEncoder();\n  const buf = encoder.encode(str);\n  return crypto.subtle.digest('SHA-256', buf).then((aryBuf) => {\n    const ary = new Uint8Array(aryBuf);\n    const res = Array.from(ary)\n      .map((x) => x.toString(16).padStart(2, '0'))\n      .join('');\n    return res;\n  });\n}\n\n/** @param {string} cookieId */\nexport function getCookie(cookieId) {\n  const cookiesStr = document.cookie;\n  const cookiesList = cookiesStr.split(';'); // .map((s) => s.trim().split('='));\n  for (let i = 0; i < cookiesList.length; i++) {\n    const s = cookiesList[i];\n    const [id, val] = s.trim().split('=').map(decodeURIComponent);\n    if (id === cookieId) {\n      return val;\n    }\n  }\n  return undefined;\n}\n\n/**\n * @param {string} id\n * @param {string} val\n * @param {number} maxAgeSecs -- Seconds of expire period\n */\nexport function setCookie(id, val, maxAgeSecs) {\n  const cookieVal = [id, val || ''].map(encodeURIComponent).join('=');\n  const parts = [\n    // prettier-ignore\n    cookieVal,\n  ];\n  if (maxAgeSecs) {\n    parts.push('max-age=' + maxAgeSecs);\n  }\n  const fullCookie = parts.filter(Boolean).join(';');\n  document.cookie = fullCookie;\n}\n"],"names":["domNode","icons","success","error","warn","info","commonNotify","notifyRoot","undefined","timeoutDelay","inited","removeNotify","notifyData","node","handler","classList","remove","clearTimeout","setTimeout","removeChild","_e","showNotify","mode","text","content","this","ensureInit","Error","Array","isArray","map","getErrorText","bind","join","message","String","document","createElement","add","nodeIcon","appendChild","nodeText","innerHTML","window","requestAnimationFrame","removeNotifyHandler","addEventListener","showInfo","showSuccess","showWarn","showError","showDemo","init","createDomNode","rootNode","body","setAttribute","sharedPlayerContainer","sharedPlayerNode","currentTrackPlayer","TRUE","ensureSharedPlayerAudio","sharedPlayer","audio","sharedPlayerLoaded","ensureSharedPlayer","getElementsByTagName","sharedPlayerEnded","_ev","currentTime","dataset","status","sharedPlayerTimeUpdate","ev","timeNode","querySelector","currentTarget","durationFormatted","time","sec","min","hrs","items","Math","floor","val","idx","padStart","shift","filter","Boolean","formatDuration","sharedPlayerPlay","loaded","play","sharedPlayerError","srcElement","src","type","errMsg","console","trackPlayHandler","controlNode","trackPlayer","closest","paused","ended","readyState","isAudioPlaying","pause","stopPreviousPlayer","isPlaying","isWaiting","isLoaded","readyToPlay","source","opts","from","createSharedPlayerSource","load","initTrackPlayerNode","playerNode","trackMediaUrl","querySelectorAll","forEach"],"sourceRoot":""}