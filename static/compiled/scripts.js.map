{"version":3,"file":"scripts.js","mappings":"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","sources":["webpack://march-tales/./src/assets/helpers/CommonHelpers.js","webpack://march-tales/./src/assets/CommonNotify/CommonNotifySingleton.ts","webpack://march-tales/./src/assets/helpers/getJsText.ts","webpack://march-tales/./src/assets/helpers/sendApiRequest.ts","webpack://march-tales/./src/assets/track-blocks/localTrackInfoDb.ts","webpack://march-tales/./src/assets/track-blocks/tracksPlayer.ts","webpack://march-tales/./src/assets/track-blocks/TrackInfo.ts","webpack://march-tales/./src/assets/track-blocks/floatingPlayer.ts"],"sourcesContent":["// @ts-check\n\nexport function NOOP() {}\n\n/** Compare two arrays with scalar (number, string, boolean) values\n * @param {(number | string | boolean)[]} a1\n * @param {(number | string | boolean)[]} a2\n * @return {boolean}\n */\nexport function compareArrays(a1, a2) {\n  if (!a1 || !a1) {\n    return a1 === a2;\n  }\n  if (a1.length !== a2.length) {\n    return false;\n  }\n  // Compare all the items...\n  for (let i = 0; i < a1.length; i++) {\n    if (a1[i] !== a2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/** getErrorText - Return plain text for error.\n * @param {string|Error|string[]|Error[]} error - Error or errors list.\n * @return {string}\n */\nexport function getErrorText(error) {\n  if (!error) {\n    return;\n  }\n  if (Array.isArray(error)) {\n    return error.map(this.getErrorText.bind(this)).join('\\n');\n  }\n  if (error instanceof Error) {\n    error = error.message;\n  } else if (typeof error !== 'string') {\n    // TODO?\n    error = String(error);\n  }\n  return error;\n}\n\n/** quoteHtmlAttr -- quote all invalid characters for html\n * @param {string} str\n * @param {boolean} [preserveCR]\n */\nexport function quoteHtmlAttr(str, preserveCR) {\n  const crValue = preserveCR ? '&#13;' : '\\n';\n  return (\n    String(str) // Forces the conversion to string\n      .replace(/&/g, '&amp;') // This MUST be the 1st replacement\n      .replace(/'/g, '&apos;') // The 4 other predefined entities, required\n      .replace(/\"/g, '&quot;')\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;')\n      // You may add other replacements here for HTML only (but it's not\n      // necessary). Or for XML, only if the named entities are defined in its\n      // DTD.\n      .replace(/\\r\\n/g, crValue) // Must be before the next replacement\n      .replace(/[\\r\\n]/g, crValue)\n  );\n}\n\n/** htmlToElement -- Create dom node instance from html string\n * @param {string} html - Html representing a single element\n * @return {HTMLElement}\n */\nexport function htmlToElement(html) {\n  const template = document.createElement('template');\n  if (Array.isArray(html)) {\n    html = html.join('');\n  }\n  html = html.trim(); // Never return a text node of whitespace as the result\n  template.innerHTML = html;\n  const content = template.content;\n  return /** @type HTMLElement */ (content.firstChild);\n}\n\n/** htmlToElements -- Convert text html representation to HTMLCollection object\n * @param {string|string[]} html\n * @return {HTMLCollection}\n */\nexport function htmlToElements(html) {\n  const template = document.createElement('template');\n  if (Array.isArray(html)) {\n    html = html.join('');\n  }\n  html = html.trim(); // Never return a text node of whitespace as the result\n  template.innerHTML = html;\n  const content = template.content;\n  return content.children;\n}\n\n/** updateNodeContent -- Replace all inner dom node content.\n * @param {Element} node\n * @param {THtmlContent} content\n */\nexport function updateNodeContent(node, content) {\n  if (!node) {\n    throw new Error('Undefined node to update content');\n  }\n  if (typeof content === 'string') {\n    // Replace with string content...\n    node.innerHTML = content;\n  } else if (Array.isArray(content)) {\n    // Replace multiple elements...\n    node.replaceChildren.apply(node, content);\n  } else {\n    // Replace single element...\n    node.replaceChildren(content);\n  }\n}\n\n/** decodeQuery\n * @param {string | string[]} qs\n * @param {string} [sep]\n * @param {string} [eq]\n * @param {any} [options]\n * @returns {{}}\n */\nexport function decodeQuery(qs, sep, eq, options) {\n  sep = sep || '&';\n  eq = eq || '=';\n  /** @type {Record<string, unknown> | unknown[]} */\n  const obj = {};\n  if (typeof qs !== 'string' || qs.length === 0) {\n    return obj;\n  }\n  const regexp = /\\+/g;\n  qs = qs.split(sep);\n  let maxKeys = 1000;\n  if (options && typeof options.maxKeys === 'number') {\n    maxKeys = options.maxKeys;\n  }\n  let len = qs.length;\n  // maxKeys <= 0 means that we should not limit keys count\n  if (maxKeys > 0 && len > maxKeys) {\n    len = maxKeys;\n  }\n  for (let i = 0; i < len; ++i) {\n    const x = qs[i].replace(regexp, '%20'),\n      idx = x.indexOf(eq);\n    let kstr, vstr;\n    if (idx >= 0) {\n      kstr = x.substring(0, idx);\n      vstr = x.substring(idx + 1);\n    } else {\n      kstr = x;\n      vstr = '';\n    }\n    const k = decodeURIComponent(kstr);\n    const v = decodeURIComponent(vstr);\n    const it = obj[k];\n    if (!Object.prototype.hasOwnProperty.call(obj, k)) {\n      obj[k] = v;\n    } else if (Array.isArray(it)) {\n      it.push(v);\n    } else {\n      obj[k] = [it, v];\n    }\n  }\n  return obj;\n}\n\n/** parseQuery -- Parse url query string (in form `?xx=yy&...` or `xx=yy&...`)\n * @param {string} search  - Query string\n * @return {Record<string, string>} query - Query object\n */\nexport function parseQuery(search) {\n  if (!search) {\n    return {};\n  }\n  if (search.indexOf('?') === 0) {\n    search = search.substring(1);\n  }\n  return decodeQuery(search);\n}\n\n/** makeQuery\n * @param {Record<string, string | number | boolean> | {}} params\n * @param {{ addQuestionSymbol?: boolean; useEmptyStrings?: boolean; useUndefinedValues?: boolean }} opts\n * @returns {string}\n */\nexport function makeQuery(params, opts = {}) {\n  let url = Object.entries(params)\n    .map(([id, val]) => {\n      const valStr = String(val);\n      if (val == undefined && !opts.useUndefinedValues) {\n        return undefined;\n      }\n      if (valStr === '' && !opts.useEmptyStrings) {\n        return undefined;\n      }\n      return encodeURI(id) + '=' + encodeURI(String(val == undefined ? '' : val));\n    })\n    .filter(Boolean)\n    .join('&');\n  if (opts.addQuestionSymbol && url) {\n    url = '?' + url;\n  }\n  return url;\n}\n\n/** Dynamically load external script\n * @param {string} url\n * @return {Promise<Event>}\n */\nexport function addScript(url) {\n  return new Promise((resolve, reject) => {\n    // document.write('<script src=\"' + url + '\"></script>');\n    const script = document.createElement('script');\n    script.setAttribute('src', url);\n    script.addEventListener('load', resolve);\n    script.addEventListener('error', (event) => {\n      const {\n        target,\n        // srcElement,\n      } = event;\n      // @ts-ignore\n      const { href, baseURI } = target;\n      const error = new Error(`Cannot load script resurce by url '${url}'`);\n      // eslint-disable-next-line no-console\n      console.error('[CommonHelpers:addScript]', {\n        error,\n        url,\n        href,\n        baseURI,\n        target,\n        event,\n      });\n      // eslint-disable-next-line no-debugger\n      debugger;\n      reject(error);\n    });\n    document.head.appendChild(script);\n  });\n}\n\n/** Dynamically load external css\n * @param {string} url\n * @return {Promise<unknown>}\n */\nexport function addCssStyle(url) {\n  return new Promise((resolve, reject) => {\n    // Try to find exists node...\n    const testNode = document.head.querySelector(\n      'link[href=\"' + url + '\"], link[data-url=\"' + url + '\"]',\n    );\n    if (testNode) {\n      // Style already found!\n      return resolve({ type: 'already-loaded', target: testNode });\n    }\n    // reject(new Error('test')); // DEBUG: Test errors catching\n    const node = document.createElement('link');\n    node.setAttribute('href', url);\n    node.setAttribute('type', 'text/css');\n    node.setAttribute('rel', 'stylesheet');\n    node.setAttribute('data-url', url);\n    node.addEventListener('load', resolve);\n    node.addEventListener('error', (event) => {\n      const {\n        target,\n        // srcElement,\n      } = event;\n      // @ts-ignore\n      const { href, baseURI } = target;\n      const error = new Error(`Cannot load css resurce by url '${url}'`);\n      // eslint-disable-next-line no-console\n      console.error('[CommonHelpers:addCssStyle]', {\n        error,\n        url,\n        href,\n        baseURI,\n        target,\n        event,\n      });\n      // eslint-disable-next-line no-debugger\n      debugger;\n      reject(error);\n    });\n    document.head.appendChild(node);\n  });\n}\n\n/**\n * @param {HTMLSelectElement} node\n * @param {(string|number)[]} values\n */\nexport function setMultipleSelectValues(node, values) {\n  const strValues = values.map(String);\n  const options = Array.from(node.options);\n  options.forEach((item) => {\n    const { value, selected } = item;\n    const isSelected = strValues.includes(value);\n    if (isSelected !== selected) {\n      item.selected = isSelected;\n    }\n  });\n}\n\n/** processMultipleRequestErrors\n * @param {Response[]} resList\n * @return {Error[]}\n */\nexport function processMultipleRequestErrors(resList) {\n  return /** @type {Error[]} */ (\n    resList\n      .map((res) => {\n        if (!res.ok) {\n          return new Error(`Can't load url '${res.url}': ${res.statusText}, ${res.status}`);\n        }\n      })\n      .filter(Boolean)\n  );\n}\n\n/**\n * @param {number} n\n * @param {TNormalizedFloatStrOptions} [opts={}]\n * @returns {string}\n */\nexport function normalizedFloatStr(n, opts = {}) {\n  const {\n    // prettier-ignore\n    fixedPoint = 2,\n    stripFixedZeros = true,\n  } = opts;\n  let str = n.toFixed(fixedPoint);\n  if (stripFixedZeros) {\n    str = str.replace(/\\.*0+$/, '');\n  }\n  return str;\n}\n/**\n * @param {number} size\n * @param {TGetApproxSizeOptions} [opts={}]\n * @returns {[number | string, string]}\n */\nexport function getApproxSize(size, opts = {}) {\n  const { normalize } = opts;\n  const levels = [\n    'B', // Bytes\n    'K', // Kilobytes\n    'M', // Megabytes\n    'G', // Gigabites\n  ];\n  const lastLevel = levels.length - 1;\n  const range = 1024;\n  let level = 0;\n  while (level < lastLevel) {\n    if (size < range) {\n      break;\n    }\n    size /= range;\n    level++;\n  }\n  const currLevelStr = levels[level];\n  /** Result: final number or normalized representation (depends on option's `normalize`)\n   * @type {number | string}\n   */\n  let result = size;\n  if (normalize) {\n    const normalizeOpts = typeof normalize === 'object' ? normalize : undefined;\n    result = normalizedFloatStr(size, normalizeOpts);\n  }\n  return [result, currLevelStr];\n}\n\n/** @param {number} time - Time duration, ms\n * @return {string}\n */\nexport function formatDuration(time) {\n  const sec = time / 1000;\n  const min = sec / 60;\n  const hrs = min / 60;\n  const days = hrs / 24;\n  const srcItems = [\n    // prettier-ignore\n    days,\n    hrs % 24,\n    min % 60,\n    sec % 60,\n  ];\n  const items = srcItems.map(Math.floor).map((val, idx) => {\n    // Not mins and secs and empty...\n    if (idx < 2 && !val) {\n      return undefined;\n    }\n    // Hours, mins, secs...\n    if (idx >= 1) {\n      return String(val).padStart(2, '0');\n    }\n    // Days...\n    if (!idx) {\n      return String(val) + 'd';\n    }\n  });\n  /* console.log('[CommonHelpers:formatDuration]', {\n   *   sec,\n   *   min,\n   *   hrs,\n   *   days,\n   *   items,\n   *   srcItems,\n   *   time,\n   * });\n   */\n  const daysStr = items.shift();\n  return [\n    // prettier-ignore\n    daysStr,\n    items.filter(Boolean).join(':'),\n  ]\n    .filter(Boolean)\n    .join(' ');\n}\n\n/** @param {string} str */\nexport function getAsyncHash(str) {\n  const encoder = new TextEncoder();\n  const buf = encoder.encode(str);\n  return crypto.subtle.digest('SHA-256', buf).then((aryBuf) => {\n    const ary = new Uint8Array(aryBuf);\n    const res = Array.from(ary)\n      .map((x) => x.toString(16).padStart(2, '0'))\n      .join('');\n    return res;\n  });\n}\n\n/** @param {string} cookieId */\nexport function getCookie(cookieId) {\n  const cookiesStr = document.cookie;\n  const cookiesList = cookiesStr.split(';'); // .map((s) => s.trim().split('='));\n  for (let i = 0; i < cookiesList.length; i++) {\n    const s = cookiesList[i];\n    const [id, val] = s.trim().split('=').map(decodeURIComponent);\n    if (id === cookieId) {\n      return val;\n    }\n  }\n  return undefined;\n}\n\n/**\n * @param {string} id\n * @param {string} val\n * @param {number} maxAgeSecs -- Seconds of expire period\n */\nexport function setCookie(id, val, maxAgeSecs) {\n  const cookieVal = [id, val || ''].map(encodeURIComponent).join('=');\n  const parts = [\n    // prettier-ignore\n    cookieVal,\n  ];\n  if (maxAgeSecs) {\n    parts.push('max-age=' + maxAgeSecs);\n  }\n  const fullCookie = parts.filter(Boolean).join(';');\n  document.cookie = fullCookie;\n}\n","import * as CommonHelpers from '../helpers/CommonHelpers';\n\n/** Toast types */\ntype TMode = 'info' | 'error' | 'warn' | 'success';\n\n/** Icon shapes (move to constants?) */\nconst icons: Record<TMode, string> = {\n  success: 'bi-check',\n  error: 'bi-exclamation-triangle-fill',\n  warn: 'bi-bell-fill',\n  info: 'bi-info-lg',\n};\n\nconst iconClassNamePrefix = 'bi';\n\ninterface TNotifyData {\n  node: HTMLDivElement;\n  handler?: TSetTimeout;\n}\n\n// Define module...\nclass CommonNotify {\n  notifyRoot: HTMLDivElement = undefined;\n\n  timeoutDelay = 3000;\n\n  inited = false;\n\n  // Methods...\n\n  removeNotify(notifyData: TNotifyData) {\n    const { node, handler } = notifyData;\n    // Play animation...\n    node.classList.remove('active');\n    if (handler) {\n      clearTimeout(handler);\n      notifyData.handler = undefined;\n    }\n    setTimeout(() => {\n      // ...And remove node (TODO: Check if node still exists in dom tree)...\n      try {\n        this.notifyRoot.removeChild(node);\n      } catch (\n        _e // eslint-disable-line @typescript-eslint/no-unused-vars\n      ) {\n        // NOOP\n      }\n    }, 250); // Value of `var(--common-animation-time)`\n  }\n\n  /** showNotify\n   * @param {'info' | 'error' | 'warn' | 'success'} mode - Message type ('info' is default)\n   * @param {string|Error} text - Message content\n   */\n  showNotify(mode: TMode, text: string | Error) {\n    this.ensureInit();\n    if (!text) {\n      // If only one parameters passed assume it as message with default type\n      text = mode;\n      mode = 'info';\n    }\n    let content: string;\n    if (text instanceof Error) {\n      // Convert error object to the plain text...\n      content = CommonHelpers.getErrorText(text);\n    } else {\n      content = String(text);\n    }\n    // Create node...\n    const node = document.createElement('div');\n    node.classList.add('notify');\n    node.classList.add('notify-' + mode);\n    // Add icon...\n    const nodeIcon = document.createElement('span');\n    nodeIcon.classList.add('icon');\n    nodeIcon.classList.add(iconClassNamePrefix);\n    nodeIcon.classList.add(icons[mode]);\n    node.appendChild(nodeIcon);\n    // Add text...\n    const nodeText = document.createElement('div');\n    nodeText.classList.add('text');\n    nodeText.innerHTML = content;\n    node.appendChild(nodeText);\n    this.notifyRoot.appendChild(node);\n    // Play appearing animation...\n    window.requestAnimationFrame(() => {\n      setTimeout(() => {\n        node.classList.add('active');\n      }, 10);\n    });\n    // Remove node after delay...\n    const notifyData: TNotifyData = { node, handler: undefined };\n    const removeNotifyHandler = this.removeNotify.bind(this, notifyData);\n    notifyData.handler = setTimeout(removeNotifyHandler, this.timeoutDelay);\n    // Stop & restore timer on mouse in and out events...\n    node.addEventListener('mouseenter', () => {\n      // Clear timer...\n      clearTimeout(notifyData.handler);\n    });\n    node.addEventListener('mouseleave', () => {\n      // Resume timer...\n      notifyData.handler = setTimeout(removeNotifyHandler, this.timeoutDelay);\n    });\n    // Click handler...\n    node.addEventListener('click', removeNotifyHandler);\n  }\n\n  // Some shorthands...\n\n  /** @param {string|Error} text - Message content */\n  showInfo(text: string | Error) {\n    this.showNotify('info', text);\n  }\n\n  /** @param {string|Error} text - Message content */\n  showSuccess(text: string | Error) {\n    this.showNotify('success', text);\n  }\n\n  /** @param {string|Error} text - Message content */\n  showWarn(text: string | Error) {\n    this.showNotify('warn', text);\n  }\n\n  /** @param {string|Error} text - Message content */\n  showError(text: string | Error) {\n    this.showNotify('error', text);\n  }\n\n  // Demo...\n\n  showDemo() {\n    // DEBUG: Show sample notifiers...\n    this.showInfo('Info');\n    this.showSuccess('Success');\n    this.showWarn('Warn');\n    this.showError('Error');\n  }\n\n  // Initialization...\n\n  /** Ensure the modal has initiazlized */\n  ensureInit() {\n    this.init();\n  }\n\n  createDomNode() {\n    // TODO: To use bootstrap toasts?\n    const rootNode = document.body;\n    const notifyRoot = document.createElement('div');\n    notifyRoot.classList.add('notify-root');\n    notifyRoot.setAttribute('id', 'notify-root');\n    rootNode.appendChild(notifyRoot);\n    this.notifyRoot = notifyRoot;\n  }\n\n  /** Initialize nodule. */\n  init() {\n    if (!this.inited) {\n      this.createDomNode();\n      this.inited = true;\n    }\n  }\n}\n\n// Create and export singletone\nexport const commonNotify = new CommonNotify();\n\n// commonNotify.init();\n","import { quoteHtmlAttr } from '../helpers/CommonHelpers';\n\nexport function getJsText(id: string) {\n  const textNode = document.body.querySelector('#js-texts #' + id);\n  if (!textNode) {\n    // eslint-disable-next-line no-console\n    console.warn('[getJsText] Can not find js text node for id:', id);\n  }\n  const text = textNode?.innerHTML || id;\n  return quoteHtmlAttr(text).trim();\n}\n","import { getCookie } from '../helpers/CommonHelpers';\nimport * as CommonHelpers from '../helpers/CommonHelpers';\nimport { getJsText } from './getJsText';\n\nexport function sendApiRequest(\n  url: string,\n  method: string = 'GET',\n  requestData: unknown = undefined,\n) {\n  const csrftoken = getCookie('csrftoken');\n  // const sessionId = getCookie('sessionid');\n  // const url = `/api/v1/tracks/${trackId}/toggle-favorite/`;\n  const headers = {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n    'X-CSRFToken': csrftoken,\n    // Credentials: 'include',\n    // Cookie: csrftoken && `csrftoken=${csrftoken}`,\n    // 'X-Session-Token': sessionId, // X-Session-Token\n    // 'Accept-Language': 'ru', // django_language=ru; content-language: ru;\n  };\n  /* console.log('[sendApiRequest] start', {\n   *   url,\n   *   method,\n   *   requestData,\n   *   headers,\n   * });\n   */\n  return fetch(url, {\n    method,\n    headers,\n    credentials: 'include',\n    body: requestData && JSON.stringify(requestData),\n  })\n    .then(async (res) => {\n      const { ok, status, statusText } = res;\n      // TODO: Check is it json?\n      let data: unknown & { detail?: string };\n      try {\n        data = await res.json();\n      } catch (\n        _e // eslint-disable-line @typescript-eslint/no-unused-vars\n      ) {\n        // NOOP\n      }\n      if (!ok || status !== 200) {\n        const errMsg = [getJsText('fetchError') + ' ' + status, data?.detail || statusText]\n          .filter(Boolean)\n          .join(': ');\n        // eslint-disable-next-line no-console\n        console.error('[sendApiRequest]', errMsg, {\n          ok,\n          data,\n          statusText,\n          status,\n          res,\n          url,\n          requestData,\n          method,\n          headers,\n        });\n        debugger; // eslint-disable-line no-debugger\n        throw new Error(errMsg);\n      }\n      /* console.log('[sendApiRequest] Got json', {\n       *   data,\n       *   url,\n       *   requestData,\n       *   method,\n       *   headers,\n       * });\n       */\n      return data as unknown;\n    })\n    .catch((err) => {\n      const errMsg = [getJsText('failedApiRequest'), CommonHelpers.getErrorText(err)]\n        .filter(Boolean)\n        .join(': ');\n      // eslint-disable-next-line no-console\n      console.error('[sendApiRequest]', errMsg, {\n        err,\n        url,\n        requestData,\n        method,\n        headers,\n      });\n      debugger; // eslint-disable-line no-debugger\n      throw new Error(errMsg);\n    });\n}\n","import { TrackInfo, trackInfoFromJsonStr, trackInfoToJsonStr } from './TrackInfo';\n\nclass LocalTrackInfoDb {\n  // End-user api\n\n  updatePlayedCount(id: number, playedCount?: number, now?: number) {\n    try {\n      const _now = now || Date.now();\n      const trackInfo = this.getOrCreate(id);\n      if (isNaN(playedCount)) {\n        trackInfo.playedCount = trackInfo.playedCount ? trackInfo.playedCount + 1 : 1;\n      } else {\n        trackInfo.playedCount = playedCount;\n      }\n      trackInfo.lastPlayed = _now;\n      trackInfo.lastUpdated = _now;\n      this.insert(trackInfo);\n      // this.updateEvents.broadcast(TracksInfoDbUpdate(trackInfo));\n      return trackInfo;\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error('[LocalTrackInfoDb:incrementPlayedCount]', err.message, {\n        err,\n        id,\n      });\n      debugger; // eslint-disable-line no-debugger\n      throw err;\n    }\n  }\n\n  updatePosition(id: number, position: number, now?: number) {\n    try {\n      const _now = now || Date.now();\n      const trackInfo = this.getOrCreate(id);\n      trackInfo.position = position;\n      trackInfo.lastPlayed = _now; // ???\n      trackInfo.lastUpdated = _now;\n      this.insert(trackInfo);\n      // this.updateEvents.broadcast(TracksInfoDbUpdate(trackInfo));\n      return trackInfo;\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error('[LocalTrackInfoDb:updatePosition]', err.message, {\n        err,\n        id,\n      });\n      debugger; // eslint-disable-line no-debugger\n      throw err;\n    }\n  }\n\n  updateFavorite(id: number, favorite: boolean, now?: number) {\n    try {\n      const _now = now || Date.now();\n      const trackInfo = this.getOrCreate(id);\n      trackInfo.favorite = favorite;\n      trackInfo.lastUpdated = _now;\n      this.insert(trackInfo);\n      this._toggleInFavoritesIndex(id, favorite);\n      // this.updateEvents.broadcast(TracksInfoDbUpdate(trackInfo));\n      return trackInfo;\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error('[LocalTrackInfoDb:setFavorite]', err.message, {\n        err,\n        id,\n      });\n      debugger; // eslint-disable-line no-debugger\n      throw err;\n    }\n  }\n\n  updateFavoritesByTrackIds(ids: number[], now?: number) {\n    const _now = now || Date.now();\n    const index = this._getIndex();\n    index.forEach((id) => {\n      const isFavorite = ids.includes(id);\n      const trackInfo = this.getOrCreate(id);\n      if (trackInfo.favorite !== isFavorite) {\n        trackInfo.favorite = isFavorite;\n        trackInfo.lastUpdated = _now;\n        this.insert(trackInfo);\n      }\n    });\n    this._setFavoritesIndex(ids);\n  }\n\n  save(trackInfo: TrackInfo, now?: number) {\n    try {\n      const _now = now || Date.now();\n      trackInfo.lastPlayed = _now; // ???\n      trackInfo.lastUpdated = _now;\n      this.insert(trackInfo);\n      // this.updateEvents.broadcast(TracksInfoDbUpdate(trackInfo));\n      // const testTrackInfo = await this.getById(id);\n      return trackInfo;\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error('[LocalTrackInfoDb:save]', err.message, {\n        err,\n        trackInfo,\n      });\n      debugger; // eslint-disable-line no-debugger\n      throw err;\n    }\n  }\n\n  // Low-level api\n\n  createNewRecord(id: number) {\n    const now = Date.now();\n    const trackInfo: TrackInfo = {\n      id: id, // track.id\n      favorite: false,\n      playedCount: 0, // track.played_count (but only for current user!).\n      position: 0, // position\n      lastUpdated: now, // DateTime.now()\n      lastPlayed: 0, // DateTime.now()\n    };\n    return trackInfo;\n  }\n\n  getOrCreate(id: number) {\n    return this.getById(id) || this.createNewRecord(id);\n  }\n\n  /// Create or update the record. (Returns inserted/updated record id.)\n  insert(trackInfo: TrackInfo) {\n    const { id } = trackInfo;\n    window.localStorage.setItem('trackInfo-' + id, trackInfoToJsonStr(trackInfo));\n    this._addToIndex(id);\n  }\n\n  getFavorites() {\n    return this.getAll().filter((it) => it.favorite);\n  }\n\n  getById(id: number) {\n    const str = window.localStorage.getItem('trackInfo-' + id);\n    if (!str) {\n      return undefined;\n    }\n    return trackInfoFromJsonStr(str);\n  }\n\n  _getFavoritesIndex() {\n    try {\n      const data = window.localStorage.getItem('trackInfoFavoritesIndex');\n      return (data ? JSON.parse(data) : []) as number[];\n    } catch (\n      _ // eslint-disable-line @typescript-eslint/no-unused-vars\n    ) {\n      return [] as number[];\n    }\n  }\n\n  _setFavoritesIndex(favoritesIndex: number[]) {\n    window.localStorage.setItem('trackInfoFavoritesIndex', JSON.stringify(favoritesIndex));\n  }\n\n  _addToFavoritesIndex(id: number) {\n    const favoritesIndex = this._getFavoritesIndex();\n    if (!favoritesIndex.includes(id)) {\n      favoritesIndex.push(id);\n      this._setFavoritesIndex(favoritesIndex);\n    }\n  }\n\n  _removeFromFavoritesIndex(id: number) {\n    const favoritesIndex = this._getFavoritesIndex();\n    if (favoritesIndex.includes(id)) {\n      this._setFavoritesIndex(favoritesIndex.filter((checkId) => id !== checkId));\n    }\n  }\n\n  _toggleInFavoritesIndex(id: number, value?: boolean) {\n    if (value) {\n      this._addToFavoritesIndex(id);\n    } else {\n      this._removeFromFavoritesIndex(id);\n    }\n  }\n\n  _getIndex() {\n    try {\n      const data = window.localStorage.getItem('trackInfoIndex');\n      return (data ? JSON.parse(data) : []) as number[];\n    } catch (\n      _ // eslint-disable-line @typescript-eslint/no-unused-vars\n    ) {\n      return [] as number[];\n    }\n  }\n\n  _setIndex(index: number[]) {\n    window.localStorage.setItem('trackInfoIndex', JSON.stringify(index));\n  }\n\n  _addToIndex(id: number) {\n    const index = this._getIndex();\n    if (!index.includes(id)) {\n      index.push(id);\n      this._setIndex(index);\n    }\n  }\n\n  _removeFromIndex(id: number) {\n    const index = this._getIndex();\n    if (index.includes(id)) {\n      this._setIndex(index.filter((checkId) => id !== checkId));\n    }\n  }\n\n  _toggleInIndex(id: number, value?: boolean) {\n    if (value) {\n      this._addToIndex(id);\n    } else {\n      this._removeFromIndex(id);\n    }\n  }\n\n  getAll() {\n    const index = this._getIndex();\n    const list: TrackInfo[] = index\n      .map((id) => {\n        return this.getById(id);\n      })\n      .filter(Boolean);\n    return list;\n  }\n\n  delete(id: number) {\n    window.localStorage.removeItem('trackInfo-' + id);\n    this._removeFromIndex(id);\n  }\n\n  clearAll() {\n    const index = this._getIndex();\n    index.forEach((id) => {\n      window.localStorage.removeItem('trackInfo-' + id);\n    });\n    this._setIndex([]);\n  }\n}\n\n// Create a singleton\nexport const localTrackInfoDb = new LocalTrackInfoDb();\n","import { formatDuration, quoteHtmlAttr } from '../helpers/CommonHelpers';\nimport { commonNotify } from '../CommonNotify/CommonNotifySingleton';\nimport { sendApiRequest } from '../helpers/sendApiRequest';\nimport { getJsText } from '../helpers/getJsText';\n\nimport { localTrackInfoDb } from './localTrackInfoDb';\nimport { showFloatingPlayer } from './floatingPlayer';\n\nconst sharedPlayerContainer = document.body;\n\nlet allPlayers: NodeListOf<HTMLElement>;\nlet sharedPlayerNode: HTMLElement | undefined = undefined;\nlet currentTrackPlayer: HTMLElement | undefined = undefined;\n\ninterface TSharedPlayerOptions {\n  type?: string;\n  src?: string;\n}\n\n// Values for dataset statuses\nconst TRUE = 'true';\n\nfunction ensureSharedPlayer(/* opts: TSharedPlayerOptions = {} */) {\n  if (!sharedPlayerNode) {\n    sharedPlayerNode = document.createElement('div');\n    sharedPlayerNode.classList.add('shared-player');\n    const audio = document.createElement('audio');\n    audio.addEventListener('loadeddata', sharedPlayerCanPlay);\n    sharedPlayerNode.appendChild(audio);\n    sharedPlayerContainer.appendChild(sharedPlayerNode);\n  }\n  return sharedPlayerNode;\n}\n\nfunction ensureSharedPlayerAudio() {\n  const sharedPlayer = ensureSharedPlayer();\n  const audio = sharedPlayer.getElementsByTagName('audio')[0];\n  if (!audio) {\n    throw new Error(getJsText('noAudioNodeFound'));\n  }\n  return audio;\n}\n\nfunction createSharedPlayerSource(opts: TSharedPlayerOptions = {}) {\n  // const sharedPlayer = ensureSharedPlayer();\n  const audio = ensureSharedPlayerAudio();\n  const prevSources = Array.from(audio.getElementsByTagName('source'));\n  for (const node of prevSources) {\n    node.remove();\n  }\n  audio.setAttribute('preload', 'auto');\n  const source = document.createElement('source');\n  source.setAttribute('type', opts.type || 'audio/mpeg');\n  if (opts.src) {\n    source.setAttribute('src', opts.src);\n  }\n  // @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/loadeddata_event\n  audio.addEventListener('canplay', sharedPlayerCanPlay);\n  audio.addEventListener('loadeddata', sharedPlayerCanPlay);\n  audio.addEventListener('playing', sharedPlayerPlay);\n  audio.addEventListener('timeupdate', sharedPlayerTimeUpdate);\n  audio.addEventListener('ended', sharedPlayerEnded);\n  source.addEventListener('error', sharedPlayerError);\n  audio.appendChild(source);\n  return source;\n}\n\nfunction sharedPlayerEnded(_ev: Event) {\n  if (!currentTrackPlayer) {\n    throw new Error('No current track player node!');\n  }\n  const dataset = currentTrackPlayer?.dataset;\n  if (dataset) {\n    delete dataset.status;\n  }\n  incrementPlayedCount();\n}\n\nfunction updateTrackPosition(trackNode: HTMLElement, position: number, isCurrent?: boolean) {\n  const timeNode = trackNode.querySelector('.time');\n  const { dataset } = trackNode;\n  const { trackId, trackDuration } = dataset;\n  const timeMs = Math.floor(position * 1000);\n  const timeFormatted = formatDuration(timeMs);\n  const id = Number(trackId);\n  const duration = parseFloat(trackDuration.replace(',', '.'));\n  if (!duration) {\n    const error = new Error(`No duration provided for a track: ${id}`);\n    // eslint-disable-next-line no-console\n    console.error('[tracksPlayer:updateTrackPosition]', error.message, {\n      error,\n    });\n    debugger; // eslint-disable-line no-debugger\n  }\n  const ratio = position / duration;\n  const progress = Math.round(ratio * 100);\n  /* console.log('[tracksPlayer:updateTrackPosition]', {\n   *   id,\n   *   position,\n   *   progress,\n   *   ratio,\n   *   duration,\n   *   timeMs,\n   *   timeFormatted,\n   *   timeNode,\n   *   dataset,\n   *   trackNode,\n   *   isCurrent,\n   * });\n   */\n  dataset.position = String(position);\n  dataset.progress = String(progress);\n  trackNode.style.setProperty('--progress', String(progress));\n  if (timeNode) {\n    timeNode.innerHTML = timeFormatted;\n  }\n  localTrackInfoDb.updatePosition(id, position);\n  if (isCurrent) {\n    // TODO: Update the floating player if isCurrent\n  }\n}\n\nfunction updatePlayback(position: number) {\n  if (!currentTrackPlayer) {\n    return;\n  }\n  updateTrackPosition(currentTrackPlayer, position, true);\n}\n\nfunction sharedPlayerTimeUpdate(ev: Event) {\n  if (!currentTrackPlayer) {\n    return;\n  }\n  const audio = ev.currentTarget as HTMLAudioElement;\n  const { currentTime } = audio;\n  const dataset = currentTrackPlayer.dataset;\n  const loaded = Boolean(dataset.loaded);\n  if (loaded) {\n    /* // DEBUG\n     * const { type, eventPhase } = ev;\n     * const position = Number(dataset.position || '');\n     * const readyState = audio.readyState;\n     * console.log('[tracksPlayer:sharedPlayerTimeUpdate]', {\n     *   readyState,\n     *   position,\n     *   loaded,\n     *   currentTime,\n     *   audio,\n     *   type,\n     *   eventPhase,\n     *   ev,\n     *   dataset,\n     * });\n     */\n    updatePlayback(currentTime);\n  }\n}\n\nfunction sharedPlayerPlay(_ev: Event) {\n  if (!currentTrackPlayer) {\n    throw new Error('No current track player node!');\n  }\n  const { dataset } = currentTrackPlayer;\n  dataset.status = 'playing';\n  showFloatingPlayer(currentTrackPlayer);\n}\n\nfunction updateAudioPosition(trackNode: HTMLElement, isCurrent: boolean = true) {\n  const audio = ensureSharedPlayerAudio();\n  const dataset = trackNode.dataset;\n  const duration = parseFloat(dataset.trackDuration.replace(',', '.'));\n  let position = Number(dataset.position || '');\n  /* console.log('[tracksPlayer:updateAudioPosition]', {\n   *   readyState: audio.readyState,\n   *   currentTime: audio.currentTime,\n   *   position,\n   *   duration,\n   *   dataset,\n   *   audio,\n   *   // source,\n   * });\n   */\n  if (/* !audio.seekable || */ position >= duration - 0.1) {\n    position = 0;\n    updateTrackPosition(trackNode, position, isCurrent);\n    dataset.position = '0';\n    dataset.progress = '0';\n    audio.currentTime = 0;\n  } else {\n    audio.currentTime = position;\n  }\n}\n\nfunction audioPlay(trackNode: HTMLElement, isCurrent: boolean = true) {\n  const audio = ensureSharedPlayerAudio();\n  /* // DEBUG\n   * const dataset = trackNode.dataset;\n   * dataset.status = 'playing';\n   * const duration = parseFloat(dataset.trackDuration.replace(',', '.'));\n   * const position = Number(dataset.position || '');\n   * console.log('[tracksPlayer:audioPlay]', {\n   *   duration,\n   *   position,\n   *   dataset,\n   *   audio,\n   *   // source,\n   * });\n   */\n  updateAudioPosition(trackNode, isCurrent);\n  audio.play();\n}\n\nfunction sharedPlayerCanPlay(_ev: Event) {\n  if (!currentTrackPlayer) {\n    throw new Error('No current track player node!');\n  }\n  const dataset = currentTrackPlayer.dataset;\n  const isLoaded = !!dataset.loaded;\n  if (!isLoaded) {\n    dataset.loaded = TRUE;\n    delete dataset.error;\n    /* // DEBUG\n     * const audio = ensureSharedPlayerAudio();\n     * const readyState = audio.readyState;\n     * console.log('[tracksPlayer:sharedPlayerCanPlay]', {\n     *   readyState,\n     *   currentTime: audio.currentTime,\n     *   dataset,\n     *   audio,\n     * });\n     */\n    // Start playback if all is ok...\n    audioPlay(currentTrackPlayer, true);\n  }\n}\n\nfunction sharedPlayerError(ev: Event) {\n  const srcElement = ev.currentTarget as HTMLSourceElement;\n  const { src, type } = srcElement;\n  const errMsg = getJsText('errorLoadingAudioFile') + ' ' + src;\n  const error = new Error(errMsg);\n  // eslint-disable-next-line no-console\n  console.error('[sharedPlayerError]', errMsg, {\n    error,\n    currentTrackPlayer,\n    src,\n    type,\n    ev,\n  });\n  debugger; // eslint-disable-line no-debugger\n  commonNotify.showError(errMsg);\n  const dataset = currentTrackPlayer?.dataset;\n  if (dataset) {\n    dataset.error = errMsg;\n    delete dataset.loaded;\n    delete dataset.status;\n  }\n}\n\nfunction isAudioPlaying(audio: HTMLAudioElement) {\n  return !!audio && audio.currentTime > 0 && !audio.paused && !audio.ended && audio.readyState > 2;\n}\n\nfunction stopPreviousPlayer() {\n  if (sharedPlayerNode) {\n    const audio = sharedPlayerNode.getElementsByTagName('audio')[0];\n    if (audio && isAudioPlaying(audio)) {\n      audio.pause();\n    }\n  }\n  if (currentTrackPlayer) {\n    currentTrackPlayer.classList.toggle('current', false);\n    const { dataset } = currentTrackPlayer;\n    delete dataset.status;\n    delete dataset.loaded;\n    delete dataset.error;\n  }\n}\n\nfunction sendIncrementPlayedCount() {\n  const { dataset } = currentTrackPlayer;\n  const { trackId } = dataset;\n  const url = `/api/v1/tracks/${trackId}/increment-played-count/`;\n  return sendApiRequest(url, 'POST');\n}\n\nfunction updateTrackPlayedCount(trackNode: HTMLElement, playedCount?: number, isCurrent?: boolean) {\n  const { dataset } = trackNode;\n  const { trackId } = dataset;\n  const id = Number(trackId);\n  if (!id) {\n    throw new Error('No current track id!');\n  }\n  const updatedTrackInfo = localTrackInfoDb.updatePlayedCount(id, playedCount);\n  const { playedCount: updatedPlayedCount } = updatedTrackInfo;\n  const strValue = quoteHtmlAttr(String(updatedPlayedCount));\n  const valueNode = trackNode.querySelector('#played_count') as HTMLElement;\n  // Update counter in the document...\n  if (valueNode) {\n    valueNode.innerText = strValue;\n    // ???\n    const parent = valueNode.closest('.track-played-count[data-played-count]') as HTMLElement;\n    if (parent) {\n      parent.dataset.playedCount = strValue;\n    }\n  }\n  if (isCurrent) {\n    // TODO: Update value in the floating player\n  }\n}\n\nfunction incrementPlayedCount() {\n  if (!currentTrackPlayer) {\n    throw new Error('No current track player node!');\n  }\n  const trackNode = currentTrackPlayer;\n  const { dataset } = trackNode;\n  if (dataset.incrementing) {\n    return;\n  }\n  dataset.incrementing = TRUE;\n  updateTrackPlayedCount(trackNode, undefined, true);\n  if (!window.isAuthenticated) {\n    delete dataset.incrementing;\n    return;\n  }\n  return sendIncrementPlayedCount()\n    .then(({ played_count }: { played_count?: number }) => {\n      if (played_count != null) {\n        // Re-update local data with server data...\n        updateTrackPlayedCount(trackNode, played_count, true);\n      }\n      // TODO: Update other instances of this track on the page (eg, in player, or in other track listings)?\n    })\n    .catch((err) => {\n      // eslint-disable-next-line no-console\n      console.error('[tracksPlayer:incrementPlayedCount:sendIncrementPlayedCount] error', {\n        err,\n      });\n      debugger; // eslint-disable-line no-debugger\n      commonNotify.showError(err);\n      throw err;\n    })\n    .finally(() => {\n      delete dataset.incrementing;\n    });\n}\n\nfunction startPlay() {\n  if (!currentTrackPlayer) {\n    throw new Error('No current track player node!');\n  }\n  const { dataset } = currentTrackPlayer;\n  const isLoaded = !!dataset.loaded;\n  const audio = ensureSharedPlayerAudio();\n  if (!isLoaded) {\n    dataset.status = 'waiting';\n    delete dataset.loaded;\n    delete dataset.error;\n    const { trackMediaUrl } = dataset;\n    const source = createSharedPlayerSource({ src: trackMediaUrl });\n    if (!source) {\n      throw new Error(getJsText('noAudioSourceNodeFound'));\n    }\n    updateAudioPosition(currentTrackPlayer, true);\n    // see `sharedPlayerLoaded`, `sharedPlayerCanPlay` handlers\n    audio.load();\n  } else {\n    audioPlay(currentTrackPlayer, true);\n  }\n}\n\n/** Play button click handler */\nfunction trackPlayHandler(ev: MouseEvent) {\n  const controlNode = ev.currentTarget as HTMLElement;\n  const trackNode = controlNode.closest('.track-player') as HTMLElement;\n  if (currentTrackPlayer && currentTrackPlayer !== trackNode) {\n    stopPreviousPlayer();\n  }\n  const { dataset } = trackNode;\n  const isPlaying = dataset.status === 'playing';\n  const isWaiting = dataset.status === 'waiting';\n  const readyToPlay = !isWaiting && !isPlaying;\n  const audio = ensureSharedPlayerAudio();\n  if (isPlaying) {\n    // Pause if playing...\n    audio.pause();\n    dataset.status = 'paused';\n  } else if (readyToPlay) {\n    currentTrackPlayer = trackNode;\n    window.localStorage.setItem('currentTrackId', String(dataset.trackId));\n    trackNode.classList.toggle('current', true);\n    startPlay();\n  }\n}\n\nfunction sendToggleFavoriteRequest(trackId: number | string, value: boolean) {\n  const url = `/api/v1/tracks/${trackId}/toggle-favorite/`;\n  return sendApiRequest(url, 'POST', { value });\n}\n\nfunction updateTrackFavorite(trackNode: HTMLElement, isFavorite: boolean) {\n  const { dataset } = trackNode;\n  const { favorite } = dataset;\n  const isCurrentFavorite = Boolean(favorite);\n  if (isFavorite !== isCurrentFavorite) {\n    if (isFavorite) {\n      dataset.favorite = TRUE;\n    } else {\n      delete dataset.favorite;\n    }\n  }\n}\n\nfunction updateFavoritesByTrackIds(ids: number[]) {\n  localTrackInfoDb.updateFavoritesByTrackIds(ids);\n  allPlayers.forEach((trackNode) => {\n    const { dataset } = trackNode;\n    const { trackId } = dataset;\n    const id = Number(trackId);\n    const isFavorite = ids.includes(id);\n    updateTrackFavorite(trackNode, isFavorite);\n  });\n}\n\nfunction toggleFavorite(ev: Event) {\n  const node = ev.currentTarget as HTMLElement;\n  const trackNode = node.closest<HTMLElement>('.track-player');\n  const { dataset } = trackNode;\n  const { trackId, favorite } = dataset;\n  const id = Number(trackId);\n  if (!id) {\n    throw new Error('No current track id!');\n  }\n  const nextFavorite = !favorite;\n  localTrackInfoDb.updateFavorite(id, nextFavorite);\n  if (nextFavorite) {\n    dataset.favorite = TRUE;\n  } else {\n    delete dataset.favorite;\n  }\n  if (window.isAuthenticated) {\n    sendToggleFavoriteRequest(trackId, nextFavorite)\n      .then((results: { favorite_track_ids: number[] }) => {\n        const { favorite_track_ids } = results;\n        /* console.log('[trackControls:toggleFavorite]', {\n         *   favorite_track_ids,\n         * });\n         */\n        updateFavoritesByTrackIds(favorite_track_ids);\n        const msgId = nextFavorite ? 'trackAddedToFavorites' : 'trackRemovedFromFavorites';\n        commonNotify.showSuccess(getJsText(msgId));\n      })\n      .catch((err) => {\n        // eslint-disable-next-line no-console\n        console.error('[tracksPlayer:toggleFavorite:sendToggleFavoriteRequest] error', {\n          err,\n        });\n        debugger; // eslint-disable-line no-debugger\n        commonNotify.showError(err);\n      });\n  }\n}\n\nfunction initTrackPlayerNode(trackNode: HTMLElement) {\n  const currentTrackId = Number(window.localStorage.getItem('currentTrackId') || '');\n  const { dataset } = trackNode;\n  const {\n    inited,\n    trackId, // \"1\"\n    trackMediaUrl, // \"/media/samples/gr-400x225.jpg\"\n  } = dataset;\n  const id = Number(trackId || '');\n  if (!id || inited || !trackMediaUrl) {\n    return;\n  }\n  const isCurrent = id === currentTrackId;\n  const trackInfo = localTrackInfoDb.getById(id);\n  /* console.log('[tracksPlayer:initTrackPlayerNode]', {\n   *   id,\n   *   position,\n   *   trackInfo,\n   *   isCurrent,\n   *   currentTrackId,\n   *   trackNode,\n   * });\n   */\n  if (trackInfo) {\n    if (trackInfo.position) {\n      updateTrackPosition(trackNode, trackInfo.position, isCurrent);\n    }\n    if (!window.isAuthenticated) {\n      if (trackInfo?.favorite) {\n        updateTrackFavorite(trackNode, trackInfo.favorite);\n      }\n    }\n  }\n  if (isCurrent) {\n    currentTrackPlayer = trackNode;\n    trackNode.classList.toggle('current', true);\n    dataset.status = 'paused';\n  }\n  const controls = trackNode.querySelectorAll<HTMLElement>('.track-control');\n  controls.forEach((node) => {\n    const { dataset } = node;\n    const { inited, controlId } = dataset;\n    if (inited) {\n      return;\n    }\n    if (controlId === 'toggleFavorite') {\n      node.addEventListener('click', toggleFavorite);\n    }\n    if (controlId === 'play') {\n      node.addEventListener('click', trackPlayHandler);\n    }\n    dataset.inited = TRUE;\n  });\n  dataset.inited = TRUE;\n}\n\nexport function initTracksPlayerWrapper(domNode: HTMLElement = document.body) {\n  allPlayers = domNode.querySelectorAll<HTMLElement>('.track-player[data-track-media-url]');\n  allPlayers.forEach(initTrackPlayerNode);\n}\n","export interface TrackInfo {\n  id: number; // track.id\n  favorite: boolean;\n  playedCount: number; // track.played_count (but only for current user!).\n  position: number; // position?.inMilliseconds ?? 0\n  lastUpdated: number; // DateTime.now().millisecondsSinceEpoch <-> DateTime.fromMillisecondsSinceEpoch(ms)\n  lastPlayed: number; // DateTime.now().millisecondsSinceEpoch <-> DateTime.fromMillisecondsSinceEpoch(ms)\n}\n\nexport function trackInfoFromJsonStr(str: string) {\n  if (!str) {\n    return undefined;\n  }\n  const list: (boolean | number)[] = JSON.parse(str);\n  const [id, favorite, playedCount, position, lastUpdated, lastPlayed] = list;\n  const trackInfo: TrackInfo = {\n    id,\n    favorite: Boolean(favorite),\n    playedCount,\n    position,\n    lastUpdated,\n    lastPlayed,\n  } as TrackInfo;\n  return trackInfo;\n}\n\nexport function trackInfoToJsonStr(trackInfo: TrackInfo) {\n  const { id, favorite, playedCount, position, lastUpdated, lastPlayed } = trackInfo;\n  const list = [id, Number(favorite), playedCount, position, lastUpdated, lastPlayed];\n  return JSON.stringify(list);\n}\n","export function showFloatingPlayer(trackNode: HTMLElement) {\n  const { dataset } = trackNode;\n  const { trackDuration, trackId } = dataset;\n  const id = Number(trackId);\n  const duration = parseFloat(trackDuration.replace(',', '.'));\n  const imgNode = trackNode.querySelector<HTMLImageElement>('img.card-img');\n  const imgUrl = imgNode?.getAttribute('src');\n  const titleNode = trackNode.querySelector<HTMLElement>('.post-title');\n  const title = titleNode?.innerHTML;\n  const link = titleNode?.getAttribute('href');\n  console.log('[floatingPlayer:initFloatingPlayer]', {\n    id, // 6\n    duration, // 17.972245\n    imgUrl, // \"/media/samples/Тест_кириллицы.png\"\n    link, // \"/tracks/6\"\n    trackNode, // article.big-tracks-list-item.card.no-bg.mb-4.track-player.current\n    title, // \"Новый трек\"\n    // trackNode,\n    // dataset,\n  });\n  // TODO: Store in the local storage the last status (playing, paused etc) and last activity time\n  document.body.classList.toggle('withPlayer', true);\n}\n\nexport function initFloatingPlayer() {\n  // console.log('[floatingPlayer:initFloatingPlayer]');\n}\n"],"names":["getErrorText","error","Array","isArray","map","this","bind","join","Error","message","String","quoteHtmlAttr","str","preserveCR","crValue","replace","icons","success","warn","info","commonNotify","notifyRoot","undefined","timeoutDelay","inited","removeNotify","notifyData","node","handler","classList","remove","clearTimeout","setTimeout","removeChild","_e","showNotify","mode","text","content","ensureInit","document","createElement","add","nodeIcon","appendChild","nodeText","innerHTML","window","requestAnimationFrame","removeNotifyHandler","addEventListener","showInfo","showSuccess","showWarn","showError","showDemo","init","createDomNode","rootNode","body","setAttribute","getJsText","id","textNode","querySelector","console","trim","sendApiRequest","url","method","requestData","headers","Accept","cookieId","cookiesList","cookie","split","i","length","s","val","decodeURIComponent","getCookie","fetch","credentials","JSON","stringify","then","res","ok","status","statusText","json","data","errMsg","detail","filter","Boolean","catch","err","allPlayers","domNode","localTrackInfoDb","updatePlayedCount","playedCount","now","_now","Date","trackInfo","getOrCreate","isNaN","lastPlayed","lastUpdated","insert","updatePosition","position","updateFavorite","favorite","_toggleInFavoritesIndex","updateFavoritesByTrackIds","ids","_getIndex","forEach","isFavorite","includes","_setFavoritesIndex","save","createNewRecord","getById","localStorage","setItem","list","Number","trackInfoToJsonStr","_addToIndex","getFavorites","getAll","it","getItem","parse","trackInfoFromJsonStr","_getFavoritesIndex","_","favoritesIndex","_addToFavoritesIndex","push","_removeFromFavoritesIndex","checkId","value","_setIndex","index","_removeFromIndex","_toggleInIndex","delete","removeItem","clearAll","sharedPlayerContainer","sharedPlayerNode","currentTrackPlayer","TRUE","ensureSharedPlayerAudio","sharedPlayer","audio","sharedPlayerCanPlay","ensureSharedPlayer","getElementsByTagName","sharedPlayerEnded","_ev","dataset","trackNode","incrementing","updateTrackPlayedCount","isAuthenticated","trackId","sendIncrementPlayedCount","played_count","finally","incrementPlayedCount","updateTrackPosition","isCurrent","timeNode","trackDuration","timeFormatted","time","sec","min","hrs","items","Math","floor","idx","padStart","shift","formatDuration","duration","parseFloat","ratio","progress","round","style","setProperty","sharedPlayerTimeUpdate","ev","currentTime","currentTarget","loaded","sharedPlayerPlay","imgNode","imgUrl","getAttribute","titleNode","title","link","log","toggle","showFloatingPlayer","updateAudioPosition","audioPlay","play","sharedPlayerError","srcElement","src","type","updatedPlayedCount","strValue","valueNode","innerText","closest","startPlay","isLoaded","source","opts","from","createSharedPlayerSource","load","trackPlayHandler","paused","ended","readyState","isAudioPlaying","pause","stopPreviousPlayer","isPlaying","readyToPlay","updateTrackFavorite","toggleFavorite","nextFavorite","sendToggleFavoriteRequest","results","favorite_track_ids","msgId","initTrackPlayerNode","currentTrackId","trackMediaUrl","querySelectorAll","controlId"],"sourceRoot":""}