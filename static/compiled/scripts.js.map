{"version":3,"file":"scripts.js","mappings":"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","sources":["webpack://march-tales/./src/assets/helpers/CommonHelpers.js","webpack://march-tales/./src/assets/track-blocks/localTrackInfoDb.ts","webpack://march-tales/./src/assets/track-blocks/TrackInfo.ts","webpack://march-tales/./src/assets/helpers/getJsText.ts","webpack://march-tales/./src/assets/CommonNotify/CommonNotifySingleton.ts","webpack://march-tales/./src/assets/entities/ActivePlayerData/ActivePlayerData.ts","webpack://march-tales/./src/assets/helpers/sendApiRequest.ts","webpack://march-tales/./src/assets/helpers/floatToStr.ts","webpack://march-tales/./src/assets/entities/FloatingPlayer/FloatingPlayerState.ts","webpack://march-tales/./src/assets/entities/FloatingPlayer/HiddenPlayer.ts","webpack://march-tales/./src/assets/track-blocks/tracksPlayer.ts","webpack://march-tales/./src/assets/entities/FloatingPlayer/FloatingPlayerCallbacks.ts","webpack://march-tales/./src/assets/entities/FloatingPlayer/FloatingPlayerClass.ts","webpack://march-tales/./src/assets/entities/ActivePlayerData/getActivePlayerDataFromTrackNode.ts","webpack://march-tales/./src/assets/entities/FloatingPlayer/floatingPlayer.ts"],"sourcesContent":["// @ts-check\n\nexport function NOOP() {}\n\n/** Compare two arrays with scalar (number, string, boolean) values\n * @param {(number | string | boolean)[]} a1\n * @param {(number | string | boolean)[]} a2\n * @return {boolean}\n */\nexport function compareArrays(a1, a2) {\n  if (!a1 || !a1) {\n    return a1 === a2;\n  }\n  if (a1.length !== a2.length) {\n    return false;\n  }\n  // Compare all the items...\n  for (let i = 0; i < a1.length; i++) {\n    if (a1[i] !== a2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/** getErrorText - Return plain text for error.\n * @param {string|Error|string[]|Error[]} error - Error or errors list.\n * @return {string}\n */\nexport function getErrorText(error) {\n  if (!error) {\n    return;\n  }\n  if (Array.isArray(error)) {\n    return error.map(this.getErrorText.bind(this)).join('\\n');\n  }\n  if (error instanceof Error) {\n    error = error.message;\n  } else if (typeof error !== 'string') {\n    // TODO?\n    error = String(error);\n  }\n  return error;\n}\n\n/** quoteHtmlAttr -- quote all invalid characters for html\n * @param {string} str\n * @param {boolean} [preserveCR]\n */\nexport function quoteHtmlAttr(str, preserveCR) {\n  const crValue = preserveCR ? '&#13;' : '\\n';\n  return (\n    String(str) // Forces the conversion to string\n      .replace(/&/g, '&amp;') // This MUST be the 1st replacement\n      .replace(/'/g, '&apos;') // The 4 other predefined entities, required\n      .replace(/\"/g, '&quot;')\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;')\n      // You may add other replacements here for HTML only (but it's not\n      // necessary). Or for XML, only if the named entities are defined in its\n      // DTD.\n      .replace(/\\r\\n/g, crValue) // Must be before the next replacement\n      .replace(/[\\r\\n]/g, crValue)\n  );\n}\n\n/** htmlToElement -- Create dom node instance from html string\n * @param {string} html - Html representing a single element\n * @return {HTMLElement}\n */\nexport function htmlToElement(html) {\n  const template = document.createElement('template');\n  if (Array.isArray(html)) {\n    html = html.join('');\n  }\n  html = html.trim(); // Never return a text node of whitespace as the result\n  template.innerHTML = html;\n  const content = template.content;\n  return /** @type HTMLElement */ (content.firstChild);\n}\n\n/** htmlToElements -- Convert text html representation to HTMLCollection object\n * @param {string|string[]} html\n * @return {HTMLCollection}\n */\nexport function htmlToElements(html) {\n  const template = document.createElement('template');\n  if (Array.isArray(html)) {\n    html = html.join('');\n  }\n  html = html.trim(); // Never return a text node of whitespace as the result\n  template.innerHTML = html;\n  const content = template.content;\n  return content.children;\n}\n\n/** updateNodeContent -- Replace all inner dom node content.\n * @param {Element} node\n * @param {THtmlContent} content\n */\nexport function updateNodeContent(node, content) {\n  if (!node) {\n    throw new Error('Undefined node to update content');\n  }\n  if (typeof content === 'string') {\n    // Replace with string content...\n    node.innerHTML = content;\n  } else if (Array.isArray(content)) {\n    // Replace multiple elements...\n    node.replaceChildren.apply(node, content);\n  } else {\n    // Replace single element...\n    node.replaceChildren(content);\n  }\n}\n\n/** decodeQuery\n * @param {string | string[]} qs\n * @param {string} [sep]\n * @param {string} [eq]\n * @param {any} [options]\n * @returns {{}}\n */\nexport function decodeQuery(qs, sep, eq, options) {\n  sep = sep || '&';\n  eq = eq || '=';\n  /** @type {Record<string, unknown> | unknown[]} */\n  const obj = {};\n  if (typeof qs !== 'string' || qs.length === 0) {\n    return obj;\n  }\n  const regexp = /\\+/g;\n  qs = qs.split(sep);\n  let maxKeys = 1000;\n  if (options && typeof options.maxKeys === 'number') {\n    maxKeys = options.maxKeys;\n  }\n  let len = qs.length;\n  // maxKeys <= 0 means that we should not limit keys count\n  if (maxKeys > 0 && len > maxKeys) {\n    len = maxKeys;\n  }\n  for (let i = 0; i < len; ++i) {\n    const x = qs[i].replace(regexp, '%20'),\n      idx = x.indexOf(eq);\n    let kstr, vstr;\n    if (idx >= 0) {\n      kstr = x.substring(0, idx);\n      vstr = x.substring(idx + 1);\n    } else {\n      kstr = x;\n      vstr = '';\n    }\n    const k = decodeURIComponent(kstr);\n    const v = decodeURIComponent(vstr);\n    const it = obj[k];\n    if (!Object.prototype.hasOwnProperty.call(obj, k)) {\n      obj[k] = v;\n    } else if (Array.isArray(it)) {\n      it.push(v);\n    } else {\n      obj[k] = [it, v];\n    }\n  }\n  return obj;\n}\n\n/** parseQuery -- Parse url query string (in form `?xx=yy&...` or `xx=yy&...`)\n * @param {string} search  - Query string\n * @return {Record<string, string>} query - Query object\n */\nexport function parseQuery(search) {\n  if (!search) {\n    return {};\n  }\n  if (search.indexOf('?') === 0) {\n    search = search.substring(1);\n  }\n  return decodeQuery(search);\n}\n\n/** makeQuery\n * @param {Record<string, string | number | boolean> | {}} params\n * @param {{ addQuestionSymbol?: boolean; useEmptyStrings?: boolean; useUndefinedValues?: boolean }} opts\n * @returns {string}\n */\nexport function makeQuery(params, opts = {}) {\n  let url = Object.entries(params)\n    .map(([id, val]) => {\n      const valStr = String(val);\n      if (val == undefined && !opts.useUndefinedValues) {\n        return undefined;\n      }\n      if (valStr === '' && !opts.useEmptyStrings) {\n        return undefined;\n      }\n      return encodeURI(id) + '=' + encodeURI(String(val == undefined ? '' : val));\n    })\n    .filter(Boolean)\n    .join('&');\n  if (opts.addQuestionSymbol && url) {\n    url = '?' + url;\n  }\n  return url;\n}\n\n/** Dynamically load external script\n * @param {string} url\n * @return {Promise<Event>}\n */\nexport function addScript(url) {\n  return new Promise((resolve, reject) => {\n    // document.write('<script src=\"' + url + '\"></script>');\n    const script = document.createElement('script');\n    script.setAttribute('src', url);\n    script.addEventListener('load', resolve);\n    script.addEventListener('error', (event) => {\n      const {\n        target,\n        // srcElement,\n      } = event;\n      // @ts-ignore\n      const { href, baseURI } = target;\n      const error = new Error(`Cannot load script resurce by url '${url}'`);\n      // eslint-disable-next-line no-console\n      console.error('[CommonHelpers:addScript]', {\n        error,\n        url,\n        href,\n        baseURI,\n        target,\n        event,\n      });\n      // eslint-disable-next-line no-debugger\n      debugger;\n      reject(error);\n    });\n    document.head.appendChild(script);\n  });\n}\n\n/** Dynamically load external css\n * @param {string} url\n * @return {Promise<unknown>}\n */\nexport function addCssStyle(url) {\n  return new Promise((resolve, reject) => {\n    // Try to find exists node...\n    const testNode = document.head.querySelector(\n      'link[href=\"' + url + '\"], link[data-url=\"' + url + '\"]',\n    );\n    if (testNode) {\n      // Style already found!\n      return resolve({ type: 'already-loaded', target: testNode });\n    }\n    // reject(new Error('test')); // DEBUG: Test errors catching\n    const node = document.createElement('link');\n    node.setAttribute('href', url);\n    node.setAttribute('type', 'text/css');\n    node.setAttribute('rel', 'stylesheet');\n    node.setAttribute('data-url', url);\n    node.addEventListener('load', resolve);\n    node.addEventListener('error', (event) => {\n      const {\n        target,\n        // srcElement,\n      } = event;\n      // @ts-ignore\n      const { href, baseURI } = target;\n      const error = new Error(`Cannot load css resurce by url '${url}'`);\n      // eslint-disable-next-line no-console\n      console.error('[CommonHelpers:addCssStyle]', {\n        error,\n        url,\n        href,\n        baseURI,\n        target,\n        event,\n      });\n      // eslint-disable-next-line no-debugger\n      debugger;\n      reject(error);\n    });\n    document.head.appendChild(node);\n  });\n}\n\n/**\n * @param {HTMLSelectElement} node\n * @param {(string|number)[]} values\n */\nexport function setMultipleSelectValues(node, values) {\n  const strValues = values.map(String);\n  const options = Array.from(node.options);\n  options.forEach((item) => {\n    const { value, selected } = item;\n    const isSelected = strValues.includes(value);\n    if (isSelected !== selected) {\n      item.selected = isSelected;\n    }\n  });\n}\n\n/** processMultipleRequestErrors\n * @param {Response[]} resList\n * @return {Error[]}\n */\nexport function processMultipleRequestErrors(resList) {\n  return /** @type {Error[]} */ (\n    resList\n      .map((res) => {\n        if (!res.ok) {\n          return new Error(`Can't load url '${res.url}': ${res.statusText}, ${res.status}`);\n        }\n      })\n      .filter(Boolean)\n  );\n}\n\n/**\n * @param {number} n\n * @param {TNormalizedFloatStrOptions} [opts={}]\n * @returns {string}\n */\nexport function normalizedFloatStr(n, opts = {}) {\n  const {\n    // prettier-ignore\n    fixedPoint = 2,\n    stripFixedZeros = true,\n  } = opts;\n  let str = n.toFixed(fixedPoint);\n  if (stripFixedZeros) {\n    str = str.replace(/\\.*0+$/, '');\n  }\n  return str;\n}\n/**\n * @param {number} size\n * @param {TGetApproxSizeOptions} [opts={}]\n * @returns {[number | string, string]}\n */\nexport function getApproxSize(size, opts = {}) {\n  const { normalize } = opts;\n  const levels = [\n    'B', // Bytes\n    'K', // Kilobytes\n    'M', // Megabytes\n    'G', // Gigabites\n  ];\n  const lastLevel = levels.length - 1;\n  const range = 1024;\n  let level = 0;\n  while (level < lastLevel) {\n    if (size < range) {\n      break;\n    }\n    size /= range;\n    level++;\n  }\n  const currLevelStr = levels[level];\n  /** Result: final number or normalized representation (depends on option's `normalize`)\n   * @type {number | string}\n   */\n  let result = size;\n  if (normalize) {\n    const normalizeOpts = typeof normalize === 'object' ? normalize : undefined;\n    result = normalizedFloatStr(size, normalizeOpts);\n  }\n  return [result, currLevelStr];\n}\n\n/** @param {number} time - Time duration, ms\n * @return {string}\n */\nexport function formatDuration(time) {\n  const sec = time / 1000;\n  const min = sec / 60;\n  const hrs = min / 60;\n  const days = hrs / 24;\n  const srcItems = [\n    // prettier-ignore\n    days,\n    hrs % 24,\n    min % 60,\n    sec % 60,\n  ];\n  const items = srcItems.map(Math.floor).map((val, idx) => {\n    // Not mins and secs and empty...\n    if (idx < 2 && !val) {\n      return undefined;\n    }\n    // Hours, mins, secs...\n    if (idx >= 1) {\n      return String(val).padStart(2, '0');\n    }\n    // Days...\n    if (!idx) {\n      return String(val) + 'd';\n    }\n  });\n  /* console.log('[CommonHelpers:formatDuration]', {\n   *   sec,\n   *   min,\n   *   hrs,\n   *   days,\n   *   items,\n   *   srcItems,\n   *   time,\n   * });\n   */\n  const daysStr = items.shift();\n  return [\n    // prettier-ignore\n    daysStr,\n    items.filter(Boolean).join(':'),\n  ]\n    .filter(Boolean)\n    .join(' ');\n}\n\n/** @param {string} str */\nexport function getAsyncHash(str) {\n  const encoder = new TextEncoder();\n  const buf = encoder.encode(str);\n  return crypto.subtle.digest('SHA-256', buf).then((aryBuf) => {\n    const ary = new Uint8Array(aryBuf);\n    const res = Array.from(ary)\n      .map((x) => x.toString(16).padStart(2, '0'))\n      .join('');\n    return res;\n  });\n}\n\n/** @param {string} cookieId */\nexport function getCookie(cookieId) {\n  const cookiesStr = document.cookie;\n  const cookiesList = cookiesStr.split(';'); // .map((s) => s.trim().split('='));\n  for (let i = 0; i < cookiesList.length; i++) {\n    const s = cookiesList[i];\n    const [id, val] = s.trim().split('=').map(decodeURIComponent);\n    if (id === cookieId) {\n      return val;\n    }\n  }\n  return undefined;\n}\n\n/**\n * @param {string} id\n * @param {string} val\n * @param {number} maxAgeSecs -- Seconds of expire period\n */\nexport function setCookie(id, val, maxAgeSecs) {\n  const cookieVal = [id, val || ''].map(encodeURIComponent).join('=');\n  const parts = [\n    // prettier-ignore\n    cookieVal,\n  ];\n  if (maxAgeSecs) {\n    parts.push('max-age=' + maxAgeSecs);\n  }\n  const fullCookie = parts.filter(Boolean).join(';');\n  document.cookie = fullCookie;\n}\n","import { TrackInfo, trackInfoFromJsonStr, trackInfoToJsonStr } from './TrackInfo';\n\nclass LocalTrackInfoDb {\n  // End-user api\n\n  updatePlayedCount(id: number, playedCount?: number, now?: number) {\n    try {\n      const _now = now || Date.now();\n      const trackInfo = this.getOrCreate(id);\n      if (isNaN(playedCount)) {\n        trackInfo.playedCount = trackInfo.playedCount ? trackInfo.playedCount + 1 : 1;\n      } else {\n        trackInfo.playedCount = playedCount;\n      }\n      trackInfo.lastPlayed = _now;\n      trackInfo.lastUpdated = _now;\n      this.insert(trackInfo);\n      // this.updateEvents.broadcast(TracksInfoDbUpdate(trackInfo));\n      return trackInfo;\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error('[LocalTrackInfoDb:incrementPlayedCount]', err.message, {\n        err,\n        id,\n      });\n      debugger; // eslint-disable-line no-debugger\n      throw err;\n    }\n  }\n\n  updatePosition(id: number, position: number, now?: number) {\n    try {\n      const _now = now || Date.now();\n      const trackInfo = this.getOrCreate(id);\n      trackInfo.position = position;\n      trackInfo.lastPlayed = _now; // ???\n      trackInfo.lastUpdated = _now;\n      this.insert(trackInfo);\n      // this.updateEvents.broadcast(TracksInfoDbUpdate(trackInfo));\n      return trackInfo;\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error('[LocalTrackInfoDb:updatePosition]', err.message, {\n        err,\n        id,\n      });\n      debugger; // eslint-disable-line no-debugger\n      throw err;\n    }\n  }\n\n  updateFavorite(id: number, favorite: boolean, now?: number) {\n    try {\n      const _now = now || Date.now();\n      const trackInfo = this.getOrCreate(id);\n      trackInfo.favorite = favorite;\n      trackInfo.lastUpdated = _now;\n      this.insert(trackInfo);\n      this._toggleInFavoritesIndex(id, favorite);\n      // this.updateEvents.broadcast(TracksInfoDbUpdate(trackInfo));\n      return trackInfo;\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error('[LocalTrackInfoDb:setFavorite]', err.message, {\n        err,\n        id,\n      });\n      debugger; // eslint-disable-line no-debugger\n      throw err;\n    }\n  }\n\n  updateFavoritesByTrackIds(ids: number[], now?: number) {\n    const _now = now || Date.now();\n    const index = this._getIndex();\n    index.forEach((id) => {\n      const isFavorite = ids.includes(id);\n      const trackInfo = this.getOrCreate(id);\n      if (trackInfo.favorite !== isFavorite) {\n        trackInfo.favorite = isFavorite;\n        trackInfo.lastUpdated = _now;\n        this.insert(trackInfo);\n      }\n    });\n    this._setFavoritesIndex(ids);\n  }\n\n  save(trackInfo: TrackInfo, now?: number) {\n    try {\n      const _now = now || Date.now();\n      trackInfo.lastPlayed = _now; // ???\n      trackInfo.lastUpdated = _now;\n      this.insert(trackInfo);\n      // this.updateEvents.broadcast(TracksInfoDbUpdate(trackInfo));\n      // const testTrackInfo = await this.getById(id);\n      return trackInfo;\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error('[LocalTrackInfoDb:save]', err.message, {\n        err,\n        trackInfo,\n      });\n      debugger; // eslint-disable-line no-debugger\n      throw err;\n    }\n  }\n\n  // Low-level api\n\n  createNewRecord(id: number) {\n    const now = Date.now();\n    const trackInfo: TrackInfo = {\n      id: id, // track.id\n      favorite: false,\n      playedCount: 0, // track.played_count (but only for current user!).\n      position: 0, // position\n      lastUpdated: now, // DateTime.now()\n      lastPlayed: 0, // DateTime.now()\n    };\n    return trackInfo;\n  }\n\n  getOrCreate(id: number) {\n    return this.getById(id) || this.createNewRecord(id);\n  }\n\n  /// Create or update the record. (Returns inserted/updated record id.)\n  insert(trackInfo: TrackInfo) {\n    const { id } = trackInfo;\n    window.localStorage.setItem('trackInfo-' + id, trackInfoToJsonStr(trackInfo));\n    this._addToIndex(id);\n  }\n\n  getFavorites() {\n    return this.getAll().filter((it) => it.favorite);\n  }\n\n  getById(id: number) {\n    const str = window.localStorage.getItem('trackInfo-' + id);\n    if (!str) {\n      return undefined;\n    }\n    return trackInfoFromJsonStr(str);\n  }\n\n  _getFavoritesIndex() {\n    try {\n      const data = window.localStorage.getItem('trackInfoFavoritesIndex');\n      return (data ? JSON.parse(data) : []) as number[];\n    } catch (\n      _ // eslint-disable-line @typescript-eslint/no-unused-vars\n    ) {\n      return [] as number[];\n    }\n  }\n\n  _setFavoritesIndex(favoritesIndex: number[]) {\n    window.localStorage.setItem('trackInfoFavoritesIndex', JSON.stringify(favoritesIndex));\n  }\n\n  _addToFavoritesIndex(id: number) {\n    const favoritesIndex = this._getFavoritesIndex();\n    if (!favoritesIndex.includes(id)) {\n      favoritesIndex.push(id);\n      this._setFavoritesIndex(favoritesIndex);\n    }\n  }\n\n  _removeFromFavoritesIndex(id: number) {\n    const favoritesIndex = this._getFavoritesIndex();\n    if (favoritesIndex.includes(id)) {\n      this._setFavoritesIndex(favoritesIndex.filter((checkId) => id !== checkId));\n    }\n  }\n\n  _toggleInFavoritesIndex(id: number, value?: boolean) {\n    if (value) {\n      this._addToFavoritesIndex(id);\n    } else {\n      this._removeFromFavoritesIndex(id);\n    }\n  }\n\n  _getIndex() {\n    try {\n      const data = window.localStorage.getItem('trackInfoIndex');\n      return (data ? JSON.parse(data) : []) as number[];\n    } catch (\n      _ // eslint-disable-line @typescript-eslint/no-unused-vars\n    ) {\n      return [] as number[];\n    }\n  }\n\n  _setIndex(index: number[]) {\n    window.localStorage.setItem('trackInfoIndex', JSON.stringify(index));\n  }\n\n  _addToIndex(id: number) {\n    const index = this._getIndex();\n    if (!index.includes(id)) {\n      index.push(id);\n      this._setIndex(index);\n    }\n  }\n\n  _removeFromIndex(id: number) {\n    const index = this._getIndex();\n    if (index.includes(id)) {\n      this._setIndex(index.filter((checkId) => id !== checkId));\n    }\n  }\n\n  _toggleInIndex(id: number, value?: boolean) {\n    if (value) {\n      this._addToIndex(id);\n    } else {\n      this._removeFromIndex(id);\n    }\n  }\n\n  getAll() {\n    const index = this._getIndex();\n    const list: TrackInfo[] = index\n      .map((id) => {\n        return this.getById(id);\n      })\n      .filter(Boolean);\n    return list;\n  }\n\n  delete(id: number) {\n    window.localStorage.removeItem('trackInfo-' + id);\n    this._removeFromIndex(id);\n  }\n\n  clearAll() {\n    const index = this._getIndex();\n    index.forEach((id) => {\n      window.localStorage.removeItem('trackInfo-' + id);\n    });\n    this._setIndex([]);\n  }\n}\n\n// Create a singleton\nexport const localTrackInfoDb = new LocalTrackInfoDb();\n","export interface TrackInfo {\n  id: number; // track.id\n  favorite: boolean;\n  playedCount: number; // track.played_count (but only for current user!).\n  position: number; // position?.inMilliseconds ?? 0\n  lastUpdated: number; // DateTime.now().millisecondsSinceEpoch <-> DateTime.fromMillisecondsSinceEpoch(ms)\n  lastPlayed: number; // DateTime.now().millisecondsSinceEpoch <-> DateTime.fromMillisecondsSinceEpoch(ms)\n}\n\nexport function trackInfoFromJsonStr(str: string) {\n  if (!str) {\n    return undefined;\n  }\n  const list: (boolean | number)[] = JSON.parse(str);\n  const [id, favorite, playedCount, position, lastUpdated, lastPlayed] = list;\n  const trackInfo: TrackInfo = {\n    id,\n    favorite: Boolean(favorite),\n    playedCount,\n    position,\n    lastUpdated,\n    lastPlayed,\n  } as TrackInfo;\n  return trackInfo;\n}\n\nexport function trackInfoToJsonStr(trackInfo: TrackInfo) {\n  const { id, favorite, playedCount, position, lastUpdated, lastPlayed } = trackInfo;\n  const list = [id, Number(favorite), playedCount, position, lastUpdated, lastPlayed];\n  return JSON.stringify(list);\n}\n","import { quoteHtmlAttr } from '../helpers/CommonHelpers';\n\nexport function getJsText(id: string) {\n  const textNode = document.body.querySelector('#js-texts #' + id);\n  if (!textNode) {\n    // eslint-disable-next-line no-console\n    console.warn('[getJsText] Can not find js text node for id:', id);\n  }\n  const text = textNode?.innerHTML || id;\n  return quoteHtmlAttr(text).trim();\n}\n","import * as CommonHelpers from '../helpers/CommonHelpers';\n\n/** Toast types */\ntype TMode = 'info' | 'error' | 'warn' | 'success';\n\n/** Icon shapes (move to constants?) */\nconst icons: Record<TMode, string> = {\n  success: 'bi-check',\n  error: 'bi-exclamation-triangle-fill',\n  warn: 'bi-bell-fill',\n  info: 'bi-info-lg',\n};\n\nconst iconClassNamePrefix = 'bi';\n\ninterface TNotifyData {\n  node: HTMLDivElement;\n  handler?: TSetTimeout;\n}\n\n// Define module...\nclass CommonNotify {\n  notifyRoot: HTMLDivElement = undefined;\n\n  timeoutDelay = 3000;\n\n  inited = false;\n\n  // Methods...\n\n  removeNotify(notifyData: TNotifyData) {\n    const { node, handler } = notifyData;\n    // Play animation...\n    node.classList.remove('active');\n    if (handler) {\n      clearTimeout(handler);\n      notifyData.handler = undefined;\n    }\n    setTimeout(() => {\n      // ...And remove node (TODO: Check if node still exists in dom tree)...\n      try {\n        this.notifyRoot.removeChild(node);\n      } catch (\n        _e // eslint-disable-line @typescript-eslint/no-unused-vars\n      ) {\n        // NOOP\n      }\n    }, 250); // Value of `var(--common-animation-time)`\n  }\n\n  /** showNotify\n   * @param {'info' | 'error' | 'warn' | 'success'} mode - Message type ('info' is default)\n   * @param {string|Error} text - Message content\n   */\n  showNotify(mode: TMode, text: string | Error) {\n    this.ensureInit();\n    if (!text) {\n      // If only one parameters passed assume it as message with default type\n      text = mode;\n      mode = 'info';\n    }\n    let content: string;\n    if (text instanceof Error) {\n      // Convert error object to the plain text...\n      content = CommonHelpers.getErrorText(text);\n    } else {\n      content = String(text);\n    }\n    // Create node...\n    const node = document.createElement('div');\n    node.classList.add('notify');\n    node.classList.add('notify-' + mode);\n    // Add icon...\n    const nodeIcon = document.createElement('span');\n    nodeIcon.classList.add('icon');\n    nodeIcon.classList.add(iconClassNamePrefix);\n    nodeIcon.classList.add(icons[mode]);\n    node.appendChild(nodeIcon);\n    // Add text...\n    const nodeText = document.createElement('div');\n    nodeText.classList.add('text');\n    nodeText.innerHTML = content;\n    node.appendChild(nodeText);\n    this.notifyRoot.appendChild(node);\n    // Play appearing animation...\n    window.requestAnimationFrame(() => {\n      setTimeout(() => {\n        node.classList.add('active');\n      }, 10);\n    });\n    // Remove node after delay...\n    const notifyData: TNotifyData = { node, handler: undefined };\n    const removeNotifyHandler = this.removeNotify.bind(this, notifyData);\n    notifyData.handler = setTimeout(removeNotifyHandler, this.timeoutDelay);\n    // Stop & restore timer on mouse in and out events...\n    node.addEventListener('mouseenter', () => {\n      // Clear timer...\n      clearTimeout(notifyData.handler);\n    });\n    node.addEventListener('mouseleave', () => {\n      // Resume timer...\n      notifyData.handler = setTimeout(removeNotifyHandler, this.timeoutDelay);\n    });\n    // Click handler...\n    node.addEventListener('click', removeNotifyHandler);\n  }\n\n  // Some shorthands...\n\n  /** @param {string|Error} text - Message content */\n  showInfo(text: string | Error) {\n    this.showNotify('info', text);\n  }\n\n  /** @param {string|Error} text - Message content */\n  showSuccess(text: string | Error) {\n    this.showNotify('success', text);\n  }\n\n  /** @param {string|Error} text - Message content */\n  showWarn(text: string | Error) {\n    this.showNotify('warn', text);\n  }\n\n  /** @param {string|Error} text - Message content */\n  showError(text: string | Error) {\n    this.showNotify('error', text);\n  }\n\n  // Demo...\n\n  showDemo() {\n    // DEBUG: Show sample notifiers...\n    this.showInfo('Info');\n    this.showSuccess('Success');\n    this.showWarn('Warn');\n    this.showError('Error');\n  }\n\n  // Initialization...\n\n  /** Ensure the modal has initiazlized */\n  ensureInit() {\n    this.init();\n  }\n\n  createDomNode() {\n    // TODO: To use bootstrap toasts?\n    const rootNode = document.body;\n    const notifyRoot = document.createElement('div');\n    notifyRoot.classList.add('notify-root');\n    notifyRoot.setAttribute('id', 'notify-root');\n    rootNode.appendChild(notifyRoot);\n    this.notifyRoot = notifyRoot;\n  }\n\n  /** Initialize nodule. */\n  init() {\n    if (!this.inited) {\n      this.createDomNode();\n      this.inited = true;\n    }\n  }\n}\n\n// Create and export singletone\nexport const commonNotify = new CommonNotify();\n\n// commonNotify.init();\n","export interface ActivePlayerData {\n  id: number;\n  title: string;\n  imageUrl: string;\n  mediaUrl: string;\n  duration: number;\n  favorite: boolean;\n  // position: number;\n  // status?: string;\n}\n\nconst storageActivePlayerDataId = 'ActivePlayerData';\n\nfunction convertActivePlayerDataToJsonStr(data: ActivePlayerData) {\n  return JSON.stringify(data);\n}\n\nfunction convertActivePlayerDataFromJsonStr(str: string) {\n  return str ? (JSON.parse(str) as ActivePlayerData) : undefined;\n}\n\nexport function saveActivePlayerData(data?: ActivePlayerData) {\n  const str = data ? convertActivePlayerDataToJsonStr(data) : '';\n  window.localStorage.setItem(storageActivePlayerDataId, str);\n}\n\nexport function loadActivePlayerData() {\n  const str = window.localStorage.getItem(storageActivePlayerDataId);\n  return convertActivePlayerDataFromJsonStr(str);\n}\n","import { getCookie } from '../helpers/CommonHelpers';\nimport * as CommonHelpers from '../helpers/CommonHelpers';\nimport { getJsText } from './getJsText';\n\nexport function sendApiRequest(\n  url: string,\n  method: string = 'GET',\n  requestData: unknown = undefined,\n) {\n  const csrftoken = getCookie('csrftoken');\n  // const sessionId = getCookie('sessionid');\n  // const url = `/api/v1/tracks/${trackId}/toggle-favorite/`;\n  const headers = {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n    'X-CSRFToken': csrftoken,\n    // Credentials: 'include',\n    // Cookie: csrftoken && `csrftoken=${csrftoken}`,\n    // 'X-Session-Token': sessionId, // X-Session-Token\n    // 'Accept-Language': 'ru', // django_language=ru; content-language: ru;\n  };\n  /* console.log('[sendApiRequest] start', {\n   *   url,\n   *   method,\n   *   requestData,\n   *   headers,\n   * });\n   */\n  return fetch(url, {\n    method,\n    headers,\n    credentials: 'include',\n    body: requestData && JSON.stringify(requestData),\n  })\n    .then(async (res) => {\n      const { ok, status, statusText } = res;\n      // TODO: Check is it json?\n      let data: unknown & { detail?: string };\n      try {\n        data = await res.json();\n      } catch (\n        _e // eslint-disable-line @typescript-eslint/no-unused-vars\n      ) {\n        // NOOP\n      }\n      if (!ok || status !== 200) {\n        const errMsg = [getJsText('fetchError') + ' ' + status, data?.detail || statusText]\n          .filter(Boolean)\n          .join(': ');\n        // eslint-disable-next-line no-console\n        console.error('[sendApiRequest]', errMsg, {\n          ok,\n          data,\n          statusText,\n          status,\n          res,\n          url,\n          requestData,\n          method,\n          headers,\n        });\n        debugger; // eslint-disable-line no-debugger\n        throw new Error(errMsg);\n      }\n      /* console.log('[sendApiRequest] Got json', {\n       *   data,\n       *   url,\n       *   requestData,\n       *   method,\n       *   headers,\n       * });\n       */\n      return data as unknown;\n    })\n    .catch((err) => {\n      const errMsg = [getJsText('failedApiRequest'), CommonHelpers.getErrorText(err)]\n        .filter(Boolean)\n        .join(': ');\n      // eslint-disable-next-line no-console\n      console.error('[sendApiRequest]', errMsg, {\n        err,\n        url,\n        requestData,\n        method,\n        headers,\n      });\n      debugger; // eslint-disable-line no-debugger\n      throw new Error(errMsg);\n    });\n}\n","export function floatToStr(num: number | undefined) {\n  if (!num) {\n    return '0';\n  }\n  return num.toFixed(2).replace(/\\.0+$/, '');\n}\n","export interface FloatingPlayerState {\n  lastTimestamp?: number;\n  visible?: boolean;\n  loaded?: boolean;\n  // playing?: boolean;\n  status?: 'playing' | 'paused' | 'waiting' | undefined;\n  position?: number;\n  progress?: number;\n  error?: string;\n}\n\nconst storageFloatingPlayerStateId = 'FloatingPlayerState';\n\nfunction convertFloatingPlayerStateToJsonStr(data: FloatingPlayerState) {\n  return JSON.stringify(data);\n}\n\nfunction convertFloatingPlayerStateFromJsonStr(str: string) {\n  return (str ? JSON.parse(str) : {}) as FloatingPlayerState;\n}\n\nexport function saveFloatingPlayerState(data: FloatingPlayerState) {\n  const saveData = { ...data, lastTimestamp: Date.now() };\n  delete saveData.error;\n  delete saveData.loaded;\n  // status?\n  const str = convertFloatingPlayerStateToJsonStr(saveData);\n  window.localStorage.setItem(storageFloatingPlayerStateId, str);\n}\n\nexport function loadFloatingPlayerState() {\n  const str = window.localStorage.getItem(storageFloatingPlayerStateId);\n  return convertFloatingPlayerStateFromJsonStr(str);\n}\n","interface THiddenPlayerOptions {\n  type?: string;\n  src?: string;\n}\n\nexport class HiddenPlayer {\n  hiddenPlayerNode?: HTMLElement;\n  parentDomNode?: HTMLElement;\n\n  audioNode?: HTMLAudioElement;\n  sourceNode?: HTMLSourceElement;\n\n  setParentDomNode(parentDomNode: HTMLElement) {\n    this.parentDomNode = parentDomNode;\n  }\n\n  requireParentDomNode() {\n    return this.parentDomNode || document.body;\n  }\n\n  ensureHiddenPlayer(/* opts: THiddenPlayerOptions = {} */) {\n    if (!this.hiddenPlayerNode) {\n      this.hiddenPlayerNode = document.createElement('div');\n      this.hiddenPlayerNode.classList.add('hidden-player');\n      const audio = document.createElement('audio');\n      // audio.addEventListener('loadeddata', this.hiddenPlayerCanPlay);\n      this.hiddenPlayerNode.appendChild(audio);\n      const parentDomNode = this.requireParentDomNode();\n      parentDomNode.appendChild(this.hiddenPlayerNode);\n    }\n    return this.hiddenPlayerNode;\n  }\n\n  hasAudio() {\n    return !!this.audioNode;\n  }\n\n  hasSource() {\n    return !!this.sourceNode;\n  }\n\n  ensureHiddenPlayerAudio() {\n    if (!this.audioNode) {\n      const parentDomNode = this.requireParentDomNode();\n      this.audioNode = document.createElement('audio');\n      this.audioNode.classList.add('hidden-player');\n      this.audioNode.setAttribute('preload', 'auto');\n      // audio.addEventListener('loadeddata', this.hiddenPlayerCanPlay);\n      parentDomNode.appendChild(this.audioNode);\n    }\n    return this.audioNode;\n  }\n\n  createHiddenPlayerSource(opts: THiddenPlayerOptions = {}) {\n    this.removeHiddenPlayerSource();\n    const audio = this.ensureHiddenPlayerAudio();\n    this.sourceNode = document.createElement('source');\n    this.sourceNode.setAttribute('type', opts.type || 'audio/mpeg');\n    if (opts.src) {\n      this.sourceNode.setAttribute('src', opts.src);\n    }\n    // @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/loadeddata_event\n    // audio.addEventListener('canplay', this.handleCanPlay.bind(this));\n    // audio.addEventListener('playing', this.handlePlay.bind(this));\n    // audio.addEventListener('timeupdate', this.handleTimeUpdate.bind(this));\n    // audio.addEventListener('ended', this.handleEnded.bind(this));\n    // this.sourceNode.addEventListener('error', this.handleError.bind(this));\n    audio.appendChild(this.sourceNode);\n    return this.sourceNode;\n  }\n\n  removeHiddenPlayerAudio() {\n    if (this.audioNode) {\n      this.audioNode.pause();\n      this.audioNode.remove();\n      this.audioNode = undefined;\n      this.sourceNode = undefined;\n    }\n  }\n\n  removeHiddenPlayerSource() {\n    const audio = this.ensureHiddenPlayerAudio();\n    const prevSources = Array.from(audio.getElementsByTagName('source'));\n    for (const node of prevSources) {\n      node.remove();\n    }\n    this.sourceNode = undefined;\n  }\n}\n","import { formatDuration, quoteHtmlAttr } from '../helpers/CommonHelpers';\n\nimport { localTrackInfoDb } from './localTrackInfoDb';\nimport { floatingPlayer } from '../entities/FloatingPlayer/floatingPlayer';\nimport {\n  FloatingPlayerFavoriteData,\n  FloatingPlayerFavoritesData,\n  FloatingPlayerIncrementData,\n  FloatingPlayerUpdateData,\n} from '../entities/FloatingPlayer/FloatingPlayerCallbacks';\nimport { floatToStr } from '../helpers/floatToStr';\n\nlet allPlayers: NodeListOf<HTMLElement>;\nlet currentTrackPlayer: HTMLElement | undefined = undefined;\n\n// Values for dataset statuses\nconst TRUE = 'true';\n\nfunction calculateAndUpdateTrackPosition(\n  trackNode: HTMLElement,\n  position: number,\n  _isCurrent?: boolean,\n) {\n  const timeNode = trackNode.querySelector<HTMLElement>('.time');\n  const { dataset } = trackNode;\n  const { trackId, trackDuration } = dataset;\n  const timeMs = Math.floor(position * 1000);\n  const timeFormatted = formatDuration(timeMs);\n  const id = Number(trackId);\n  const duration = parseFloat(trackDuration.replace(',', '.'));\n  if (!duration) {\n    const error = new Error(`No duration provided for a track: ${id}`);\n    // eslint-disable-next-line no-console\n    console.error('[tracksPlayer:updateTrackPosition]', error.message, {\n      error,\n    });\n    debugger; // eslint-disable-line no-debugger\n  }\n  const ratio = position / duration;\n  const progress = Math.min(100, ratio * 100);\n  requestAnimationFrame(() => {\n    dataset.position = floatToStr(position);\n    dataset.progress = floatToStr(progress);\n    trackNode.style.setProperty('--progress', dataset.progress);\n    if (timeNode) {\n      timeNode.innerText = timeFormatted;\n    }\n  });\n  localTrackInfoDb.updatePosition(id, position);\n  // TODO: Update the floating player if isCurrent?\n}\n\nfunction floatingPlayerUpdate(data: FloatingPlayerUpdateData) {\n  const { floatingPlayerState, activePlayerData } = data;\n  const { id } = activePlayerData;\n  let trackNode = currentTrackPlayer;\n  if (!trackNode || Number(trackNode.dataset.trackId) !== id) {\n    trackNode = getTrackNode(id);\n  }\n  if (!trackNode) {\n    return;\n  }\n  // const isCurrent = trackNode === currentTrackPlayer;\n  const { position, progress, status } = floatingPlayerState;\n  const { dataset } = currentTrackPlayer;\n  const timeNode = currentTrackPlayer.querySelector<HTMLElement>('.time');\n  const timeMs = Math.floor(position * 1000);\n  const timeFormatted = formatDuration(timeMs);\n  requestAnimationFrame(() => {\n    if (status) {\n      dataset.status = status;\n    } else {\n      delete dataset.status;\n    }\n    dataset.position = floatToStr(position);\n    dataset.progress = floatToStr(progress);\n    currentTrackPlayer.style.setProperty('--progress', dataset.progress);\n    if (timeNode) {\n      timeNode.innerText = timeFormatted;\n    }\n  });\n  // calculateAndUpdateTrackPosition(trackNode, position, isCurrent); // Is it required here?\n  // TODO: Update the floating player if isCurrent?\n}\n\nfunction floatingPlayerPlay(data: FloatingPlayerUpdateData) {\n  const {\n    // floatingPlayerState,\n    activePlayerData,\n  } = data;\n  if (!currentTrackPlayer) {\n    throw new Error('No current track player node!');\n  }\n  const { dataset } = currentTrackPlayer;\n  const id = Number(dataset.trackId);\n  if (id !== activePlayerData.id) {\n    throw new Error('Wrong active track id!');\n  }\n  requestAnimationFrame(() => {\n    dataset.status = 'playing';\n  });\n}\n\nfunction floatingPlayerStop(data: FloatingPlayerUpdateData) {\n  const {\n    // floatingPlayerState, // ???\n    activePlayerData,\n  } = data;\n  if (!currentTrackPlayer) {\n    throw new Error('No current track player node!');\n  }\n  const { dataset } = currentTrackPlayer;\n  const id = Number(dataset.trackId);\n  if (id !== activePlayerData.id) {\n    throw new Error('Wrong active track id!');\n  }\n  requestAnimationFrame(() => {\n    delete dataset.status;\n  });\n}\n\nfunction getTrackNode(id: number) {\n  const players = Array.from(allPlayers);\n  const trackNode = players.find((it) => Number(it.dataset.trackId) === id);\n  return trackNode;\n}\n\nfunction stopPreviousPlayer() {\n  if (currentTrackPlayer) {\n    const { dataset } = currentTrackPlayer;\n    requestAnimationFrame(() => {\n      currentTrackPlayer.classList.toggle('current', false);\n      delete dataset.status;\n      delete dataset.loaded;\n      delete dataset.error;\n    });\n  }\n}\n\nfunction updateTrackPlayedCount(\n  trackNode: HTMLElement,\n  playedCount?: number,\n  _isCurrent?: boolean,\n) {\n  const { dataset } = trackNode;\n  const { trackId } = dataset;\n  const id = Number(trackId);\n  if (!id) {\n    throw new Error('No current track id!');\n  }\n  const updatedTrackInfo = localTrackInfoDb.updatePlayedCount(id, playedCount);\n  const { playedCount: updatedPlayedCount } = updatedTrackInfo;\n  const strValue = quoteHtmlAttr(String(updatedPlayedCount));\n  const valueNode = trackNode.querySelector('#played_count') as HTMLElement;\n  // Update counter in the document...\n  if (valueNode) {\n    const parent = valueNode.closest('.track-played-count[data-played-count]') as HTMLElement;\n    requestAnimationFrame(() => {\n      valueNode.innerText = strValue;\n      if (parent) {\n        parent.dataset.playedCount = strValue;\n      }\n    });\n  }\n  // TODO: Update value in the floating player?\n}\n\nfunction updateIncrementCallback(data: FloatingPlayerIncrementData) {\n  const {\n    count,\n    // floatingPlayerState,\n    activePlayerData,\n  } = data;\n  const trackNode = getTrackNode(activePlayerData.id);\n  const isCurrent = trackNode === currentTrackPlayer;\n  if (trackNode) {\n    updateTrackPlayedCount(trackNode, count, isCurrent);\n  }\n}\n\n/** Play button click handler */\nfunction trackPlayHandler(ev: MouseEvent) {\n  const controlNode = ev.currentTarget as HTMLElement;\n  const trackNode = controlNode.closest('.track-player') as HTMLElement;\n  // Reset previous player\n  if (currentTrackPlayer && currentTrackPlayer !== trackNode) {\n    stopPreviousPlayer();\n  }\n  const { dataset } = trackNode;\n  const id = Number(dataset.trackId);\n\n  const playingId = floatingPlayer.getActiveTrackId();\n  const isFloatingPlaying = floatingPlayer.isPlaying();\n  if (isFloatingPlaying) {\n    // Pause playback\n    floatingPlayer.pauseCurrentPlayer();\n    if (playingId === id) {\n      // Return -- just pause current track\n      return;\n    }\n  }\n\n  // Clear all tracks active status?\n  requestAnimationFrame(() => {\n    allPlayers.forEach((it) => {\n      if (it !== trackNode && it.classList.contains('current')) {\n        it.classList.toggle('current', false);\n      }\n    });\n    trackNode.classList.toggle('current', true);\n  });\n\n  currentTrackPlayer = trackNode;\n\n  const position = parseFloat((dataset.position || '0').replace(',', '.'));\n  floatingPlayer.setActiveTrack(trackNode, position);\n\n  floatingPlayer.playCurrentPlayer();\n\n  // Show floating player if has been hidden\n  if (!isFloatingPlaying) {\n    floatingPlayer.showFloatingPlayer();\n  }\n}\n\nfunction updateTrackFavorite(trackNode: HTMLElement, isFavorite: boolean) {\n  const { dataset } = trackNode;\n  const { favorite } = dataset;\n  const isCurrentFavorite = Boolean(favorite);\n  if (isFavorite !== isCurrentFavorite) {\n    requestAnimationFrame(() => {\n      if (isFavorite) {\n        dataset.favorite = TRUE;\n      } else {\n        delete dataset.favorite;\n      }\n    });\n  }\n}\n\nfunction updateSingleFavoriteCallback({ id, favorite }: FloatingPlayerFavoriteData) {\n  const trackNode = getTrackNode(id);\n  if (trackNode) {\n    updateTrackFavorite(trackNode, favorite);\n  }\n}\n\nfunction updateFavoritesCallback({ favorites }: FloatingPlayerFavoritesData) {\n  allPlayers.forEach((trackNode) => {\n    const { dataset } = trackNode;\n    const { trackId } = dataset;\n    const id = Number(trackId);\n    const isFavorite = favorites.includes(id);\n    updateTrackFavorite(trackNode, isFavorite);\n  });\n}\n\nfunction initTrackPlayerNode(trackNode: HTMLElement) {\n  const activePlayerData = floatingPlayer.activePlayerData;\n  const { dataset } = trackNode;\n  const {\n    inited,\n    trackId, // \"1\"\n    trackMediaUrl, // \"/media/samples/gr-400x225.jpg\"\n  } = dataset;\n  const id = Number(trackId || '');\n  if (!id || inited || !trackMediaUrl) {\n    return;\n  }\n  const trackInfo = localTrackInfoDb.getOrCreate(id); // getById(id);\n  if (activePlayerData && activePlayerData.id == id) {\n    currentTrackPlayer = trackNode;\n    requestAnimationFrame(() => {\n      trackNode.classList.toggle('current', true);\n    });\n    floatingPlayerUpdate({ floatingPlayerState: floatingPlayer.state, activePlayerData });\n  } else {\n    // TODO: Update local data (favorite, playedCount) from track node dataset?\n    if (trackInfo.position) {\n      calculateAndUpdateTrackPosition(trackNode, trackInfo.position, false);\n    }\n  }\n  if (!window.isAuthenticated) {\n    if (trackInfo?.favorite) {\n      updateTrackFavorite(trackNode, trackInfo.favorite);\n    }\n  }\n  const controls = trackNode.querySelectorAll<HTMLElement>('.track-control');\n  controls.forEach((node) => {\n    const { dataset } = node;\n    const { inited, controlId } = dataset;\n    if (inited) {\n      return;\n    }\n    if (controlId === 'toggleFavorite') {\n      node.addEventListener('click', () => floatingPlayer.toggleFavoriteById(id));\n    }\n    if (controlId === 'play') {\n      node.addEventListener('click', trackPlayHandler);\n    }\n    dataset.inited = TRUE;\n  });\n  dataset.inited = TRUE;\n}\n\nexport function initTracksPlayerWrapper(domNode: HTMLElement = document.body) {\n  allPlayers = domNode.querySelectorAll<HTMLElement>('.track-player[data-track-media-url]');\n  allPlayers.forEach(initTrackPlayerNode);\n  floatingPlayer.callbacks.addPlayStartCallback(floatingPlayerPlay);\n  floatingPlayer.callbacks.addPlayStopCallback(floatingPlayerStop);\n  floatingPlayer.callbacks.addUpdateCallback(floatingPlayerUpdate);\n  floatingPlayer.callbacks.addIncrementCallback(updateIncrementCallback);\n  floatingPlayer.callbacks.addFavoritesCallback(updateFavoritesCallback);\n  floatingPlayer.callbacks.addFavoriteCallback(updateSingleFavoriteCallback);\n}\n","import { ActivePlayerData } from '../ActivePlayerData/ActivePlayerData';\nimport { FloatingPlayerState } from './FloatingPlayerState';\n\nexport interface FloatingPlayerUpdateData {\n  floatingPlayerState: FloatingPlayerState;\n  activePlayerData: ActivePlayerData;\n}\nexport interface FloatingPlayerIncrementData {\n  count?: number;\n  // floatingPlayerState: FloatingPlayerState;\n  activePlayerData: ActivePlayerData;\n}\nexport interface FloatingPlayerFavoritesData {\n  favorites: number[];\n}\nexport interface FloatingPlayerFavoriteData {\n  id: number;\n  favorite: boolean;\n  // activePlayerData: ActivePlayerData;\n}\ntype UpdateCallback = (data: FloatingPlayerUpdateData) => void;\ntype IncrementCallback = (data: FloatingPlayerIncrementData) => void;\ntype FavoritesCallback = (data: FloatingPlayerFavoritesData) => void;\ntype FavoriteCallback = (data: FloatingPlayerFavoriteData) => void;\ntype ErrorCallback = (error: Error | string) => void;\n\n// type HandlerId = 'play' | 'stop' | 'time';\nexport class FloatingPlayerCallbacks {\n  onPlayStartCallbacks: UpdateCallback[] = [];\n  onPlayStopCallbacks: UpdateCallback[] = [];\n  onUpdateCallbacks: UpdateCallback[] = [];\n  onIncrementCallbacks: IncrementCallback[] = [];\n  onFavoritesCallbacks: FavoritesCallback[] = [];\n  onFavoriteCallbacks: FavoriteCallback[] = [];\n  onErrorCallbacks: ErrorCallback[] = [];\n\n  // handlers: Record<HandlerId, ErrorCallback[]> = {};\n\n  addPlayStartCallback(cb: UpdateCallback) {\n    if (cb && !this.onPlayStartCallbacks.includes(cb)) {\n      this.onPlayStartCallbacks.push(cb);\n    }\n  }\n\n  addPlayStopCallback(cb: UpdateCallback) {\n    if (cb && !this.onPlayStopCallbacks.includes(cb)) {\n      this.onPlayStopCallbacks.push(cb);\n    }\n  }\n\n  addUpdateCallback(cb: UpdateCallback) {\n    if (cb && !this.onUpdateCallbacks.includes(cb)) {\n      this.onUpdateCallbacks.push(cb);\n    }\n  }\n\n  addIncrementCallback(cb: IncrementCallback) {\n    if (cb && !this.onIncrementCallbacks.includes(cb)) {\n      this.onIncrementCallbacks.push(cb);\n    }\n  }\n\n  addFavoriteCallback(cb: FavoriteCallback) {\n    if (cb && !this.onFavoriteCallbacks.includes(cb)) {\n      this.onFavoriteCallbacks.push(cb);\n    }\n  }\n\n  addFavoritesCallback(cb: FavoritesCallback) {\n    if (cb && !this.onFavoritesCallbacks.includes(cb)) {\n      this.onFavoritesCallbacks.push(cb);\n    }\n  }\n\n  addErrorCallback(cb: ErrorCallback) {\n    if (cb && !this.onErrorCallbacks.includes(cb)) {\n      this.onErrorCallbacks.push(cb);\n    }\n  }\n\n  // Invokers\n\n  invokePlayStart(data: FloatingPlayerUpdateData) {\n    if (data.activePlayerData) {\n      this.onPlayStartCallbacks.forEach((cb) => {\n        cb(data);\n      });\n    }\n  }\n\n  invokePlayStop(data: FloatingPlayerUpdateData) {\n    if (data.activePlayerData) {\n      this.onPlayStopCallbacks.forEach((cb) => {\n        cb(data);\n      });\n    }\n  }\n\n  invokeUpdate(data: FloatingPlayerUpdateData) {\n    if (data.activePlayerData) {\n      this.onUpdateCallbacks.forEach((cb) => {\n        cb(data);\n      });\n    }\n  }\n\n  invokeIncrement(data: FloatingPlayerIncrementData) {\n    if (data.activePlayerData) {\n      this.onIncrementCallbacks.forEach((cb) => {\n        cb(data);\n      });\n    }\n  }\n\n  invokeFavorite(data: FloatingPlayerFavoriteData) {\n    this.onFavoriteCallbacks.forEach((cb) => {\n      cb(data);\n    });\n  }\n\n  invokeFavorites(data: FloatingPlayerFavoritesData) {\n    this.onFavoritesCallbacks.forEach((cb) => {\n      cb(data);\n    });\n  }\n\n  invokeError(error: Error | string) {\n    if (error) {\n      this.onErrorCallbacks.forEach((cb) => {\n        cb(error);\n      });\n    }\n  }\n}\n","import { getJsText } from '../../helpers/getJsText';\nimport { commonNotify } from '../../CommonNotify/CommonNotifySingleton';\nimport { formatDuration, getErrorText } from '../../helpers/CommonHelpers';\nimport { localTrackInfoDb } from '../../track-blocks/localTrackInfoDb';\n\nimport {\n  ActivePlayerData,\n  loadActivePlayerData,\n  saveActivePlayerData,\n} from '../ActivePlayerData/ActivePlayerData';\nimport { getActivePlayerDataFromTrackNode } from '../ActivePlayerData/getActivePlayerDataFromTrackNode';\nimport { sendApiRequest } from '../../helpers/sendApiRequest';\nimport { floatToStr } from '../../helpers/floatToStr';\nimport {\n  FloatingPlayerState,\n  loadFloatingPlayerState,\n  saveFloatingPlayerState,\n} from './FloatingPlayerState';\n\nimport { HiddenPlayer } from './HiddenPlayer';\nimport { FloatingPlayerCallbacks } from './FloatingPlayerCallbacks';\n\n// TODO: Update track title on the language change?\n\nconst TRUE = 'true';\n\n/** A value of forward/backward seek step */\nconst seekTimeSec = 1;\n\nexport class FloatingPlayer {\n  inited = false;\n  callbacks = new FloatingPlayerCallbacks();\n  audio?: HTMLAudioElement;\n  hiddenPlayer: HiddenPlayer = new HiddenPlayer();\n  activePlayerData?: ActivePlayerData;\n  state: FloatingPlayerState = {};\n  domNode?: HTMLElement;\n  incrementing?: boolean;\n  toggling: Record<number, boolean> = {};\n  seeking = false;\n\n  constructor() {\n    this.loadActivePlayerData();\n    this.loadFloatingPlayerState();\n    this.initDomNode();\n    this.updateAll();\n    // Check if it was recently playing...\n    const now = Date.now();\n    if (this.activePlayerData) {\n      this.ensureAudioLoaded();\n      if (\n        this.state.status === 'playing' &&\n        this.state.lastTimestamp &&\n        this.state.lastTimestamp > now - 5000\n      ) {\n        // TODO: Then resume playback...\n        /* console.log('[FloatingPlayerClass:constructor] Start play', {\n         *   activePlayerData: this.activePlayerData,\n         *   state: this.state,\n         * });\n         */\n        // TODO: Care about: `Uncaught (in promise) NotAllowedError: play() failed because the user didn't interact with the document first. https://goo.gl/xX8pDD`\n        this.playCurrentPlayer();\n      } else {\n        // Reset the status\n        delete this.state.status;\n      }\n    }\n  }\n\n  requireAudio() {\n    if (!this.audio) {\n      this.audio = this.hiddenPlayer.ensureHiddenPlayerAudio();\n      this.audio.addEventListener('canplay', this.handleAudioCanPlay.bind(this));\n      this.audio.addEventListener('playing', this.handleAudioPlay.bind(this));\n      this.audio.addEventListener('timeupdate', this.handleAudioTimeUpdate.bind(this));\n      this.audio.addEventListener('ended', this.handleAudioEnded.bind(this));\n      // source.addEventListener('error', this.handleAudioSourceError.bind(this));\n    }\n    return this.audio;\n  }\n\n  removeAudio() {\n    this.hiddenPlayer.removeHiddenPlayerAudio();\n    this.audio = undefined;\n  }\n\n  hasAudio() {\n    return !!this.audio;\n  }\n\n  hasAudioSource() {\n    return this.hiddenPlayer.hasSource();\n  }\n\n  requireDomNode() {\n    if (!this.domNode) {\n      this.domNode = document.querySelector<HTMLElement>('.floating-player');\n      this.hiddenPlayer.setParentDomNode(this.domNode);\n    }\n    // TODO: Ensure created dom node?\n    if (!this.domNode) {\n      const error = new Error('No floating player node found');\n      // eslint-disable-next-line no-console\n      console.error('[FloatingPlayerClass:requireDomNode]', error.message, {\n        error,\n      });\n      debugger; // eslint-disable-line no-debugger\n      throw error;\n    }\n    return this.domNode;\n  }\n\n  requireActivePlayerData() {\n    // TODO: Ensure data?\n    if (!this.activePlayerData) {\n      const error = new Error('No active player data set');\n      // eslint-disable-next-line no-console\n      console.error('[FloatingPlayerClass:requireActivePlayerData]', error.message, {\n        error,\n      });\n      debugger; // eslint-disable-line no-debugger\n      throw error;\n    }\n    return this.activePlayerData;\n  }\n\n  // Sync persistent data...\n\n  loadActivePlayerData() {\n    this.activePlayerData = loadActivePlayerData();\n  }\n\n  saveActivePlayerData() {\n    saveActivePlayerData(this.activePlayerData);\n  }\n\n  loadFloatingPlayerState() {\n    this.state = loadFloatingPlayerState();\n  }\n\n  saveFloatingPlayerState() {\n    saveFloatingPlayerState(this.state);\n  }\n\n  // Dom node...\n\n  showFloatingPlayer() {\n    this.state.visible = true;\n    this.updateStateInDom();\n    this.saveFloatingPlayerState();\n  }\n\n  hideFloatingPlayer() {\n    this.state.visible = false;\n    this.updateStateInDom();\n    this.saveFloatingPlayerState();\n  }\n\n  // Updaters...\n\n  updateActivePlayerDataInDom() {\n    const domNode = this.requireDomNode();\n    const activePlayerData = this.requireActivePlayerData();\n    const id = activePlayerData.id;\n    const titleNode = domNode.querySelector<HTMLElement>('.title');\n    const durationNode = domNode.querySelector<HTMLElement>('.duration');\n    const imageNode = domNode.querySelector<HTMLElement>('.image');\n    const { dataset } = domNode;\n    requestAnimationFrame(() => {\n      titleNode.innerText = activePlayerData.title;\n      durationNode.innerText = formatDuration(Math.floor(activePlayerData.duration * 1000));\n      imageNode.style.backgroundImage = 'url(' + activePlayerData.imageUrl + ')';\n      if (activePlayerData.favorite) {\n        dataset.favorite = TRUE;\n      } else {\n        delete dataset.favorite;\n      }\n      const links = domNode.querySelectorAll<HTMLLinkElement>('.trackLink');\n      links.forEach((it) => {\n        it.setAttribute('href', `/tracks/${id}`);\n      });\n    });\n  }\n\n  updateStateInDom() {\n    const domNode = this.requireDomNode();\n    const { dataset } = domNode;\n    requestAnimationFrame(() => {\n      if (this.state.status) {\n        dataset.status = this.state.status;\n      } else {\n        delete dataset.status;\n      }\n      document.body.classList.toggle('withPlayer', !!this.state.visible);\n    });\n  }\n\n  updatePositionInDom() {\n    const domNode = this.requireDomNode();\n    const seekBarNode = domNode.querySelector<HTMLInputElement>('.seekBar');\n    const { dataset } = domNode;\n    requestAnimationFrame(() => {\n      dataset.position = floatToStr(this.state.position);\n      dataset.progress = floatToStr(this.state.progress);\n      domNode.style.setProperty('--progress', dataset.progress);\n      seekBarNode.value = dataset.progress;\n    });\n  }\n\n  calculateProgress() {\n    const activePlayerData = this.requireActivePlayerData();\n    const { position } = this.state;\n    const { id, duration } = activePlayerData;\n    if (!duration) {\n      const error = new Error(`No duration provided for a track: ${id}`);\n      // eslint-disable-next-line no-console\n      console.error('[FloatingPlayerClass:calculateProgress]', error.message, {\n        error,\n      });\n      debugger; // eslint-disable-line no-debugger\n      throw error;\n    }\n    const ratio = position / duration;\n    const progress = Math.min(100, ratio * 100);\n    return progress;\n  }\n\n  updateTrackPosition() {\n    const domNode = this.requireDomNode();\n    const timeNode = domNode.querySelector<HTMLElement>('.time');\n    const activePlayerData = this.requireActivePlayerData();\n    const { position } = this.state;\n    const { id } = activePlayerData;\n    const progress = this.calculateProgress();\n    this.state.progress = progress;\n    this.updatePositionInDom();\n    if (timeNode) {\n      requestAnimationFrame(() => {\n        timeNode.innerText = formatDuration(Math.floor(position * 1000));\n      });\n    }\n    localTrackInfoDb.updatePosition(id, position);\n  }\n\n  updateAll() {\n    if (this.activePlayerData) {\n      this.updateTrackPosition();\n    }\n    this.updateStateInDom();\n    this.updatePositionInDom();\n    if (this.activePlayerData) {\n      this.updateActivePlayerDataInDom();\n    }\n  }\n\n  // Audio handlers...\n\n  handleAudioTimeUpdate(ev: Event) {\n    if (this.seeking) {\n      return;\n    }\n    const currAudio = this.audio;\n    const audio = ev.currentTarget as HTMLAudioElement;\n    if (audio !== currAudio) {\n      return;\n    }\n    const activePlayerData = this.requireActivePlayerData();\n    const {\n      currentTime,\n      // readyState, // DEBUG\n    } = audio;\n    /* // DEBUG\n     * const source = audio.getElementsByTagName('SOURCE')[0] as HTMLSourceElement;\n     * console.log('[FloatingPlayerClass:handleAudioTimeUpdate]', {\n     *   currentTime,\n     *   readyState,\n     *   id: activePlayerData.id,\n     *   activePlayerData,\n     *   src: source.src,\n     *   source,\n     *   thisAudio: currAudio === audio,\n     *   currAudio,\n     *   audio,\n     * });\n     */\n    // TODO: Check loaded status?\n    if (this.state.position != currentTime) {\n      this.state.position = currentTime;\n      this.updateTrackPosition();\n      this.saveFloatingPlayerState();\n      this.callbacks.invokeUpdate({ floatingPlayerState: this.state, activePlayerData });\n      localTrackInfoDb.updatePosition(activePlayerData.id, currentTime);\n    }\n  }\n\n  handleAudioCanPlay(_ev: Event) {\n    if (!this.state.loaded) {\n      this.state.loaded = true;\n      delete this.state.error;\n    }\n  }\n\n  handleAudioPlay(_ev: Event) {\n    this.state.status = 'playing';\n    this.updateStateInDom();\n    this.saveFloatingPlayerState();\n    this.callbacks.invokePlayStart({\n      floatingPlayerState: this.state,\n      activePlayerData: this.activePlayerData,\n    });\n  }\n\n  handleAudioEnded(_ev: Event) {\n    this.incrementPlayedCount();\n    this.state.status = 'paused'; // stopped, ready?\n    this.updateStateInDom();\n    this.saveFloatingPlayerState();\n    this.callbacks.invokePlayStop({\n      floatingPlayerState: this.state,\n      activePlayerData: this.activePlayerData,\n    });\n  }\n\n  handleError(err: Error | string) {\n    const errName = err instanceof Error && err.name;\n    // eslint-disable-next-line no-console\n    console.error('[FloatingPlayerClass:handleError]', {\n      err,\n    });\n    if (errName === 'AbortError') {\n      // NOTE: Do nothing on abort\n      return;\n    }\n    debugger; // eslint-disable-line no-debugger\n    this.state.error = getErrorText(err);\n    this.updateStateInDom();\n    commonNotify.showError(err);\n    this.callbacks.invokeError(err);\n  }\n\n  handleAudioSourceError(ev: Event) {\n    const srcElement = ev.currentTarget as HTMLSourceElement;\n    const { src, type } = srcElement;\n    const errMsg = getJsText('errorLoadingAudioFile') + ' ' + src + (type ? `( ${type})` : '');\n    const error = new Error(errMsg);\n    this.handleError(error);\n  }\n\n  /// Active player data\n\n  getActiveTrackId(): number | undefined {\n    return this.activePlayerData ? this.activePlayerData.id : undefined;\n  }\n\n  // Core handlers...\n\n  loadAudio() {\n    const activePlayerData = this.requireActivePlayerData();\n    this.state.loaded = false;\n    const source = this.hiddenPlayer.createHiddenPlayerSource({ src: activePlayerData.mediaUrl });\n    source.addEventListener('error', this.handleAudioSourceError.bind(this));\n  }\n\n  isAudioPlaying() {\n    const audio = this.audio;\n    return (\n      !!audio && audio.currentTime > 0 && !audio.paused && !audio.ended && audio.readyState > 2\n    );\n  }\n\n  isPlaying() {\n    return this.state.status === 'playing';\n  }\n\n  pauseCurrentPlayer() {\n    if (this.isAudioPlaying()) {\n      const audio = this.requireAudio();\n      audio.pause();\n    }\n    if (this.isPlaying()) {\n      this.state.status = 'paused';\n      this.updateStateInDom();\n      this.saveFloatingPlayerState();\n    }\n  }\n\n  playCurrentPlayer() {\n    const audio = this.requireAudio();\n    const activePlayerData = this.requireActivePlayerData();\n    if (this.isAudioPlaying()) {\n      return;\n    }\n    if (audio.ended || this.state.position > activePlayerData.duration - 0.1) {\n      // Start from the begining\n      this.state.position = 0;\n      audio.load();\n    }\n    this.updateTrackPosition();\n    this.callbacks.invokeUpdate({\n      floatingPlayerState: this.state,\n      activePlayerData: this.activePlayerData,\n    });\n\n    audio.currentTime = this.state.position || 0;\n    const result = audio.play();\n    result.catch((err) => {\n      if (err.name === 'NotAllowedError') {\n        //  play() failed because the user didn't interact with the document first. -> Just cancel\n        this.state.status = undefined;\n        this.updateStateInDom();\n      } else {\n        this.handleError(err);\n      }\n    });\n  }\n\n  /** Play button click handler */\n  trackPlayHandler(_ev: MouseEvent) {\n    const isPlaying = this.isPlaying();\n    if (isPlaying) {\n      this.pauseCurrentPlayer();\n    } else {\n      this.playCurrentPlayer();\n    }\n  }\n\n  // Active player track data...\n\n  ensureAudioLoaded() {\n    if (!this.state.loaded || !this.hasAudio() || !this.hasAudioSource) {\n      this.loadAudio();\n    }\n  }\n\n  setActivePlayerData(activePlayerData: ActivePlayerData, position?: number) {\n    if (this.activePlayerData?.id !== activePlayerData.id) {\n      if (this.activePlayerData && this.isPlaying) {\n        this.pauseCurrentPlayer();\n      }\n      this.state.loaded = false;\n      if (position != null) {\n        this.state.position = position;\n      }\n      this.removeAudio();\n      this.activePlayerData = activePlayerData;\n    }\n    this.saveActivePlayerData();\n    this.updateActivePlayerDataInDom();\n    this.ensureAudioLoaded();\n  }\n\n  setActiveTrack(trackNode: HTMLElement, position?: number) {\n    const activePlayerData = getActivePlayerDataFromTrackNode(trackNode);\n    this.setActivePlayerData(activePlayerData, position);\n  }\n\n  clearActiveData() {\n    this.activePlayerData = undefined;\n    this.hideFloatingPlayer();\n    this.removeAudio();\n  }\n\n  // Update related data\n\n  sendIncrementPlayedCount(id: number) {\n    const url = `/api/v1/tracks/${id}/increment-played-count/`;\n    return sendApiRequest(url, 'POST');\n  }\n\n  incrementPlayedCount() {\n    const activePlayerData = this.requireActivePlayerData();\n    if (this.incrementing) {\n      return;\n    }\n    this.incrementing = true;\n    return this.sendIncrementPlayedCount(activePlayerData.id)\n      .then(({ played_count }: { played_count?: number }) => {\n        if (played_count != null) {\n          // Re-update local data with server data...\n          this.callbacks.invokeIncrement({ count: played_count, activePlayerData });\n        }\n        // TODO: Update other instances of this track on the page (eg, in player, or in other track listings)?\n      })\n      .catch((err) => {\n        // eslint-disable-next-line no-console\n        console.error('[FloatingPlayerClass:incrementPlayedCount:sendIncrementPlayedCount] error', {\n          err,\n        });\n        debugger; // eslint-disable-line no-debugger\n        commonNotify.showError(err);\n        // Increment locally (?)\n        this.callbacks.invokeIncrement({ activePlayerData });\n        throw err;\n      })\n      .finally(() => {\n        this.incrementing = false;\n      });\n  }\n\n  sendToggleFavoriteRequest(id: number, value: boolean) {\n    const url = `/api/v1/tracks/${id}/toggle-favorite/`;\n    return sendApiRequest(url, 'POST', { value });\n  }\n\n  toggleFavorite() {\n    const activePlayerData = this.requireActivePlayerData();\n    const id = activePlayerData.id;\n    this.toggleFavoriteById(id);\n  }\n\n  toggleFavoriteById(id: number) {\n    if (this.toggling[id]) {\n      return;\n    }\n    const activePlayerData = this.activePlayerData;\n    const isCurrent = id === activePlayerData?.id;\n    const trackInfo = localTrackInfoDb.getById(id);\n    const favorite = !trackInfo.favorite;\n    localTrackInfoDb.updateFavorite(id, favorite);\n    if (isCurrent) {\n      activePlayerData.favorite = favorite;\n      this.updateActivePlayerDataInDom();\n      this.saveActivePlayerData();\n    }\n    this.callbacks.invokeFavorite({ id, favorite });\n    if (window.isAuthenticated) {\n      this.toggling[id] = true;\n      this.sendToggleFavoriteRequest(id, favorite)\n        .then((results: { favorite_track_ids: number[] }) => {\n          const { favorite_track_ids } = results;\n          localTrackInfoDb.updateFavoritesByTrackIds(favorite_track_ids);\n          this.callbacks.invokeFavorites({\n            favorites: favorite_track_ids,\n          });\n          const msgId = favorite ? 'trackAddedToFavorites' : 'trackRemovedFromFavorites';\n          commonNotify.showSuccess(getJsText(msgId));\n        })\n        .catch((err) => {\n          // eslint-disable-next-line no-console\n          console.error('[FloatingPlayerClass:toggleFavoriteById] error', {\n            err,\n          });\n          debugger; // eslint-disable-line no-debugger\n          commonNotify.showError(err);\n        })\n        .finally(() => {\n          this.toggling[id] = false;\n        });\n    }\n  }\n\n  seekPosition(position: number) {\n    this.seeking = true;\n    const audio = this.requireAudio();\n    audio.currentTime = position || 0;\n    this.state.position = position;\n    this.updateTrackPosition();\n    this.saveFloatingPlayerState();\n    const activePlayerData = this.requireActivePlayerData();\n    this.callbacks.invokeUpdate({ floatingPlayerState: this.state, activePlayerData });\n    setTimeout(() => {\n      this.seeking = false;\n    }, 150);\n  }\n\n  seekRewind() {\n    const position = Math.max(0, this.state.position - seekTimeSec);\n    this.seekPosition(position);\n  }\n\n  seekForward() {\n    const activePlayerData = this.requireActivePlayerData();\n    const { duration } = activePlayerData;\n    const position = Math.min(duration, this.state.position + seekTimeSec);\n    this.seekPosition(position);\n  }\n\n  seekBarHandle(ev: Event) {\n    const activePlayerData = this.requireActivePlayerData();\n    const { duration } = activePlayerData;\n    if (!duration) {\n      return;\n    }\n    const node = ev.currentTarget as HTMLInputElement;\n    const value = Number(node.value);\n    const position = (value * duration) / 100;\n    this.seekPosition(position);\n    if (!this.isPlaying()) {\n      this.playCurrentPlayer();\n    }\n  }\n\n  // Initilization...\n\n  initDomNode() {\n    const domNode = this.requireDomNode();\n    const seekBarNode = domNode.querySelector<HTMLInputElement>('.seekBar');\n    if (seekBarNode) {\n      seekBarNode.addEventListener('input', this.seekBarHandle.bind(this));\n    }\n    const hideButton = domNode.querySelector<HTMLButtonElement>('.track-control-hide');\n    if (hideButton) {\n      hideButton.addEventListener('click', this.hideFloatingPlayer.bind(this));\n    }\n    const controls = domNode.querySelectorAll<HTMLButtonElement>('.track-control');\n    controls.forEach((node) => {\n      const { dataset } = node;\n      const { inited, controlId } = dataset;\n      if (inited) {\n        return;\n      }\n      if (controlId === 'rewind') {\n        node.addEventListener('click', this.seekRewind.bind(this));\n      }\n      if (controlId === 'forward') {\n        node.addEventListener('click', this.seekForward.bind(this));\n      }\n      if (controlId === 'toggleFavorite') {\n        node.addEventListener('click', this.toggleFavorite.bind(this));\n      }\n      if (controlId === 'play') {\n        node.addEventListener('click', this.trackPlayHandler.bind(this));\n      }\n      dataset.inited = TRUE;\n    });\n    this.inited = true;\n  }\n}\n","import { ActivePlayerData } from './ActivePlayerData';\n\nexport function getActivePlayerDataFromTrackNode(trackNode: HTMLElement) {\n  const { dataset } = trackNode;\n  const id = Number(dataset.trackId);\n  const favorite = Boolean(dataset.favorite);\n  // const status = dataset.status;\n  const duration = parseFloat((dataset.trackDuration || '0').replace(',', '.'));\n  // const position = parseFloat((dataset.position || '0').replace(',', '.'));\n  const mediaUrl = dataset.trackMediaUrl;\n  const imageNode = trackNode.querySelector<HTMLImageElement>('img.card-img');\n  const imageUrl = imageNode?.getAttribute('src');\n  const titleNode = trackNode.querySelector<HTMLElement>('.post-title');\n  const title = titleNode?.innerHTML;\n  const activePlayerData: ActivePlayerData = {\n    id,\n    title,\n    imageUrl,\n    mediaUrl,\n    duration,\n    favorite,\n  };\n  return activePlayerData;\n}\n","import { FloatingPlayer } from './FloatingPlayerClass';\n\n// Singleton\nexport const floatingPlayer = new FloatingPlayer();\n\nexport function initFloatingPlayer() {\n  // console.log('[floatingPlayer:initFloatingPlayer]');\n}\n"],"names":["getErrorText","error","Array","isArray","map","this","bind","join","Error","message","String","quoteHtmlAttr","str","preserveCR","crValue","replace","formatDuration","time","sec","min","hrs","items","Math","floor","val","idx","padStart","shift","filter","Boolean","localTrackInfoDb","updatePlayedCount","id","playedCount","now","_now","Date","trackInfo","getOrCreate","isNaN","lastPlayed","lastUpdated","insert","err","console","updatePosition","position","updateFavorite","favorite","_toggleInFavoritesIndex","updateFavoritesByTrackIds","ids","_getIndex","forEach","isFavorite","includes","_setFavoritesIndex","save","createNewRecord","getById","window","localStorage","setItem","list","Number","JSON","stringify","trackInfoToJsonStr","_addToIndex","getFavorites","getAll","it","getItem","parse","trackInfoFromJsonStr","_getFavoritesIndex","data","_","favoritesIndex","_addToFavoritesIndex","push","_removeFromFavoritesIndex","checkId","value","_setIndex","index","_removeFromIndex","_toggleInIndex","delete","removeItem","clearAll","getJsText","textNode","document","body","querySelector","warn","innerHTML","trim","icons","success","info","commonNotify","notifyRoot","undefined","timeoutDelay","inited","removeNotify","notifyData","node","handler","classList","remove","clearTimeout","setTimeout","removeChild","_e","showNotify","mode","text","content","ensureInit","createElement","add","nodeIcon","appendChild","nodeText","requestAnimationFrame","removeNotifyHandler","addEventListener","showInfo","showSuccess","showWarn","showError","showDemo","init","createDomNode","rootNode","setAttribute","storageActivePlayerDataId","saveActivePlayerData","convertActivePlayerDataToJsonStr","loadActivePlayerData","convertActivePlayerDataFromJsonStr","sendApiRequest","url","method","requestData","headers","Accept","cookieId","cookiesList","cookie","split","i","length","s","decodeURIComponent","getCookie","fetch","credentials","then","res","ok","status","statusText","json","errMsg","detail","catch","floatToStr","num","toFixed","storageFloatingPlayerStateId","saveFloatingPlayerState","saveData","lastTimestamp","loaded","convertFloatingPlayerStateToJsonStr","loadFloatingPlayerState","convertFloatingPlayerStateFromJsonStr","allPlayers","domNode","setParentDomNode","parentDomNode","requireParentDomNode","ensureHiddenPlayer","hiddenPlayerNode","audio","hasAudio","audioNode","hasSource","sourceNode","ensureHiddenPlayerAudio","createHiddenPlayerSource","opts","removeHiddenPlayerSource","type","src","removeHiddenPlayerAudio","pause","from","getElementsByTagName","onPlayStartCallbacks","onPlayStopCallbacks","onUpdateCallbacks","onIncrementCallbacks","onFavoritesCallbacks","onFavoriteCallbacks","onErrorCallbacks","addPlayStartCallback","cb","addPlayStopCallback","addUpdateCallback","addIncrementCallback","addFavoriteCallback","addFavoritesCallback","addErrorCallback","invokePlayStart","activePlayerData","invokePlayStop","invokeUpdate","invokeIncrement","invokeFavorite","invokeFavorites","invokeError","TRUE","callbacks","FloatingPlayerCallbacks","hiddenPlayer","HiddenPlayer","state","toggling","seeking","initDomNode","updateAll","ensureAudioLoaded","playCurrentPlayer","requireAudio","handleAudioCanPlay","handleAudioPlay","handleAudioTimeUpdate","handleAudioEnded","removeAudio","hasAudioSource","requireDomNode","requireActivePlayerData","showFloatingPlayer","visible","updateStateInDom","hideFloatingPlayer","updateActivePlayerDataInDom","titleNode","durationNode","imageNode","dataset","innerText","title","duration","style","backgroundImage","imageUrl","querySelectorAll","toggle","updatePositionInDom","seekBarNode","progress","setProperty","calculateProgress","ratio","updateTrackPosition","timeNode","ev","currAudio","currentTarget","currentTime","floatingPlayerState","_ev","incrementPlayedCount","handleError","errName","name","handleAudioSourceError","srcElement","getActiveTrackId","loadAudio","mediaUrl","isAudioPlaying","paused","ended","readyState","isPlaying","pauseCurrentPlayer","load","play","trackPlayHandler","setActivePlayerData","setActiveTrack","trackNode","trackId","parseFloat","trackDuration","trackMediaUrl","getAttribute","getActivePlayerDataFromTrackNode","clearActiveData","sendIncrementPlayedCount","incrementing","played_count","count","finally","sendToggleFavoriteRequest","toggleFavorite","toggleFavoriteById","isCurrent","isAuthenticated","results","favorite_track_ids","favorites","msgId","seekPosition","seekRewind","max","seekForward","seekBarHandle","hideButton","controlId","floatingPlayer","FloatingPlayer","currentTrackPlayer","floatingPlayerUpdate","getTrackNode","timeFormatted","floatingPlayerPlay","floatingPlayerStop","find","updateIncrementCallback","updatedPlayedCount","strValue","valueNode","closest","updateTrackPlayedCount","stopPreviousPlayer","playingId","isFloatingPlaying","contains","updateTrackFavorite","isCurrentFavorite","updateSingleFavoriteCallback","updateFavoritesCallback","initTrackPlayerNode","calculateAndUpdateTrackPosition"],"sourceRoot":""}