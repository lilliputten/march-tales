{"version":3,"file":"scripts.js","mappings":"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","sources":["webpack://march-tales/./src/assets/helpers/CommonHelpers.js","webpack://march-tales/./src/assets/CommonNotify/CommonNotifySingleton.ts","webpack://march-tales/./src/assets/helpers/getJsText.ts","webpack://march-tales/./src/assets/helpers/sendApiRequest.ts","webpack://march-tales/./src/assets/track-blocks/localTrackInfoDb.ts","webpack://march-tales/./src/assets/track-blocks/TrackInfo.ts","webpack://march-tales/./src/assets/entities/ActivePlayerData/ActivePlayerData.ts","webpack://march-tales/./src/assets/entities/FloatingPlayer/FloatingPlayerState.ts","webpack://march-tales/./src/assets/entities/FloatingPlayer/HiddenPlayer.ts","webpack://march-tales/./src/assets/entities/FloatingPlayer/FloatingPlayerClass.ts","webpack://march-tales/./src/assets/entities/ActivePlayerData/getActivePlayerDataFromTrackNode.ts","webpack://march-tales/./src/assets/entities/FloatingPlayer/floatingPlayer.ts","webpack://march-tales/./src/assets/track-blocks/tracksPlayer.ts"],"sourcesContent":["// @ts-check\n\nexport function NOOP() {}\n\n/** Compare two arrays with scalar (number, string, boolean) values\n * @param {(number | string | boolean)[]} a1\n * @param {(number | string | boolean)[]} a2\n * @return {boolean}\n */\nexport function compareArrays(a1, a2) {\n  if (!a1 || !a1) {\n    return a1 === a2;\n  }\n  if (a1.length !== a2.length) {\n    return false;\n  }\n  // Compare all the items...\n  for (let i = 0; i < a1.length; i++) {\n    if (a1[i] !== a2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/** getErrorText - Return plain text for error.\n * @param {string|Error|string[]|Error[]} error - Error or errors list.\n * @return {string}\n */\nexport function getErrorText(error) {\n  if (!error) {\n    return;\n  }\n  if (Array.isArray(error)) {\n    return error.map(this.getErrorText.bind(this)).join('\\n');\n  }\n  if (error instanceof Error) {\n    error = error.message;\n  } else if (typeof error !== 'string') {\n    // TODO?\n    error = String(error);\n  }\n  return error;\n}\n\n/** quoteHtmlAttr -- quote all invalid characters for html\n * @param {string} str\n * @param {boolean} [preserveCR]\n */\nexport function quoteHtmlAttr(str, preserveCR) {\n  const crValue = preserveCR ? '&#13;' : '\\n';\n  return (\n    String(str) // Forces the conversion to string\n      .replace(/&/g, '&amp;') // This MUST be the 1st replacement\n      .replace(/'/g, '&apos;') // The 4 other predefined entities, required\n      .replace(/\"/g, '&quot;')\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;')\n      // You may add other replacements here for HTML only (but it's not\n      // necessary). Or for XML, only if the named entities are defined in its\n      // DTD.\n      .replace(/\\r\\n/g, crValue) // Must be before the next replacement\n      .replace(/[\\r\\n]/g, crValue)\n  );\n}\n\n/** htmlToElement -- Create dom node instance from html string\n * @param {string} html - Html representing a single element\n * @return {HTMLElement}\n */\nexport function htmlToElement(html) {\n  const template = document.createElement('template');\n  if (Array.isArray(html)) {\n    html = html.join('');\n  }\n  html = html.trim(); // Never return a text node of whitespace as the result\n  template.innerHTML = html;\n  const content = template.content;\n  return /** @type HTMLElement */ (content.firstChild);\n}\n\n/** htmlToElements -- Convert text html representation to HTMLCollection object\n * @param {string|string[]} html\n * @return {HTMLCollection}\n */\nexport function htmlToElements(html) {\n  const template = document.createElement('template');\n  if (Array.isArray(html)) {\n    html = html.join('');\n  }\n  html = html.trim(); // Never return a text node of whitespace as the result\n  template.innerHTML = html;\n  const content = template.content;\n  return content.children;\n}\n\n/** updateNodeContent -- Replace all inner dom node content.\n * @param {Element} node\n * @param {THtmlContent} content\n */\nexport function updateNodeContent(node, content) {\n  if (!node) {\n    throw new Error('Undefined node to update content');\n  }\n  if (typeof content === 'string') {\n    // Replace with string content...\n    node.innerHTML = content;\n  } else if (Array.isArray(content)) {\n    // Replace multiple elements...\n    node.replaceChildren.apply(node, content);\n  } else {\n    // Replace single element...\n    node.replaceChildren(content);\n  }\n}\n\n/** decodeQuery\n * @param {string | string[]} qs\n * @param {string} [sep]\n * @param {string} [eq]\n * @param {any} [options]\n * @returns {{}}\n */\nexport function decodeQuery(qs, sep, eq, options) {\n  sep = sep || '&';\n  eq = eq || '=';\n  /** @type {Record<string, unknown> | unknown[]} */\n  const obj = {};\n  if (typeof qs !== 'string' || qs.length === 0) {\n    return obj;\n  }\n  const regexp = /\\+/g;\n  qs = qs.split(sep);\n  let maxKeys = 1000;\n  if (options && typeof options.maxKeys === 'number') {\n    maxKeys = options.maxKeys;\n  }\n  let len = qs.length;\n  // maxKeys <= 0 means that we should not limit keys count\n  if (maxKeys > 0 && len > maxKeys) {\n    len = maxKeys;\n  }\n  for (let i = 0; i < len; ++i) {\n    const x = qs[i].replace(regexp, '%20'),\n      idx = x.indexOf(eq);\n    let kstr, vstr;\n    if (idx >= 0) {\n      kstr = x.substring(0, idx);\n      vstr = x.substring(idx + 1);\n    } else {\n      kstr = x;\n      vstr = '';\n    }\n    const k = decodeURIComponent(kstr);\n    const v = decodeURIComponent(vstr);\n    const it = obj[k];\n    if (!Object.prototype.hasOwnProperty.call(obj, k)) {\n      obj[k] = v;\n    } else if (Array.isArray(it)) {\n      it.push(v);\n    } else {\n      obj[k] = [it, v];\n    }\n  }\n  return obj;\n}\n\n/** parseQuery -- Parse url query string (in form `?xx=yy&...` or `xx=yy&...`)\n * @param {string} search  - Query string\n * @return {Record<string, string>} query - Query object\n */\nexport function parseQuery(search) {\n  if (!search) {\n    return {};\n  }\n  if (search.indexOf('?') === 0) {\n    search = search.substring(1);\n  }\n  return decodeQuery(search);\n}\n\n/** makeQuery\n * @param {Record<string, string | number | boolean> | {}} params\n * @param {{ addQuestionSymbol?: boolean; useEmptyStrings?: boolean; useUndefinedValues?: boolean }} opts\n * @returns {string}\n */\nexport function makeQuery(params, opts = {}) {\n  let url = Object.entries(params)\n    .map(([id, val]) => {\n      const valStr = String(val);\n      if (val == undefined && !opts.useUndefinedValues) {\n        return undefined;\n      }\n      if (valStr === '' && !opts.useEmptyStrings) {\n        return undefined;\n      }\n      return encodeURI(id) + '=' + encodeURI(String(val == undefined ? '' : val));\n    })\n    .filter(Boolean)\n    .join('&');\n  if (opts.addQuestionSymbol && url) {\n    url = '?' + url;\n  }\n  return url;\n}\n\n/** Dynamically load external script\n * @param {string} url\n * @return {Promise<Event>}\n */\nexport function addScript(url) {\n  return new Promise((resolve, reject) => {\n    // document.write('<script src=\"' + url + '\"></script>');\n    const script = document.createElement('script');\n    script.setAttribute('src', url);\n    script.addEventListener('load', resolve);\n    script.addEventListener('error', (event) => {\n      const {\n        target,\n        // srcElement,\n      } = event;\n      // @ts-ignore\n      const { href, baseURI } = target;\n      const error = new Error(`Cannot load script resurce by url '${url}'`);\n      // eslint-disable-next-line no-console\n      console.error('[CommonHelpers:addScript]', {\n        error,\n        url,\n        href,\n        baseURI,\n        target,\n        event,\n      });\n      // eslint-disable-next-line no-debugger\n      debugger;\n      reject(error);\n    });\n    document.head.appendChild(script);\n  });\n}\n\n/** Dynamically load external css\n * @param {string} url\n * @return {Promise<unknown>}\n */\nexport function addCssStyle(url) {\n  return new Promise((resolve, reject) => {\n    // Try to find exists node...\n    const testNode = document.head.querySelector(\n      'link[href=\"' + url + '\"], link[data-url=\"' + url + '\"]',\n    );\n    if (testNode) {\n      // Style already found!\n      return resolve({ type: 'already-loaded', target: testNode });\n    }\n    // reject(new Error('test')); // DEBUG: Test errors catching\n    const node = document.createElement('link');\n    node.setAttribute('href', url);\n    node.setAttribute('type', 'text/css');\n    node.setAttribute('rel', 'stylesheet');\n    node.setAttribute('data-url', url);\n    node.addEventListener('load', resolve);\n    node.addEventListener('error', (event) => {\n      const {\n        target,\n        // srcElement,\n      } = event;\n      // @ts-ignore\n      const { href, baseURI } = target;\n      const error = new Error(`Cannot load css resurce by url '${url}'`);\n      // eslint-disable-next-line no-console\n      console.error('[CommonHelpers:addCssStyle]', {\n        error,\n        url,\n        href,\n        baseURI,\n        target,\n        event,\n      });\n      // eslint-disable-next-line no-debugger\n      debugger;\n      reject(error);\n    });\n    document.head.appendChild(node);\n  });\n}\n\n/**\n * @param {HTMLSelectElement} node\n * @param {(string|number)[]} values\n */\nexport function setMultipleSelectValues(node, values) {\n  const strValues = values.map(String);\n  const options = Array.from(node.options);\n  options.forEach((item) => {\n    const { value, selected } = item;\n    const isSelected = strValues.includes(value);\n    if (isSelected !== selected) {\n      item.selected = isSelected;\n    }\n  });\n}\n\n/** processMultipleRequestErrors\n * @param {Response[]} resList\n * @return {Error[]}\n */\nexport function processMultipleRequestErrors(resList) {\n  return /** @type {Error[]} */ (\n    resList\n      .map((res) => {\n        if (!res.ok) {\n          return new Error(`Can't load url '${res.url}': ${res.statusText}, ${res.status}`);\n        }\n      })\n      .filter(Boolean)\n  );\n}\n\n/**\n * @param {number} n\n * @param {TNormalizedFloatStrOptions} [opts={}]\n * @returns {string}\n */\nexport function normalizedFloatStr(n, opts = {}) {\n  const {\n    // prettier-ignore\n    fixedPoint = 2,\n    stripFixedZeros = true,\n  } = opts;\n  let str = n.toFixed(fixedPoint);\n  if (stripFixedZeros) {\n    str = str.replace(/\\.*0+$/, '');\n  }\n  return str;\n}\n/**\n * @param {number} size\n * @param {TGetApproxSizeOptions} [opts={}]\n * @returns {[number | string, string]}\n */\nexport function getApproxSize(size, opts = {}) {\n  const { normalize } = opts;\n  const levels = [\n    'B', // Bytes\n    'K', // Kilobytes\n    'M', // Megabytes\n    'G', // Gigabites\n  ];\n  const lastLevel = levels.length - 1;\n  const range = 1024;\n  let level = 0;\n  while (level < lastLevel) {\n    if (size < range) {\n      break;\n    }\n    size /= range;\n    level++;\n  }\n  const currLevelStr = levels[level];\n  /** Result: final number or normalized representation (depends on option's `normalize`)\n   * @type {number | string}\n   */\n  let result = size;\n  if (normalize) {\n    const normalizeOpts = typeof normalize === 'object' ? normalize : undefined;\n    result = normalizedFloatStr(size, normalizeOpts);\n  }\n  return [result, currLevelStr];\n}\n\n/** @param {number} time - Time duration, ms\n * @return {string}\n */\nexport function formatDuration(time) {\n  const sec = time / 1000;\n  const min = sec / 60;\n  const hrs = min / 60;\n  const days = hrs / 24;\n  const srcItems = [\n    // prettier-ignore\n    days,\n    hrs % 24,\n    min % 60,\n    sec % 60,\n  ];\n  const items = srcItems.map(Math.floor).map((val, idx) => {\n    // Not mins and secs and empty...\n    if (idx < 2 && !val) {\n      return undefined;\n    }\n    // Hours, mins, secs...\n    if (idx >= 1) {\n      return String(val).padStart(2, '0');\n    }\n    // Days...\n    if (!idx) {\n      return String(val) + 'd';\n    }\n  });\n  /* console.log('[CommonHelpers:formatDuration]', {\n   *   sec,\n   *   min,\n   *   hrs,\n   *   days,\n   *   items,\n   *   srcItems,\n   *   time,\n   * });\n   */\n  const daysStr = items.shift();\n  return [\n    // prettier-ignore\n    daysStr,\n    items.filter(Boolean).join(':'),\n  ]\n    .filter(Boolean)\n    .join(' ');\n}\n\n/** @param {string} str */\nexport function getAsyncHash(str) {\n  const encoder = new TextEncoder();\n  const buf = encoder.encode(str);\n  return crypto.subtle.digest('SHA-256', buf).then((aryBuf) => {\n    const ary = new Uint8Array(aryBuf);\n    const res = Array.from(ary)\n      .map((x) => x.toString(16).padStart(2, '0'))\n      .join('');\n    return res;\n  });\n}\n\n/** @param {string} cookieId */\nexport function getCookie(cookieId) {\n  const cookiesStr = document.cookie;\n  const cookiesList = cookiesStr.split(';'); // .map((s) => s.trim().split('='));\n  for (let i = 0; i < cookiesList.length; i++) {\n    const s = cookiesList[i];\n    const [id, val] = s.trim().split('=').map(decodeURIComponent);\n    if (id === cookieId) {\n      return val;\n    }\n  }\n  return undefined;\n}\n\n/**\n * @param {string} id\n * @param {string} val\n * @param {number} maxAgeSecs -- Seconds of expire period\n */\nexport function setCookie(id, val, maxAgeSecs) {\n  const cookieVal = [id, val || ''].map(encodeURIComponent).join('=');\n  const parts = [\n    // prettier-ignore\n    cookieVal,\n  ];\n  if (maxAgeSecs) {\n    parts.push('max-age=' + maxAgeSecs);\n  }\n  const fullCookie = parts.filter(Boolean).join(';');\n  document.cookie = fullCookie;\n}\n","import * as CommonHelpers from '../helpers/CommonHelpers';\n\n/** Toast types */\ntype TMode = 'info' | 'error' | 'warn' | 'success';\n\n/** Icon shapes (move to constants?) */\nconst icons: Record<TMode, string> = {\n  success: 'bi-check',\n  error: 'bi-exclamation-triangle-fill',\n  warn: 'bi-bell-fill',\n  info: 'bi-info-lg',\n};\n\nconst iconClassNamePrefix = 'bi';\n\ninterface TNotifyData {\n  node: HTMLDivElement;\n  handler?: TSetTimeout;\n}\n\n// Define module...\nclass CommonNotify {\n  notifyRoot: HTMLDivElement = undefined;\n\n  timeoutDelay = 3000;\n\n  inited = false;\n\n  // Methods...\n\n  removeNotify(notifyData: TNotifyData) {\n    const { node, handler } = notifyData;\n    // Play animation...\n    node.classList.remove('active');\n    if (handler) {\n      clearTimeout(handler);\n      notifyData.handler = undefined;\n    }\n    setTimeout(() => {\n      // ...And remove node (TODO: Check if node still exists in dom tree)...\n      try {\n        this.notifyRoot.removeChild(node);\n      } catch (\n        _e // eslint-disable-line @typescript-eslint/no-unused-vars\n      ) {\n        // NOOP\n      }\n    }, 250); // Value of `var(--common-animation-time)`\n  }\n\n  /** showNotify\n   * @param {'info' | 'error' | 'warn' | 'success'} mode - Message type ('info' is default)\n   * @param {string|Error} text - Message content\n   */\n  showNotify(mode: TMode, text: string | Error) {\n    this.ensureInit();\n    if (!text) {\n      // If only one parameters passed assume it as message with default type\n      text = mode;\n      mode = 'info';\n    }\n    let content: string;\n    if (text instanceof Error) {\n      // Convert error object to the plain text...\n      content = CommonHelpers.getErrorText(text);\n    } else {\n      content = String(text);\n    }\n    // Create node...\n    const node = document.createElement('div');\n    node.classList.add('notify');\n    node.classList.add('notify-' + mode);\n    // Add icon...\n    const nodeIcon = document.createElement('span');\n    nodeIcon.classList.add('icon');\n    nodeIcon.classList.add(iconClassNamePrefix);\n    nodeIcon.classList.add(icons[mode]);\n    node.appendChild(nodeIcon);\n    // Add text...\n    const nodeText = document.createElement('div');\n    nodeText.classList.add('text');\n    nodeText.innerHTML = content;\n    node.appendChild(nodeText);\n    this.notifyRoot.appendChild(node);\n    // Play appearing animation...\n    window.requestAnimationFrame(() => {\n      setTimeout(() => {\n        node.classList.add('active');\n      }, 10);\n    });\n    // Remove node after delay...\n    const notifyData: TNotifyData = { node, handler: undefined };\n    const removeNotifyHandler = this.removeNotify.bind(this, notifyData);\n    notifyData.handler = setTimeout(removeNotifyHandler, this.timeoutDelay);\n    // Stop & restore timer on mouse in and out events...\n    node.addEventListener('mouseenter', () => {\n      // Clear timer...\n      clearTimeout(notifyData.handler);\n    });\n    node.addEventListener('mouseleave', () => {\n      // Resume timer...\n      notifyData.handler = setTimeout(removeNotifyHandler, this.timeoutDelay);\n    });\n    // Click handler...\n    node.addEventListener('click', removeNotifyHandler);\n  }\n\n  // Some shorthands...\n\n  /** @param {string|Error} text - Message content */\n  showInfo(text: string | Error) {\n    this.showNotify('info', text);\n  }\n\n  /** @param {string|Error} text - Message content */\n  showSuccess(text: string | Error) {\n    this.showNotify('success', text);\n  }\n\n  /** @param {string|Error} text - Message content */\n  showWarn(text: string | Error) {\n    this.showNotify('warn', text);\n  }\n\n  /** @param {string|Error} text - Message content */\n  showError(text: string | Error) {\n    this.showNotify('error', text);\n  }\n\n  // Demo...\n\n  showDemo() {\n    // DEBUG: Show sample notifiers...\n    this.showInfo('Info');\n    this.showSuccess('Success');\n    this.showWarn('Warn');\n    this.showError('Error');\n  }\n\n  // Initialization...\n\n  /** Ensure the modal has initiazlized */\n  ensureInit() {\n    this.init();\n  }\n\n  createDomNode() {\n    // TODO: To use bootstrap toasts?\n    const rootNode = document.body;\n    const notifyRoot = document.createElement('div');\n    notifyRoot.classList.add('notify-root');\n    notifyRoot.setAttribute('id', 'notify-root');\n    rootNode.appendChild(notifyRoot);\n    this.notifyRoot = notifyRoot;\n  }\n\n  /** Initialize nodule. */\n  init() {\n    if (!this.inited) {\n      this.createDomNode();\n      this.inited = true;\n    }\n  }\n}\n\n// Create and export singletone\nexport const commonNotify = new CommonNotify();\n\n// commonNotify.init();\n","import { quoteHtmlAttr } from '../helpers/CommonHelpers';\n\nexport function getJsText(id: string) {\n  const textNode = document.body.querySelector('#js-texts #' + id);\n  if (!textNode) {\n    // eslint-disable-next-line no-console\n    console.warn('[getJsText] Can not find js text node for id:', id);\n  }\n  const text = textNode?.innerHTML || id;\n  return quoteHtmlAttr(text).trim();\n}\n","import { getCookie } from '../helpers/CommonHelpers';\nimport * as CommonHelpers from '../helpers/CommonHelpers';\nimport { getJsText } from './getJsText';\n\nexport function sendApiRequest(\n  url: string,\n  method: string = 'GET',\n  requestData: unknown = undefined,\n) {\n  const csrftoken = getCookie('csrftoken');\n  // const sessionId = getCookie('sessionid');\n  // const url = `/api/v1/tracks/${trackId}/toggle-favorite/`;\n  const headers = {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n    'X-CSRFToken': csrftoken,\n    // Credentials: 'include',\n    // Cookie: csrftoken && `csrftoken=${csrftoken}`,\n    // 'X-Session-Token': sessionId, // X-Session-Token\n    // 'Accept-Language': 'ru', // django_language=ru; content-language: ru;\n  };\n  /* console.log('[sendApiRequest] start', {\n   *   url,\n   *   method,\n   *   requestData,\n   *   headers,\n   * });\n   */\n  return fetch(url, {\n    method,\n    headers,\n    credentials: 'include',\n    body: requestData && JSON.stringify(requestData),\n  })\n    .then(async (res) => {\n      const { ok, status, statusText } = res;\n      // TODO: Check is it json?\n      let data: unknown & { detail?: string };\n      try {\n        data = await res.json();\n      } catch (\n        _e // eslint-disable-line @typescript-eslint/no-unused-vars\n      ) {\n        // NOOP\n      }\n      if (!ok || status !== 200) {\n        const errMsg = [getJsText('fetchError') + ' ' + status, data?.detail || statusText]\n          .filter(Boolean)\n          .join(': ');\n        // eslint-disable-next-line no-console\n        console.error('[sendApiRequest]', errMsg, {\n          ok,\n          data,\n          statusText,\n          status,\n          res,\n          url,\n          requestData,\n          method,\n          headers,\n        });\n        debugger; // eslint-disable-line no-debugger\n        throw new Error(errMsg);\n      }\n      /* console.log('[sendApiRequest] Got json', {\n       *   data,\n       *   url,\n       *   requestData,\n       *   method,\n       *   headers,\n       * });\n       */\n      return data as unknown;\n    })\n    .catch((err) => {\n      const errMsg = [getJsText('failedApiRequest'), CommonHelpers.getErrorText(err)]\n        .filter(Boolean)\n        .join(': ');\n      // eslint-disable-next-line no-console\n      console.error('[sendApiRequest]', errMsg, {\n        err,\n        url,\n        requestData,\n        method,\n        headers,\n      });\n      debugger; // eslint-disable-line no-debugger\n      throw new Error(errMsg);\n    });\n}\n","import { TrackInfo, trackInfoFromJsonStr, trackInfoToJsonStr } from './TrackInfo';\n\nclass LocalTrackInfoDb {\n  // End-user api\n\n  updatePlayedCount(id: number, playedCount?: number, now?: number) {\n    try {\n      const _now = now || Date.now();\n      const trackInfo = this.getOrCreate(id);\n      if (isNaN(playedCount)) {\n        trackInfo.playedCount = trackInfo.playedCount ? trackInfo.playedCount + 1 : 1;\n      } else {\n        trackInfo.playedCount = playedCount;\n      }\n      trackInfo.lastPlayed = _now;\n      trackInfo.lastUpdated = _now;\n      this.insert(trackInfo);\n      // this.updateEvents.broadcast(TracksInfoDbUpdate(trackInfo));\n      return trackInfo;\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error('[LocalTrackInfoDb:incrementPlayedCount]', err.message, {\n        err,\n        id,\n      });\n      debugger; // eslint-disable-line no-debugger\n      throw err;\n    }\n  }\n\n  updatePosition(id: number, position: number, now?: number) {\n    try {\n      const _now = now || Date.now();\n      const trackInfo = this.getOrCreate(id);\n      trackInfo.position = position;\n      trackInfo.lastPlayed = _now; // ???\n      trackInfo.lastUpdated = _now;\n      this.insert(trackInfo);\n      // this.updateEvents.broadcast(TracksInfoDbUpdate(trackInfo));\n      return trackInfo;\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error('[LocalTrackInfoDb:updatePosition]', err.message, {\n        err,\n        id,\n      });\n      debugger; // eslint-disable-line no-debugger\n      throw err;\n    }\n  }\n\n  updateFavorite(id: number, favorite: boolean, now?: number) {\n    try {\n      const _now = now || Date.now();\n      const trackInfo = this.getOrCreate(id);\n      trackInfo.favorite = favorite;\n      trackInfo.lastUpdated = _now;\n      this.insert(trackInfo);\n      this._toggleInFavoritesIndex(id, favorite);\n      // this.updateEvents.broadcast(TracksInfoDbUpdate(trackInfo));\n      return trackInfo;\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error('[LocalTrackInfoDb:setFavorite]', err.message, {\n        err,\n        id,\n      });\n      debugger; // eslint-disable-line no-debugger\n      throw err;\n    }\n  }\n\n  updateFavoritesByTrackIds(ids: number[], now?: number) {\n    const _now = now || Date.now();\n    const index = this._getIndex();\n    index.forEach((id) => {\n      const isFavorite = ids.includes(id);\n      const trackInfo = this.getOrCreate(id);\n      if (trackInfo.favorite !== isFavorite) {\n        trackInfo.favorite = isFavorite;\n        trackInfo.lastUpdated = _now;\n        this.insert(trackInfo);\n      }\n    });\n    this._setFavoritesIndex(ids);\n  }\n\n  save(trackInfo: TrackInfo, now?: number) {\n    try {\n      const _now = now || Date.now();\n      trackInfo.lastPlayed = _now; // ???\n      trackInfo.lastUpdated = _now;\n      this.insert(trackInfo);\n      // this.updateEvents.broadcast(TracksInfoDbUpdate(trackInfo));\n      // const testTrackInfo = await this.getById(id);\n      return trackInfo;\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error('[LocalTrackInfoDb:save]', err.message, {\n        err,\n        trackInfo,\n      });\n      debugger; // eslint-disable-line no-debugger\n      throw err;\n    }\n  }\n\n  // Low-level api\n\n  createNewRecord(id: number) {\n    const now = Date.now();\n    const trackInfo: TrackInfo = {\n      id: id, // track.id\n      favorite: false,\n      playedCount: 0, // track.played_count (but only for current user!).\n      position: 0, // position\n      lastUpdated: now, // DateTime.now()\n      lastPlayed: 0, // DateTime.now()\n    };\n    return trackInfo;\n  }\n\n  getOrCreate(id: number) {\n    return this.getById(id) || this.createNewRecord(id);\n  }\n\n  /// Create or update the record. (Returns inserted/updated record id.)\n  insert(trackInfo: TrackInfo) {\n    const { id } = trackInfo;\n    window.localStorage.setItem('trackInfo-' + id, trackInfoToJsonStr(trackInfo));\n    this._addToIndex(id);\n  }\n\n  getFavorites() {\n    return this.getAll().filter((it) => it.favorite);\n  }\n\n  getById(id: number) {\n    const str = window.localStorage.getItem('trackInfo-' + id);\n    if (!str) {\n      return undefined;\n    }\n    return trackInfoFromJsonStr(str);\n  }\n\n  _getFavoritesIndex() {\n    try {\n      const data = window.localStorage.getItem('trackInfoFavoritesIndex');\n      return (data ? JSON.parse(data) : []) as number[];\n    } catch (\n      _ // eslint-disable-line @typescript-eslint/no-unused-vars\n    ) {\n      return [] as number[];\n    }\n  }\n\n  _setFavoritesIndex(favoritesIndex: number[]) {\n    window.localStorage.setItem('trackInfoFavoritesIndex', JSON.stringify(favoritesIndex));\n  }\n\n  _addToFavoritesIndex(id: number) {\n    const favoritesIndex = this._getFavoritesIndex();\n    if (!favoritesIndex.includes(id)) {\n      favoritesIndex.push(id);\n      this._setFavoritesIndex(favoritesIndex);\n    }\n  }\n\n  _removeFromFavoritesIndex(id: number) {\n    const favoritesIndex = this._getFavoritesIndex();\n    if (favoritesIndex.includes(id)) {\n      this._setFavoritesIndex(favoritesIndex.filter((checkId) => id !== checkId));\n    }\n  }\n\n  _toggleInFavoritesIndex(id: number, value?: boolean) {\n    if (value) {\n      this._addToFavoritesIndex(id);\n    } else {\n      this._removeFromFavoritesIndex(id);\n    }\n  }\n\n  _getIndex() {\n    try {\n      const data = window.localStorage.getItem('trackInfoIndex');\n      return (data ? JSON.parse(data) : []) as number[];\n    } catch (\n      _ // eslint-disable-line @typescript-eslint/no-unused-vars\n    ) {\n      return [] as number[];\n    }\n  }\n\n  _setIndex(index: number[]) {\n    window.localStorage.setItem('trackInfoIndex', JSON.stringify(index));\n  }\n\n  _addToIndex(id: number) {\n    const index = this._getIndex();\n    if (!index.includes(id)) {\n      index.push(id);\n      this._setIndex(index);\n    }\n  }\n\n  _removeFromIndex(id: number) {\n    const index = this._getIndex();\n    if (index.includes(id)) {\n      this._setIndex(index.filter((checkId) => id !== checkId));\n    }\n  }\n\n  _toggleInIndex(id: number, value?: boolean) {\n    if (value) {\n      this._addToIndex(id);\n    } else {\n      this._removeFromIndex(id);\n    }\n  }\n\n  getAll() {\n    const index = this._getIndex();\n    const list: TrackInfo[] = index\n      .map((id) => {\n        return this.getById(id);\n      })\n      .filter(Boolean);\n    return list;\n  }\n\n  delete(id: number) {\n    window.localStorage.removeItem('trackInfo-' + id);\n    this._removeFromIndex(id);\n  }\n\n  clearAll() {\n    const index = this._getIndex();\n    index.forEach((id) => {\n      window.localStorage.removeItem('trackInfo-' + id);\n    });\n    this._setIndex([]);\n  }\n}\n\n// Create a singleton\nexport const localTrackInfoDb = new LocalTrackInfoDb();\n","export interface TrackInfo {\n  id: number; // track.id\n  favorite: boolean;\n  playedCount: number; // track.played_count (but only for current user!).\n  position: number; // position?.inMilliseconds ?? 0\n  lastUpdated: number; // DateTime.now().millisecondsSinceEpoch <-> DateTime.fromMillisecondsSinceEpoch(ms)\n  lastPlayed: number; // DateTime.now().millisecondsSinceEpoch <-> DateTime.fromMillisecondsSinceEpoch(ms)\n}\n\nexport function trackInfoFromJsonStr(str: string) {\n  if (!str) {\n    return undefined;\n  }\n  const list: (boolean | number)[] = JSON.parse(str);\n  const [id, favorite, playedCount, position, lastUpdated, lastPlayed] = list;\n  const trackInfo: TrackInfo = {\n    id,\n    favorite: Boolean(favorite),\n    playedCount,\n    position,\n    lastUpdated,\n    lastPlayed,\n  } as TrackInfo;\n  return trackInfo;\n}\n\nexport function trackInfoToJsonStr(trackInfo: TrackInfo) {\n  const { id, favorite, playedCount, position, lastUpdated, lastPlayed } = trackInfo;\n  const list = [id, Number(favorite), playedCount, position, lastUpdated, lastPlayed];\n  return JSON.stringify(list);\n}\n","export interface ActivePlayerData {\n  id: number;\n  title: string;\n  imageUrl: string;\n  mediaUrl: string;\n  duration: number;\n  // position: number;\n  // status?: string;\n}\n\nconst storageActivePlayerDataId = 'ActivePlayerData';\n\nfunction convertActivePlayerDataToJsonStr(data: ActivePlayerData) {\n  return JSON.stringify(data);\n}\n\nfunction convertActivePlayerDataFromJsonStr(str: string) {\n  return str ? (JSON.parse(str) as ActivePlayerData) : undefined;\n}\n\nexport function saveActivePlayerData(data?: ActivePlayerData) {\n  const str = data ? convertActivePlayerDataToJsonStr(data) : '';\n  window.localStorage.setItem(storageActivePlayerDataId, str);\n}\n\nexport function loadActivePlayerData() {\n  const str = window.localStorage.getItem(storageActivePlayerDataId);\n  return convertActivePlayerDataFromJsonStr(str);\n}\n","export interface FloatingPlayerState {\n  lastTimestamp?: number;\n  visible?: boolean;\n  loaded?: boolean;\n  // playing?: boolean;\n  status?: 'playing' | 'paused' | 'waiting' | undefined;\n  position?: number;\n  progress?: number;\n  error?: string;\n}\n\nconst storageFloatingPlayerStateId = 'FloatingPlayerState';\n\nfunction convertFloatingPlayerStateToJsonStr(data: FloatingPlayerState) {\n  return JSON.stringify(data);\n}\n\nfunction convertFloatingPlayerStateFromJsonStr(str: string) {\n  return (str ? JSON.parse(str) : {}) as FloatingPlayerState;\n}\n\nexport function saveFloatingPlayerState(data: FloatingPlayerState) {\n  const saveData = { ...data, lastTimestamp: Date.now() };\n  delete saveData.error;\n  delete saveData.loaded;\n  // status?\n  const str = convertFloatingPlayerStateToJsonStr(saveData);\n  window.localStorage.setItem(storageFloatingPlayerStateId, str);\n}\n\nexport function loadFloatingPlayerState() {\n  const str = window.localStorage.getItem(storageFloatingPlayerStateId);\n  return convertFloatingPlayerStateFromJsonStr(str);\n}\n","import { getJsText } from '../../helpers/getJsText';\n\ninterface THiddenPlayerOptions {\n  type?: string;\n  src?: string;\n}\n\nexport class HiddenPlayer {\n  hiddenPlayerNode?: HTMLElement;\n  parentDomNode?: HTMLElement;\n\n  audioNode?: HTMLAudioElement;\n  sourceNode?: HTMLSourceElement;\n\n  setParentDomNode(parentDomNode: HTMLElement) {\n    this.parentDomNode = parentDomNode;\n  }\n\n  requireParentDomNode() {\n    return this.parentDomNode || document.body;\n  }\n\n  ensureHiddenPlayer(/* opts: THiddenPlayerOptions = {} */) {\n    if (!this.hiddenPlayerNode) {\n      this.hiddenPlayerNode = document.createElement('div');\n      this.hiddenPlayerNode.classList.add('hidden-player');\n      const audio = document.createElement('audio');\n      // audio.addEventListener('loadeddata', this.hiddenPlayerCanPlay);\n      this.hiddenPlayerNode.appendChild(audio);\n      const parentDomNode = this.requireParentDomNode();\n      parentDomNode.appendChild(this.hiddenPlayerNode);\n    }\n    return this.hiddenPlayerNode;\n  }\n\n  hasAudio() {\n    return !!this.audioNode;\n  }\n\n  hasSource() {\n    return !!this.sourceNode;\n  }\n\n  ensureHiddenPlayerAudio() {\n    if (!this.audioNode) {\n      const parentDomNode = this.requireParentDomNode();\n      this.audioNode = document.createElement('audio');\n      this.audioNode.classList.add('hidden-player');\n      this.audioNode.setAttribute('preload', 'auto');\n      // audio.addEventListener('loadeddata', this.hiddenPlayerCanPlay);\n      parentDomNode.appendChild(this.audioNode);\n    }\n    return this.audioNode;\n  }\n\n  createHiddenPlayerSource(opts: THiddenPlayerOptions = {}) {\n    this.removeHiddenPlayerSource();\n    const audio = this.ensureHiddenPlayerAudio();\n    this.sourceNode = document.createElement('source');\n    this.sourceNode.setAttribute('type', opts.type || 'audio/mpeg');\n    if (opts.src) {\n      this.sourceNode.setAttribute('src', opts.src);\n    }\n    // @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/loadeddata_event\n    // audio.addEventListener('canplay', this.handleCanPlay.bind(this));\n    // audio.addEventListener('playing', this.handlePlay.bind(this));\n    // audio.addEventListener('timeupdate', this.handleTimeUpdate.bind(this));\n    // audio.addEventListener('ended', this.handleEnded.bind(this));\n    // this.sourceNode.addEventListener('error', this.handleError.bind(this));\n    audio.appendChild(this.sourceNode);\n    return this.sourceNode;\n  }\n\n  removeHiddenPlayerAudio() {\n    if (this.audioNode) {\n      this.audioNode.pause();\n      this.audioNode.remove();\n      this.audioNode = undefined;\n      this.sourceNode = undefined;\n    }\n  }\n\n  removeHiddenPlayerSource() {\n    const audio = this.ensureHiddenPlayerAudio();\n    const prevSources = Array.from(audio.getElementsByTagName('source'));\n    for (const node of prevSources) {\n      node.remove();\n    }\n    this.sourceNode = undefined;\n  }\n}\n","import { getJsText } from '../../helpers/getJsText';\nimport { commonNotify } from '../../CommonNotify/CommonNotifySingleton';\nimport { formatDuration, getErrorText } from '../../helpers/CommonHelpers';\nimport { localTrackInfoDb } from '../../track-blocks/localTrackInfoDb';\n\nimport {\n  ActivePlayerData,\n  loadActivePlayerData,\n  saveActivePlayerData,\n} from '../ActivePlayerData/ActivePlayerData';\nimport { getActivePlayerDataFromTrackNode } from '../ActivePlayerData/getActivePlayerDataFromTrackNode';\nimport {\n  FloatingPlayerState,\n  loadFloatingPlayerState,\n  saveFloatingPlayerState,\n} from './FloatingPlayerState';\n\nimport { HiddenPlayer } from './HiddenPlayer';\n\ntype ErrorCallback = (error: Error | string) => void;\n// type TrackCallback = (activePlayerData: ActivePlayerData) => void;\ntype UpdateCallback = (\n  floatingPlayerState: FloatingPlayerState,\n  activePlayerData: ActivePlayerData,\n) => void;\n\nconst TRUE = 'true';\n\n// type HandlerId = 'play' | 'stop' | 'time';\nexport class FloatingPlayerCallbacks {\n  onPlayStartCallbacks: UpdateCallback[] = [];\n  onPlayStopCallbacks: UpdateCallback[] = [];\n  onUpdateCallbacks: UpdateCallback[] = [];\n  onErrorCallbacks: ErrorCallback[] = [];\n  // handlers: Record<HandlerId, ErrorCallback[]> = {};\n\n  addPlayStartCallback(cb: UpdateCallback) {\n    if (cb && !this.onPlayStartCallbacks.includes(cb)) {\n      this.onPlayStartCallbacks.push(cb);\n    }\n  }\n\n  addPlayStopCallback(cb: UpdateCallback) {\n    if (cb && !this.onPlayStopCallbacks.includes(cb)) {\n      this.onPlayStopCallbacks.push(cb);\n    }\n  }\n\n  addUpdateCallback(cb: UpdateCallback) {\n    if (cb && !this.onUpdateCallbacks.includes(cb)) {\n      this.onUpdateCallbacks.push(cb);\n    }\n  }\n\n  addErrorCallback(cb: ErrorCallback) {\n    if (cb && !this.onErrorCallbacks.includes(cb)) {\n      this.onErrorCallbacks.push(cb);\n    }\n  }\n\n  invokePlayStartCallbacks(\n    floatingPlayerState: FloatingPlayerState,\n    activePlayerData?: ActivePlayerData,\n  ) {\n    if (activePlayerData) {\n      this.onPlayStartCallbacks.forEach((cb) => {\n        cb(floatingPlayerState, activePlayerData);\n      });\n    }\n  }\n\n  invokePlayStopCallbacks(\n    floatingPlayerState: FloatingPlayerState,\n    activePlayerData?: ActivePlayerData,\n  ) {\n    if (activePlayerData) {\n      this.onPlayStopCallbacks.forEach((cb) => {\n        cb(floatingPlayerState, activePlayerData);\n      });\n    }\n  }\n\n  invokeUpdateCallbacks(\n    floatingPlayerState: FloatingPlayerState,\n    activePlayerData?: ActivePlayerData,\n  ) {\n    if (activePlayerData) {\n      this.onUpdateCallbacks.forEach((cb) => {\n        cb(floatingPlayerState, activePlayerData);\n      });\n    }\n  }\n  invokeErrorCallbacks(error: Error | string) {\n    if (error) {\n      this.onErrorCallbacks.forEach((cb) => {\n        cb(error);\n      });\n    }\n  }\n}\n\nexport class FloatingPlayer {\n  inited = false;\n  callbacks = new FloatingPlayerCallbacks();\n  audio?: HTMLAudioElement;\n  hiddenPlayer: HiddenPlayer = new HiddenPlayer();\n  activePlayerData?: ActivePlayerData;\n  state: FloatingPlayerState = {};\n  domNode?: HTMLElement;\n\n  constructor() {\n    this.loadActivePlayerData();\n    this.loadFloatingPlayerState();\n    this.initTrackDomNode();\n    this.updateAll();\n    // Check if it was recently playing...\n    const now = Date.now();\n    if (\n      this.activePlayerData &&\n      this.state.status === 'playing' &&\n      this.state.lastTimestamp\n      // && this.state.lastTimestamp > now - 5000\n    ) {\n      // TODO: Then resume playback...\n      console.log('[FloatingPlayerClass:constructor] Start play', {\n        activePlayerData: this.activePlayerData,\n        state: this.state,\n      });\n      // TODO: Care about: `Uncaught (in promise) NotAllowedError: play() failed because the user didn't interact with the document first. https://goo.gl/xX8pDD`\n      // this.playCurrentPlayer();\n      // DEBUG: Temporarily remove the playing status\n      // delete this.state.status;\n    } else {\n      // Reset the status\n      delete this.state.status;\n    }\n  }\n\n  requireAudio() {\n    if (!this.audio) {\n      this.audio = this.hiddenPlayer.ensureHiddenPlayerAudio();\n      this.audio.addEventListener('canplay', this.handleAudioCanPlay.bind(this));\n      this.audio.addEventListener('playing', this.handleAudioPlay.bind(this));\n      this.audio.addEventListener('timeupdate', this.handleAudioTimeUpdate.bind(this));\n      this.audio.addEventListener('ended', this.handleAudioEnded.bind(this));\n      // source.addEventListener('error', this.handleAudioSourceError.bind(this));\n    }\n    return this.audio;\n  }\n\n  removeAudio() {\n    this.hiddenPlayer.removeHiddenPlayerAudio();\n    this.audio = undefined;\n  }\n\n  hasAudio() {\n    return !!this.audio;\n  }\n\n  hasAudioSource() {\n    return this.hiddenPlayer.hasSource();\n  }\n\n  requireDomNode() {\n    if (!this.domNode) {\n      this.domNode = document.querySelector<HTMLElement>('.floating-player');\n      this.hiddenPlayer.setParentDomNode(this.domNode);\n    }\n    // TODO: Ensure created dom node?\n    if (!this.domNode) {\n      const error = new Error('No floating player node found');\n      // eslint-disable-next-line no-console\n      console.error('[FloatingPlayerClass:requireDomNode]', error.message, {\n        error,\n      });\n      debugger; // eslint-disable-line no-debugger\n      throw error;\n    }\n    return this.domNode;\n  }\n\n  requireActivePlayerData() {\n    // TODO: Ensure data?\n    if (!this.activePlayerData) {\n      const error = new Error('No active player data set');\n      // eslint-disable-next-line no-console\n      console.error('[FloatingPlayerClass:requireActivePlayerData]', error.message, {\n        error,\n      });\n      debugger; // eslint-disable-line no-debugger\n      throw error;\n    }\n    return this.activePlayerData;\n  }\n\n  // Sync persistent data...\n\n  loadActivePlayerData() {\n    this.activePlayerData = loadActivePlayerData();\n  }\n\n  saveActivePlayerData() {\n    saveActivePlayerData(this.activePlayerData);\n  }\n\n  loadFloatingPlayerState() {\n    this.state = loadFloatingPlayerState();\n  }\n\n  saveFloatingPlayerState() {\n    saveFloatingPlayerState(this.state);\n  }\n\n  // Dom node...\n\n  showFloatingPlayer() {\n    this.state.visible = true;\n    this.updateStateInDom();\n    this.saveFloatingPlayerState();\n  }\n\n  hideFloatingPlayer() {\n    this.state.visible = false;\n    this.updateStateInDom();\n    this.saveFloatingPlayerState();\n  }\n\n  // Hidden player...\n\n  // Updaters...\n\n  updateActivePlayerDataInDom() {\n    const domNode = this.requireDomNode();\n    const activePlayerData = this.requireActivePlayerData();\n    const titleNode = domNode.querySelector<HTMLElement>('.title');\n    titleNode.innerText = activePlayerData.title;\n    const imageNode = domNode.querySelector<HTMLElement>('.image');\n    imageNode.style.backgroundImage = 'url(' + activePlayerData.imageUrl + ')';\n    // TODO: Ensure hidden player, set player url\n  }\n\n  updateStateInDom() {\n    const domNode = this.requireDomNode();\n    const { dataset } = domNode;\n    if (this.state.status) {\n      dataset.status = this.state.status;\n    } else {\n      delete dataset.status;\n    }\n    document.body.classList.toggle('withPlayer', !!this.state.visible);\n  }\n\n  updatePositionInDom() {\n    const domNode = this.requireDomNode();\n    const { dataset } = domNode;\n    dataset.position = String(this.state.position || 0);\n    dataset.progress = String(this.state.progress || 0);\n    domNode.style.setProperty('--progress', String(this.state.progress || 0));\n  }\n\n  // setAudioPosition(position: number) {\n  //   // audio.currentTime = position;\n  // }\n\n  calculateProgress() {\n    const activePlayerData = this.requireActivePlayerData();\n    const { position } = this.state;\n    const { id, duration } = activePlayerData;\n    if (!duration) {\n      const error = new Error(`No duration provided for a track: ${id}`);\n      // eslint-disable-next-line no-console\n      console.error('[FloatingPlayerClass:calculateProgress]', error.message, {\n        error,\n      });\n      debugger; // eslint-disable-line no-debugger\n      throw error;\n    }\n    const ratio = position / duration;\n    const progress = Math.round(ratio * 100);\n    return progress;\n  }\n\n  updateTrackPosition() {\n    const domNode = this.requireDomNode();\n    const timeNode = domNode.querySelector('.time');\n    const activePlayerData = this.requireActivePlayerData();\n    const { position } = this.state;\n    const { id } = activePlayerData;\n    const progress = this.calculateProgress();\n    /* console.log('[FloatingPlayerClass:updateTrackPosition]', {\n     *   id,\n     *   position,\n     *   progress,\n     *   ratio,\n     *   duration,\n     *   timeNode,\n     *   dataset,\n     *   domNode,\n     * });\n     */\n    this.state.progress = progress;\n    this.updatePositionInDom();\n    if (timeNode) {\n      timeNode.innerHTML = formatDuration(Math.floor(position * 1000));\n    }\n    localTrackInfoDb.updatePosition(id, position);\n  }\n\n  // TODO: Update position\n  // TODO: Update status\n\n  updateAll() {\n    this.updateStateInDom();\n    this.updatePositionInDom();\n    if (this.activePlayerData) {\n      this.updateActivePlayerDataInDom();\n    }\n  }\n\n  // Audio handlers...\n\n  handleAudioTimeUpdate(ev: Event) {\n    const currAudio = this.audio;\n    const audio = ev.currentTarget as HTMLAudioElement;\n    if (audio !== currAudio) {\n      return;\n    }\n    const source = audio.getElementsByTagName('SOURCE')[0] as HTMLSourceElement;\n    const { currentTime, readyState } = audio;\n    const activePlayerData = this.requireActivePlayerData();\n    console.log('[FloatingPlayerClass:handleAudioTimeUpdate]', {\n      currentTime,\n      readyState,\n      id: activePlayerData.id,\n      activePlayerData,\n      src: source.src,\n      source,\n      thisAudio: currAudio === audio,\n      currAudio,\n      audio,\n    });\n    // TODO: Check loaded status?\n    if (this.state.position != currentTime) {\n      this.state.position = currentTime;\n      this.updateTrackPosition();\n      this.callbacks.invokeUpdateCallbacks(this.state, activePlayerData);\n    }\n  }\n\n  handleAudioCanPlay(ev: Event) {\n    if (!this.state.loaded) {\n      const audio = ev.currentTarget as HTMLAudioElement;\n      const source = audio.getElementsByTagName('SOURCE')[0] as HTMLSourceElement;\n      const src = source?.src;\n      console.log('[FloatingPlayerClass:sharedPlayerCanPlay]', {\n        src,\n        source,\n        audio,\n        ev,\n      });\n      this.state.loaded = true;\n      delete this.state.error;\n      // this.callbacks.invokeUpdateCallbacks(this.state, this.activePlayerData);\n    }\n  }\n\n  handleAudioPlay(_ev: Event) {\n    console.log('[FloatingPlayerClass:handleAudioPlay]');\n    this.state.status = 'playing';\n    this.updateStateInDom();\n    this.saveFloatingPlayerState();\n    this.callbacks.invokePlayStartCallbacks(this.state, this.activePlayerData);\n  }\n\n  handleAudioEnded(_ev: Event) {\n    console.log('[FloatingPlayerClass:handleAudioEnded]');\n    this.state.status = 'paused'; // stopped, ready?\n    this.updateStateInDom();\n    this.saveFloatingPlayerState();\n    this.callbacks.invokePlayStopCallbacks(this.state, this.activePlayerData);\n  }\n\n  handleAudioSourceError(ev: Event) {\n    const srcElement = ev.currentTarget as HTMLSourceElement;\n    const { src, type } = srcElement;\n    const errMsg = getJsText('errorLoadingAudioFile') + ' ' + src;\n    const error = new Error(errMsg);\n    // eslint-disable-next-line no-console\n    console.error('[FloatingPlayerClass:handleAudioSourceError]', errMsg, {\n      error,\n      src,\n      type,\n      ev,\n    });\n    debugger; // eslint-disable-line no-debugger\n    commonNotify.showError(errMsg);\n    this.state.error = getErrorText(error);\n    this.callbacks.invokeErrorCallbacks(error);\n    // const dataset = currentTrackPlayer?.dataset;\n    // if (dataset) {\n    //   dataset.error = errMsg;\n    //   delete dataset.loaded;\n    //   delete dataset.status;\n    // }\n  }\n\n  /// Active player data\n\n  getActiveTrackId(): number | undefined {\n    return this.activePlayerData ? this.activePlayerData.id : undefined;\n  }\n\n  // Core handlers...\n\n  loadAudio() {\n    // const domNode = this.requireDomNode();\n    const activePlayerData = this.requireActivePlayerData();\n    console.log('[FloatingPlayerClass:loadAudio]', {\n      mediaUrl: activePlayerData.mediaUrl,\n      id: activePlayerData.id,\n    });\n    this.state.loaded = false;\n    const source = this.hiddenPlayer.createHiddenPlayerSource({ src: activePlayerData.mediaUrl });\n    source.addEventListener('error', this.handleAudioSourceError.bind(this));\n    // this.callbacks.invokeUpdateCallbacks(this.state, this.activePlayerData);\n    // this.callbacks.invokePlayStartCallbacks(this.activePlayerData);\n  }\n\n  isAudioPlaying() {\n    const audio = this.audio;\n    return (\n      !!audio && audio.currentTime > 0 && !audio.paused && !audio.ended && audio.readyState > 2\n    );\n  }\n\n  isPlaying() {\n    // TODO: Use audio node?\n    // const audio = this.requireAudio()\n    return this.state.status === 'playing';\n  }\n\n  pauseCurrentPlayer() {\n    if (this.isAudioPlaying()) {\n      const audio = this.requireAudio();\n      audio.pause();\n    }\n    if (this.isPlaying()) {\n      this.state.status = 'paused';\n      this.updateStateInDom();\n      this.saveFloatingPlayerState();\n      // this.callbacks.invokeUpdateCallbacks(this.state, this.activePlayerData);\n    }\n  }\n\n  playCurrentPlayer() {\n    const audio = this.requireAudio();\n    const activePlayerData = this.requireActivePlayerData();\n    if (this.isAudioPlaying()) {\n      return;\n    }\n    if (audio.ended || this.state.position > activePlayerData.duration - 0.1) {\n      // Start from the begining\n      // audio.currentTime = 0;\n      this.state.position = 0;\n    }\n    this.updateTrackPosition();\n    this.callbacks.invokeUpdateCallbacks(this.state, this.activePlayerData);\n    // if (!this.state.loaded || !this.hasAudio() || !this.hasAudioSource) {\n    //   this.loadAudio();\n    // }\n    audio.currentTime = this.state.position || 0;\n    audio.play();\n  }\n\n  /** Play button click handler */\n  trackPlayHandler(_ev: MouseEvent) {\n    const isPlaying = this.isPlaying();\n    if (isPlaying) {\n      this.pauseCurrentPlayer();\n    } else {\n      this.playCurrentPlayer();\n    }\n  }\n\n  // Active player track data...\n\n  ensureAudioLoaded() {\n    if (!this.state.loaded || !this.hasAudio() || !this.hasAudioSource) {\n      this.loadAudio();\n    }\n  }\n\n  setActivePlayerData(activePlayerData: ActivePlayerData, position?: number) {\n    if (this.activePlayerData?.id !== activePlayerData.id) {\n      if (this.activePlayerData && this.isPlaying) {\n        this.pauseCurrentPlayer();\n      }\n      this.state.loaded = false;\n      if (position != null) {\n        this.state.position = position;\n      }\n      this.removeAudio();\n      console.log('[FloatingPlayerClass:setActivePlayerData]', activePlayerData);\n      this.activePlayerData = activePlayerData;\n    }\n    this.saveActivePlayerData();\n    this.updateActivePlayerDataInDom();\n    this.ensureAudioLoaded();\n  }\n\n  setActiveTrack(trackNode: HTMLElement, position?: number) {\n    const activePlayerData = getActivePlayerDataFromTrackNode(trackNode);\n    this.setActivePlayerData(activePlayerData, position);\n  }\n\n  setPosition(position?: number) {\n    this.state.position = position;\n    // ???\n  }\n\n  clearActiveData() {\n    this.activePlayerData = undefined;\n    this.hideFloatingPlayer();\n    this.removeAudio();\n  }\n\n  // Initilization...\n\n  initTrackDomNode() {\n    const domNode = this.requireDomNode();\n    const controls = domNode.querySelectorAll<HTMLElement>('.track-control');\n    controls.forEach((node) => {\n      const { dataset } = node;\n      const { inited, controlId } = dataset;\n      if (inited) {\n        return;\n      }\n      // if (controlId === 'toggleFavorite') {\n      //   node.addEventListener('click', toggleFavorite);\n      // }\n      if (controlId === 'play') {\n        node.addEventListener('click', this.trackPlayHandler.bind(this));\n      }\n      dataset.inited = TRUE;\n    });\n    this.inited = true;\n  }\n}\n","import { ActivePlayerData } from './ActivePlayerData';\n\nexport function getActivePlayerDataFromTrackNode(trackNode: HTMLElement) {\n  const { dataset } = trackNode;\n  const id = Number(dataset.trackId);\n  // const status = dataset.status;\n  const duration = parseFloat((dataset.trackDuration || '0').replace(',', '.'));\n  // const position = parseFloat((dataset.position || '0').replace(',', '.'));\n  const mediaUrl = dataset.trackMediaUrl;\n  const imageNode = trackNode.querySelector<HTMLImageElement>('img.card-img');\n  const imageUrl = imageNode?.getAttribute('src');\n  const titleNode = trackNode.querySelector<HTMLElement>('.post-title');\n  const title = titleNode?.innerHTML;\n  const activePlayerData: ActivePlayerData = {\n    id,\n    title,\n    imageUrl,\n    mediaUrl,\n    duration,\n    // position,\n    // status,\n  };\n  // const link = titleNode?.getAttribute('href');\n  console.log('[getActivePlayerDataFromTrackNode]', {\n    activePlayerData,\n    id, // 6\n    duration, // 17.972245\n    mediaUrl,\n    imageUrl, // \"/media/samples/Тест_кириллицы.png\"\n    trackNode, // article.big-tracks-list-item.card.no-bg.mb-4.track-player.current\n    title, // \"Новый трек\"\n    // status,\n    // trackNode,\n    // dataset,\n  });\n  // TODO: Store in the local storage the last status (playing, paused etc) and last activity time\n  return activePlayerData;\n}\n","import { FloatingPlayer } from './FloatingPlayerClass';\n\n// Singleton\nexport const floatingPlayer = new FloatingPlayer();\n\nexport function initFloatingPlayer() {\n  // console.log('[floatingPlayer:initFloatingPlayer]');\n}\n","import { formatDuration, quoteHtmlAttr } from '../helpers/CommonHelpers';\nimport { commonNotify } from '../CommonNotify/CommonNotifySingleton';\nimport { sendApiRequest } from '../helpers/sendApiRequest';\nimport { getJsText } from '../helpers/getJsText';\n\nimport { localTrackInfoDb } from './localTrackInfoDb';\nimport { floatingPlayer } from '../entities/FloatingPlayer/floatingPlayer';\nimport { ActivePlayerData } from '../entities/ActivePlayerData/ActivePlayerData';\nimport { FloatingPlayerState } from '../entities/FloatingPlayer/FloatingPlayerState';\n\nconst sharedPlayerContainer = document.body;\n\nlet allPlayers: NodeListOf<HTMLElement>;\nlet sharedPlayerNode: HTMLElement | undefined = undefined;\nlet currentTrackPlayer: HTMLElement | undefined = undefined;\n\ninterface TSharedPlayerOptions {\n  type?: string;\n  src?: string;\n}\n\n// Values for dataset statuses\nconst TRUE = 'true';\n\nfunction ensureSharedPlayer(/* opts: TSharedPlayerOptions = {} */) {\n  if (!sharedPlayerNode) {\n    sharedPlayerNode = document.createElement('div');\n    sharedPlayerNode.classList.add('shared-player');\n    const audio = document.createElement('audio');\n    audio.addEventListener('loadeddata', sharedPlayerCanPlay);\n    sharedPlayerNode.appendChild(audio);\n    sharedPlayerContainer.appendChild(sharedPlayerNode);\n  }\n  return sharedPlayerNode;\n}\n\nfunction ensureSharedPlayerAudio() {\n  const sharedPlayer = ensureSharedPlayer();\n  const audio = sharedPlayer.getElementsByTagName('audio')[0];\n  if (!audio) {\n    throw new Error(getJsText('noAudioNodeFound'));\n  }\n  return audio;\n}\n\nfunction createSharedPlayerSource(opts: TSharedPlayerOptions = {}) {\n  // const sharedPlayer = ensureSharedPlayer();\n  const audio = ensureSharedPlayerAudio();\n  const prevSources = Array.from(audio.getElementsByTagName('source'));\n  for (const node of prevSources) {\n    node.remove();\n  }\n  audio.setAttribute('preload', 'auto');\n  const source = document.createElement('source');\n  source.setAttribute('type', opts.type || 'audio/mpeg');\n  if (opts.src) {\n    source.setAttribute('src', opts.src);\n  }\n  // @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/loadeddata_event\n  audio.addEventListener('canplay', sharedPlayerCanPlay);\n  audio.addEventListener('loadeddata', sharedPlayerCanPlay);\n  audio.addEventListener('playing', sharedPlayerPlay);\n  audio.addEventListener('timeupdate', sharedPlayerTimeUpdate);\n  audio.addEventListener('ended', sharedPlayerEnded);\n  source.addEventListener('error', sharedPlayerError);\n  audio.appendChild(source);\n  return source;\n}\n\n// REMOVE\nfunction sharedPlayerEnded(_ev: Event) {\n  if (!currentTrackPlayer) {\n    throw new Error('No current track player node!');\n  }\n  const dataset = currentTrackPlayer?.dataset;\n  if (dataset) {\n    delete dataset.status;\n  }\n  incrementPlayedCount();\n}\n\nfunction updateTrackPosition(trackNode: HTMLElement, position: number, isCurrent?: boolean) {\n  const timeNode = trackNode.querySelector('.time');\n  const { dataset } = trackNode;\n  const { trackId, trackDuration } = dataset;\n  const timeMs = Math.floor(position * 1000);\n  const timeFormatted = formatDuration(timeMs);\n  const id = Number(trackId);\n  const duration = parseFloat(trackDuration.replace(',', '.'));\n  if (!duration) {\n    const error = new Error(`No duration provided for a track: ${id}`);\n    // eslint-disable-next-line no-console\n    console.error('[tracksPlayer:updateTrackPosition]', error.message, {\n      error,\n    });\n    debugger; // eslint-disable-line no-debugger\n  }\n  const ratio = position / duration;\n  const progress = Math.round(ratio * 100);\n  /* console.log('[tracksPlayer:updateTrackPosition]', {\n   *   id,\n   *   position,\n   *   progress,\n   *   ratio,\n   *   duration,\n   *   timeMs,\n   *   timeFormatted,\n   *   timeNode,\n   *   dataset,\n   *   trackNode,\n   *   isCurrent,\n   * });\n   */\n  dataset.position = String(position);\n  dataset.progress = String(progress);\n  trackNode.style.setProperty('--progress', String(progress));\n  if (timeNode) {\n    timeNode.innerHTML = timeFormatted;\n  }\n  localTrackInfoDb.updatePosition(id, position);\n  if (isCurrent) {\n    // TODO: Update the floating player if isCurrent\n  }\n}\n\nfunction updatePlayback(position: number) {\n  if (!currentTrackPlayer) {\n    return;\n  }\n  updateTrackPosition(currentTrackPlayer, position, true);\n}\n\nfunction sharedPlayerTimeUpdate(ev: Event) {\n  if (!currentTrackPlayer) {\n    return;\n  }\n  const audio = ev.currentTarget as HTMLAudioElement;\n  const { currentTime } = audio;\n  const dataset = currentTrackPlayer.dataset;\n  const loaded = Boolean(dataset.loaded);\n  if (loaded) {\n    /* // DEBUG\n     * const { type, eventPhase } = ev;\n     * const position = Number(dataset.position || '');\n     * const readyState = audio.readyState;\n     * console.log('[tracksPlayer:sharedPlayerTimeUpdate]', {\n     *   readyState,\n     *   position,\n     *   loaded,\n     *   currentTime,\n     *   audio,\n     *   type,\n     *   eventPhase,\n     *   ev,\n     *   dataset,\n     * });\n     */\n    updatePlayback(currentTime);\n  }\n}\n\n// REMOVE\nfunction sharedPlayerPlay(_ev: Event) {\n  if (!currentTrackPlayer) {\n    throw new Error('No current track player node!');\n  }\n  const { dataset } = currentTrackPlayer;\n  dataset.status = 'playing';\n  // floatingPlayer.showFloatingPlayer(currentTrackPlayer);\n}\n\nfunction floatingPlayerPlay(\n  _floatingPlayerState: FloatingPlayerState,\n  activePlayerData: ActivePlayerData,\n) {\n  if (!currentTrackPlayer) {\n    throw new Error('No current track player node!');\n  }\n  const { dataset } = currentTrackPlayer;\n  const id = Number(dataset.trackId);\n  if (id !== activePlayerData.id) {\n    throw new Error('Wrong active track id!');\n  }\n  dataset.status = 'playing';\n  // floatingPlayer.showFloatingPlayer(currentTrackPlayer);\n}\n\nfunction floatingPlayerStop(\n  _floatingPlayerState: FloatingPlayerState,\n  activePlayerData: ActivePlayerData,\n) {\n  if (!currentTrackPlayer) {\n    throw new Error('No current track player node!');\n  }\n  const { dataset } = currentTrackPlayer;\n  const id = Number(dataset.trackId);\n  if (id !== activePlayerData.id) {\n    throw new Error('Wrong active track id!');\n  }\n  if (dataset) {\n    delete dataset.status;\n  }\n  incrementPlayedCount();\n}\n\nfunction getTrackNode(id: number) {\n  const players = Array.from(allPlayers);\n  const trackNode = players.find((it) => Number(it.dataset.trackId) === id);\n  return trackNode;\n}\n\nfunction floatingPlayerUpdate(\n  floatingPlayerState: FloatingPlayerState,\n  activePlayerData: ActivePlayerData,\n) {\n  const { id } = activePlayerData;\n  let trackNode = currentTrackPlayer;\n  if (!trackNode || Number(trackNode.dataset.trackId) !== id) {\n    trackNode = getTrackNode(id);\n  }\n  if (!trackNode) {\n    return;\n  }\n  const isCurrent = trackNode === currentTrackPlayer;\n  const { position, progress, status } = floatingPlayerState;\n  const { dataset } = currentTrackPlayer;\n  const timeNode = currentTrackPlayer.querySelector('.time');\n  const timeMs = Math.floor(position * 1000);\n  const timeFormatted = formatDuration(timeMs);\n  console.log('[tracksPlayer:floatingPlayerUpdate]', {\n    id,\n    status,\n    position,\n    progress,\n    timeMs,\n    timeFormatted,\n    timeNode,\n    dataset,\n    currentTrackPlayer,\n    isCurrent,\n  });\n  if (status) {\n    dataset.status = status;\n  } else {\n    delete dataset.status;\n  }\n  // if (id === 5 && position > 6) {\n  //   debugger;\n  // }\n  dataset.position = String(position);\n  dataset.progress = String(progress);\n  currentTrackPlayer.style.setProperty('--progress', String(progress));\n  if (timeNode) {\n    timeNode.innerHTML = timeFormatted;\n  }\n  localTrackInfoDb.updatePosition(id, position);\n  if (isCurrent) {\n    // TODO: Update the floating player if isCurrent\n  }\n}\n\nfunction updateAudioPosition(trackNode: HTMLElement, isCurrent: boolean = true) {\n  const audio = ensureSharedPlayerAudio();\n  const dataset = trackNode.dataset;\n  const duration = parseFloat((dataset.trackDuration || '0').replace(',', '.'));\n  let position = parseFloat((dataset.position || '0').replace(',', '.'));\n  /* console.log('[tracksPlayer:updateAudioPosition]', {\n   *   readyState: audio.readyState,\n   *   currentTime: audio.currentTime,\n   *   position,\n   *   duration,\n   *   dataset,\n   *   audio,\n   *   // source,\n   * });\n   */\n  if (/* !audio.seekable || */ position >= duration - 0.1) {\n    position = 0;\n    updateTrackPosition(trackNode, position, isCurrent);\n    dataset.position = '0';\n    dataset.progress = '0';\n    audio.currentTime = 0;\n  } else {\n    audio.currentTime = position;\n  }\n}\n\nfunction audioPlay(trackNode: HTMLElement, isCurrent: boolean = true) {\n  const audio = ensureSharedPlayerAudio();\n  /* // DEBUG\n   * const dataset = trackNode.dataset;\n   * dataset.status = 'playing';\n   * const duration = parseFloat(dataset.trackDuration.replace(',', '.'));\n   * const position = Number(dataset.position || '');\n   * console.log('[tracksPlayer:audioPlay]', {\n   *   duration,\n   *   position,\n   *   dataset,\n   *   audio,\n   *   // source,\n   * });\n   */\n  updateAudioPosition(trackNode, isCurrent);\n  audio.play();\n}\n\nfunction sharedPlayerCanPlay(_ev: Event) {\n  if (!currentTrackPlayer) {\n    throw new Error('No current track player node!');\n  }\n  const dataset = currentTrackPlayer.dataset;\n  const isLoaded = !!dataset.loaded;\n  if (!isLoaded) {\n    dataset.loaded = TRUE;\n    delete dataset.error;\n    /* // DEBUG\n     * const audio = ensureSharedPlayerAudio();\n     * const readyState = audio.readyState;\n     * console.log('[tracksPlayer:sharedPlayerCanPlay]', {\n     *   readyState,\n     *   currentTime: audio.currentTime,\n     *   dataset,\n     *   audio,\n     * });\n     */\n    // Start playback if all is ok...\n    audioPlay(currentTrackPlayer, true);\n  }\n}\n\nfunction sharedPlayerError(ev: Event) {\n  const srcElement = ev.currentTarget as HTMLSourceElement;\n  const { src, type } = srcElement;\n  const errMsg = getJsText('errorLoadingAudioFile') + ' ' + src;\n  const error = new Error(errMsg);\n  // eslint-disable-next-line no-console\n  console.error('[sharedPlayerError]', errMsg, {\n    error,\n    currentTrackPlayer,\n    src,\n    type,\n    ev,\n  });\n  debugger; // eslint-disable-line no-debugger\n  commonNotify.showError(errMsg);\n  const dataset = currentTrackPlayer?.dataset;\n  if (dataset) {\n    dataset.error = errMsg;\n    delete dataset.loaded;\n    delete dataset.status;\n  }\n}\n\nfunction isAudioPlaying(audio: HTMLAudioElement) {\n  return !!audio && audio.currentTime > 0 && !audio.paused && !audio.ended && audio.readyState > 2;\n}\n\nfunction stopPreviousPlayer() {\n  if (sharedPlayerNode) {\n    const audio = sharedPlayerNode.getElementsByTagName('audio')[0];\n    if (audio && isAudioPlaying(audio)) {\n      audio.pause();\n    }\n  }\n  if (currentTrackPlayer) {\n    currentTrackPlayer.classList.toggle('current', false);\n    const { dataset } = currentTrackPlayer;\n    delete dataset.status;\n    delete dataset.loaded;\n    delete dataset.error;\n  }\n}\n\nfunction sendIncrementPlayedCount() {\n  const { dataset } = currentTrackPlayer;\n  const { trackId } = dataset;\n  const url = `/api/v1/tracks/${trackId}/increment-played-count/`;\n  return sendApiRequest(url, 'POST');\n}\n\nfunction updateTrackPlayedCount(trackNode: HTMLElement, playedCount?: number, isCurrent?: boolean) {\n  const { dataset } = trackNode;\n  const { trackId } = dataset;\n  const id = Number(trackId);\n  if (!id) {\n    throw new Error('No current track id!');\n  }\n  const updatedTrackInfo = localTrackInfoDb.updatePlayedCount(id, playedCount);\n  const { playedCount: updatedPlayedCount } = updatedTrackInfo;\n  const strValue = quoteHtmlAttr(String(updatedPlayedCount));\n  const valueNode = trackNode.querySelector('#played_count') as HTMLElement;\n  // Update counter in the document...\n  if (valueNode) {\n    valueNode.innerText = strValue;\n    // ???\n    const parent = valueNode.closest('.track-played-count[data-played-count]') as HTMLElement;\n    if (parent) {\n      parent.dataset.playedCount = strValue;\n    }\n  }\n  if (isCurrent) {\n    // TODO: Update value in the floating player\n  }\n}\n\nfunction incrementPlayedCount() {\n  if (!currentTrackPlayer) {\n    throw new Error('No current track player node!');\n  }\n  const trackNode = currentTrackPlayer;\n  const { dataset } = trackNode;\n  if (dataset.incrementing) {\n    return;\n  }\n  dataset.incrementing = TRUE;\n  updateTrackPlayedCount(trackNode, undefined, true);\n  if (!window.isAuthenticated) {\n    delete dataset.incrementing;\n    return;\n  }\n  return sendIncrementPlayedCount()\n    .then(({ played_count }: { played_count?: number }) => {\n      if (played_count != null) {\n        // Re-update local data with server data...\n        updateTrackPlayedCount(trackNode, played_count, true);\n      }\n      // TODO: Update other instances of this track on the page (eg, in player, or in other track listings)?\n    })\n    .catch((err) => {\n      // eslint-disable-next-line no-console\n      console.error('[tracksPlayer:incrementPlayedCount:sendIncrementPlayedCount] error', {\n        err,\n      });\n      debugger; // eslint-disable-line no-debugger\n      commonNotify.showError(err);\n      throw err;\n    })\n    .finally(() => {\n      delete dataset.incrementing;\n    });\n}\n\nfunction startPlay() {\n  if (!currentTrackPlayer) {\n    throw new Error('No current track player node!');\n  }\n  const { dataset } = currentTrackPlayer;\n  const isLoaded = !!dataset.loaded;\n  const audio = ensureSharedPlayerAudio();\n  if (!isLoaded) {\n    dataset.status = 'waiting';\n    delete dataset.loaded;\n    delete dataset.error;\n    const { trackMediaUrl } = dataset;\n    const source = createSharedPlayerSource({ src: trackMediaUrl });\n    if (!source) {\n      throw new Error(getJsText('noAudioSourceNodeFound'));\n    }\n    updateAudioPosition(currentTrackPlayer, true);\n    // see `sharedPlayerLoaded`, `sharedPlayerCanPlay` handlers\n    audio.load();\n  } else {\n    audioPlay(currentTrackPlayer, true);\n  }\n}\n\n/** Play button click handler */\nfunction trackPlayHandler(ev: MouseEvent) {\n  const controlNode = ev.currentTarget as HTMLElement;\n  const trackNode = controlNode.closest('.track-player') as HTMLElement;\n  // Reset previous player\n  if (currentTrackPlayer && currentTrackPlayer !== trackNode) {\n    stopPreviousPlayer();\n  }\n  const { dataset } = trackNode;\n  const id = Number(dataset.trackId);\n\n  const playingId = floatingPlayer.getActiveTrackId();\n  const isFloatingPlaying = floatingPlayer.isPlaying();\n  if (isFloatingPlaying) {\n    // Pause playback\n    floatingPlayer.pauseCurrentPlayer();\n    if (playingId === id) {\n      // Return -- just pause current track\n      return;\n    }\n  }\n\n  // Clear all tracks active status?\n  trackNode.classList.toggle('current', true);\n  currentTrackPlayer = trackNode;\n\n  const position = parseFloat((dataset.position || '0').replace(',', '.'));\n  floatingPlayer.setActiveTrack(trackNode, position);\n\n  floatingPlayer.playCurrentPlayer();\n\n  // Show floating player if has been hidden\n  if (!isFloatingPlaying) {\n    floatingPlayer.showFloatingPlayer();\n  }\n}\n\nfunction sendToggleFavoriteRequest(trackId: number | string, value: boolean) {\n  const url = `/api/v1/tracks/${trackId}/toggle-favorite/`;\n  return sendApiRequest(url, 'POST', { value });\n}\n\nfunction updateTrackFavorite(trackNode: HTMLElement, isFavorite: boolean) {\n  const { dataset } = trackNode;\n  const { favorite } = dataset;\n  const isCurrentFavorite = Boolean(favorite);\n  if (isFavorite !== isCurrentFavorite) {\n    if (isFavorite) {\n      dataset.favorite = TRUE;\n    } else {\n      delete dataset.favorite;\n    }\n  }\n}\n\nfunction updateFavoritesByTrackIds(ids: number[]) {\n  localTrackInfoDb.updateFavoritesByTrackIds(ids);\n  allPlayers.forEach((trackNode) => {\n    const { dataset } = trackNode;\n    const { trackId } = dataset;\n    const id = Number(trackId);\n    const isFavorite = ids.includes(id);\n    updateTrackFavorite(trackNode, isFavorite);\n  });\n}\n\nfunction toggleFavorite(ev: Event) {\n  const node = ev.currentTarget as HTMLElement;\n  const trackNode = node.closest<HTMLElement>('.track-player');\n  const { dataset } = trackNode;\n  const { trackId, favorite } = dataset;\n  const id = Number(trackId);\n  if (!id) {\n    throw new Error('No current track id!');\n  }\n  const nextFavorite = !favorite;\n  localTrackInfoDb.updateFavorite(id, nextFavorite);\n  if (nextFavorite) {\n    dataset.favorite = TRUE;\n  } else {\n    delete dataset.favorite;\n  }\n  if (window.isAuthenticated) {\n    sendToggleFavoriteRequest(trackId, nextFavorite)\n      .then((results: { favorite_track_ids: number[] }) => {\n        const { favorite_track_ids } = results;\n        /* console.log('[trackControls:toggleFavorite]', {\n         *   favorite_track_ids,\n         * });\n         */\n        updateFavoritesByTrackIds(favorite_track_ids);\n        const msgId = nextFavorite ? 'trackAddedToFavorites' : 'trackRemovedFromFavorites';\n        commonNotify.showSuccess(getJsText(msgId));\n      })\n      .catch((err) => {\n        // eslint-disable-next-line no-console\n        console.error('[tracksPlayer:toggleFavorite:sendToggleFavoriteRequest] error', {\n          err,\n        });\n        debugger; // eslint-disable-line no-debugger\n        commonNotify.showError(err);\n      });\n  }\n}\n\nfunction initTrackPlayerNode(trackNode: HTMLElement) {\n  const activePlayerData = floatingPlayer.activePlayerData;\n  const { dataset } = trackNode;\n  const {\n    inited,\n    trackId, // \"1\"\n    trackMediaUrl, // \"/media/samples/gr-400x225.jpg\"\n  } = dataset;\n  const id = Number(trackId || '');\n  if (!id || inited || !trackMediaUrl) {\n    return;\n  }\n  const trackInfo = localTrackInfoDb.getById(id);\n  if (activePlayerData && activePlayerData.id == id) {\n    currentTrackPlayer = trackNode;\n    trackNode.classList.toggle('current', true);\n    // dataset.status = floatingPlayer.state.status;\n    floatingPlayerUpdate(floatingPlayer.state, activePlayerData);\n  } else if (trackInfo) {\n    const position = trackInfo.position;\n    if (position) {\n      updateTrackPosition(trackNode, position, false);\n    }\n  }\n  if (trackInfo) {\n    if (!window.isAuthenticated) {\n      if (trackInfo?.favorite) {\n        updateTrackFavorite(trackNode, trackInfo.favorite);\n      }\n    }\n  }\n  const controls = trackNode.querySelectorAll<HTMLElement>('.track-control');\n  controls.forEach((node) => {\n    const { dataset } = node;\n    const { inited, controlId } = dataset;\n    if (inited) {\n      return;\n    }\n    if (controlId === 'toggleFavorite') {\n      node.addEventListener('click', toggleFavorite);\n    }\n    if (controlId === 'play') {\n      node.addEventListener('click', trackPlayHandler);\n    }\n    dataset.inited = TRUE;\n  });\n  dataset.inited = TRUE;\n}\n\nexport function initTracksPlayerWrapper(domNode: HTMLElement = document.body) {\n  allPlayers = domNode.querySelectorAll<HTMLElement>('.track-player[data-track-media-url]');\n  allPlayers.forEach(initTrackPlayerNode);\n  floatingPlayer.callbacks.addPlayStartCallback(floatingPlayerPlay);\n  floatingPlayer.callbacks.addPlayStopCallback(floatingPlayerStop);\n  floatingPlayer.callbacks.addUpdateCallback(floatingPlayerUpdate);\n}\n"],"names":["getErrorText","error","Array","isArray","map","this","bind","join","Error","message","String","quoteHtmlAttr","str","preserveCR","crValue","replace","formatDuration","time","sec","min","hrs","items","Math","floor","val","idx","padStart","shift","filter","Boolean","icons","success","warn","info","notifyRoot","undefined","timeoutDelay","inited","removeNotify","notifyData","node","handler","classList","remove","clearTimeout","setTimeout","removeChild","_e","showNotify","mode","text","content","ensureInit","document","createElement","add","nodeIcon","appendChild","nodeText","innerHTML","window","requestAnimationFrame","removeNotifyHandler","addEventListener","showInfo","showSuccess","showWarn","showError","showDemo","init","createDomNode","rootNode","body","setAttribute","id","textNode","querySelector","console","trim","sendApiRequest","url","method","requestData","headers","Accept","cookieId","cookiesList","cookie","split","i","length","s","decodeURIComponent","getCookie","fetch","credentials","JSON","stringify","then","res","ok","status","statusText","json","data","errMsg","detail","catch","err","localTrackInfoDb","updatePlayedCount","playedCount","now","_now","Date","trackInfo","getOrCreate","isNaN","lastPlayed","lastUpdated","insert","updatePosition","position","updateFavorite","favorite","_toggleInFavoritesIndex","updateFavoritesByTrackIds","ids","_getIndex","forEach","isFavorite","includes","_setFavoritesIndex","save","createNewRecord","getById","localStorage","setItem","list","Number","trackInfoToJsonStr","_addToIndex","getFavorites","getAll","it","getItem","parse","trackInfoFromJsonStr","_getFavoritesIndex","_","favoritesIndex","_addToFavoritesIndex","push","_removeFromFavoritesIndex","checkId","value","_setIndex","index","_removeFromIndex","_toggleInIndex","delete","removeItem","clearAll","storageActivePlayerDataId","saveActivePlayerData","convertActivePlayerDataToJsonStr","loadActivePlayerData","convertActivePlayerDataFromJsonStr","storageFloatingPlayerStateId","saveFloatingPlayerState","saveData","lastTimestamp","loaded","convertFloatingPlayerStateToJsonStr","loadFloatingPlayerState","convertFloatingPlayerStateFromJsonStr","setParentDomNode","parentDomNode","requireParentDomNode","ensureHiddenPlayer","hiddenPlayerNode","audio","hasAudio","audioNode","hasSource","sourceNode","ensureHiddenPlayerAudio","createHiddenPlayerSource","opts","removeHiddenPlayerSource","type","src","removeHiddenPlayerAudio","pause","from","getElementsByTagName","onPlayStartCallbacks","onPlayStopCallbacks","onUpdateCallbacks","onErrorCallbacks","addPlayStartCallback","cb","addPlayStopCallback","addUpdateCallback","addErrorCallback","invokePlayStartCallbacks","floatingPlayerState","activePlayerData","invokePlayStopCallbacks","invokeUpdateCallbacks","invokeErrorCallbacks","callbacks","FloatingPlayerCallbacks","hiddenPlayer","HiddenPlayer","state","initTrackDomNode","updateAll","log","requireAudio","handleAudioCanPlay","handleAudioPlay","handleAudioTimeUpdate","handleAudioEnded","removeAudio","hasAudioSource","requireDomNode","domNode","requireActivePlayerData","showFloatingPlayer","visible","updateStateInDom","hideFloatingPlayer","updateActivePlayerDataInDom","innerText","title","style","backgroundImage","imageUrl","dataset","toggle","updatePositionInDom","progress","setProperty","calculateProgress","duration","ratio","round","updateTrackPosition","timeNode","ev","currAudio","currentTarget","source","currentTime","readyState","thisAudio","_ev","handleAudioSourceError","srcElement","getActiveTrackId","loadAudio","mediaUrl","isAudioPlaying","paused","ended","isPlaying","pauseCurrentPlayer","playCurrentPlayer","play","trackPlayHandler","ensureAudioLoaded","setActivePlayerData","setActiveTrack","trackNode","trackId","parseFloat","trackDuration","trackMediaUrl","imageNode","getAttribute","titleNode","getActivePlayerDataFromTrackNode","setPosition","clearActiveData","querySelectorAll","controlId","floatingPlayer","FloatingPlayer","allPlayers","sharedPlayerNode","currentTrackPlayer","isCurrent","timeFormatted","floatingPlayerPlay","_floatingPlayerState","floatingPlayerStop","incrementPlayedCount","floatingPlayerUpdate","find","getTrackNode","timeMs","updateTrackPlayedCount","updatedPlayedCount","strValue","valueNode","closest","incrementing","isAuthenticated","played_count","finally","stopPreviousPlayer","playingId","isFloatingPlaying","updateTrackFavorite","toggleFavorite","nextFavorite","sendToggleFavoriteRequest","results","favorite_track_ids","msgId","initTrackPlayerNode"],"sourceRoot":""}